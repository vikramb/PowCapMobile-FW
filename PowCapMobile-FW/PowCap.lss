
PowCap.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000017aa  0000183e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d1  00800116  00800116  00001854  2**0
                  ALLOC
  3 .stab         00001224  00000000  00000000  00001854  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000063a  00000000  00000000  00002a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000005b0  00000000  00000000  000030b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ebb  00000000  00000000  00003662  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009050  00000000  00000000  0000451d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002397  00000000  00000000  0000d56d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007b2c  00000000  00000000  0000f904  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008a0  00000000  00000000  00017430  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000369b  00000000  00000000  00017cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000508d  00000000  00000000  0001b36b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000e31  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000908  00000000  00000000  00021229  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       0:	a4 c0       	rjmp	.+328    	; 0x14a <__ctors_end>
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
       2:	00 00       	nop
       4:	be c0       	rjmp	.+380    	; 0x182 <__bad_interrupt>
       6:	00 00       	nop
       8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
       a:	00 00       	nop
       c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
       e:	00 00       	nop
      10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
      12:	00 00       	nop
      14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
      16:	00 00       	nop
      18:	b4 c0       	rjmp	.+360    	; 0x182 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
      22:	00 00       	nop
      24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
      26:	00 00       	nop
      28:	5e c5       	rjmp	.+2748   	; 0xae6 <__vector_10>
      2a:	00 00       	nop
      2c:	20 c6       	rjmp	.+3136   	; 0xc6e <__vector_11>
      2e:	00 00       	nop
      30:	a8 c0       	rjmp	.+336    	; 0x182 <__bad_interrupt>
      32:	00 00       	nop
      34:	a6 c0       	rjmp	.+332    	; 0x182 <__bad_interrupt>
      36:	00 00       	nop
      38:	a4 c0       	rjmp	.+328    	; 0x182 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a2 c0       	rjmp	.+324    	; 0x182 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a0 c0       	rjmp	.+320    	; 0x182 <__bad_interrupt>
      42:	00 00       	nop
      44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
      46:	00 00       	nop
      48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
      4e:	00 00       	nop
      50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
      52:	00 00       	nop
      54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
      56:	00 00       	nop
      58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
      5e:	00 00       	nop
      60:	90 c0       	rjmp	.+288    	; 0x182 <__bad_interrupt>
      62:	00 00       	nop
      64:	8e c0       	rjmp	.+284    	; 0x182 <__bad_interrupt>
      66:	00 00       	nop
      68:	8c c0       	rjmp	.+280    	; 0x182 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8a c0       	rjmp	.+276    	; 0x182 <__bad_interrupt>
      6e:	00 00       	nop
      70:	88 c0       	rjmp	.+272    	; 0x182 <__bad_interrupt>
      72:	00 00       	nop
      74:	86 c0       	rjmp	.+268    	; 0x182 <__bad_interrupt>
      76:	00 00       	nop
      78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7a c0       	rjmp	.+244    	; 0x182 <__bad_interrupt>
      8e:	00 00       	nop
      90:	78 c0       	rjmp	.+240    	; 0x182 <__bad_interrupt>
      92:	00 00       	nop
      94:	76 c0       	rjmp	.+236    	; 0x182 <__bad_interrupt>
      96:	00 00       	nop
      98:	74 c0       	rjmp	.+232    	; 0x182 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	72 c0       	rjmp	.+228    	; 0x182 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	70 c0       	rjmp	.+224    	; 0x182 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6e c0       	rjmp	.+220    	; 0x182 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6c c0       	rjmp	.+216    	; 0x182 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <DeviceDescriptor>:
      ac:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
      bc:	dc 01                                               ..

000000be <ConfigurationDescriptor>:
      be:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ce:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      de:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      ee:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000fc <LanguageString>:
      fc:	04 03 09 04                                         ....

00000100 <ManufacturerString>:
     100:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     110:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000011a <ProductString>:
     11a:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
     12a:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     13a:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	da e0       	ldi	r29, 0x0A	; 10
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	ea ea       	ldi	r30, 0xAA	; 170
     15e:	f7 e1       	ldi	r31, 0x17	; 23
     160:	02 c0       	rjmp	.+4      	; 0x166 <__do_copy_data+0x10>
     162:	05 90       	lpm	r0, Z+
     164:	0d 92       	st	X+, r0
     166:	a6 31       	cpi	r26, 0x16	; 22
     168:	b1 07       	cpc	r27, r17
     16a:	d9 f7       	brne	.-10     	; 0x162 <__do_copy_data+0xc>

0000016c <__do_clear_bss>:
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	a6 e1       	ldi	r26, 0x16	; 22
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
     174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
     176:	a7 3e       	cpi	r26, 0xE7	; 231
     178:	b1 07       	cpc	r27, r17
     17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>
     17c:	1e d0       	rcall	.+60     	; 0x1ba <main>
     17e:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <_exit>

00000182 <__bad_interrupt>:
     182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     184:	84 b7       	in	r24, 0x34	; 52
     186:	87 7f       	andi	r24, 0xF7	; 247
     188:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     18a:	88 e1       	ldi	r24, 0x18	; 24
     18c:	0f b6       	in	r0, 0x3f	; 63
     18e:	f8 94       	cli
     190:	80 93 60 00 	sts	0x0060, r24
     194:	10 92 60 00 	sts	0x0060, r1
     198:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	80 e8       	ldi	r24, 0x80	; 128
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	80 93 61 00 	sts	0x0061, r24
     1a6:	90 93 61 00 	sts	0x0061, r25
     1aa:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
     1ac:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= LEDS_ALL_LEDS;
     1ae:	5b 9a       	sbi	0x0b, 3	; 11
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
     1b0:	5b 98       	cbi	0x0b, 3	; 11

	/* Hardware Initialization */
	LEDs_Init();
    LEDs_TurnOffLEDs(LEDS_LED1);
    //LEDs_TurnOnLEDs(LEDS_LED1);
    SPI_MasterInit();
     1b2:	b9 d0       	rcall	.+370    	; 0x326 <SPI_MasterInit>
    filters_MasterInit();
     1b4:	cb d0       	rcall	.+406    	; 0x34c <filters_MasterInit>
    USB_Init();
     1b6:	7f d4       	rcall	.+2302   	; 0xab6 <USB_Init>
    setup_callbacks();

}
     1b8:	e4 c0       	rjmp	.+456    	; 0x382 <setup_callbacks>

000001ba <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     1ba:	0f 93       	push	r16
     1bc:	1f 93       	push	r17
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
	
    
    SetupHardware();
     1c2:	e0 df       	rcall	.-64     	; 0x184 <SetupHardware>
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1c4:	06 e1       	ldi	r16, 0x16	; 22
     1c6:	11 e0       	ldi	r17, 0x01	; 1
     1c8:	f8 01       	movw	r30, r16
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1ca:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1cc:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
     1ce:	81 e2       	ldi	r24, 0x21	; 33
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	91 83       	std	Z+1, r25	; 0x01
     1d4:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     1d6:	93 83       	std	Z+3, r25	; 0x03
     1d8:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     1da:	95 83       	std	Z+5, r25	; 0x05
     1dc:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     1de:	81 ea       	ldi	r24, 0xA1	; 161
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	97 83       	std	Z+7, r25	; 0x07
     1e4:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     1e6:	80 e8       	ldi	r24, 0x80	; 128
     1e8:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     1ea:	12 86       	std	Z+10, r1	; 0x0a
     1ec:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1ee:	2f bf       	out	0x3f, r18	; 63



	RingBuffer_InitBuffer(&USB_Buffer, USB_Buffer_Data, sizeof(USB_Buffer_Data));

	sei();
     1f0:	78 94       	sei
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1f2:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1f4:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     1f6:	20 91 1f 01 	lds	r18, 0x011F
     1fa:	30 91 20 01 	lds	r19, 0x0120
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1fe:	8f bf       	out	0x3f, r24	; 63
		 *  \return Boolean \c true if the buffer contains no free space, false otherwise.
		 */
		static inline bool RingBuffer_IsFull(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline bool RingBuffer_IsFull(RingBuffer_t* const Buffer)
		{
			return (RingBuffer_GetCount(Buffer) == Buffer->Size);
     200:	80 91 1e 01 	lds	r24, 0x011E
     204:	90 e0       	ldi	r25, 0x00	; 0

	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USB_Buffer)))
     206:	28 17       	cp	r18, r24
     208:	39 07       	cpc	r19, r25
     20a:	19 f1       	breq	.+70     	; 0x252 <main+0x98>
		{
		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	0e 94 17 0a 	call	0x142e	; 0x142e <CDC_Device_ReceiveByte>
			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
        	if (!(ReceivedByte < 0)) {
     214:	97 fd       	sbrc	r25, 7
     216:	1d c0       	rjmp	.+58     	; 0x252 <main+0x98>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     218:	f8 01       	movw	r30, r16

			*Buffer->In = Data;
     21a:	a0 81       	ld	r26, Z
     21c:	b1 81       	ldd	r27, Z+1	; 0x01
                  RingBuffer_Insert(&USB_Buffer, ReceivedByte);
     21e:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
     220:	20 81       	ld	r18, Z
     222:	31 81       	ldd	r19, Z+1	; 0x01
     224:	2f 5f       	subi	r18, 0xFF	; 255
     226:	3f 4f       	sbci	r19, 0xFF	; 255
     228:	31 83       	std	Z+1, r19	; 0x01
     22a:	20 83       	st	Z, r18
     22c:	46 81       	ldd	r20, Z+6	; 0x06
     22e:	57 81       	ldd	r21, Z+7	; 0x07
     230:	24 17       	cp	r18, r20
     232:	35 07       	cpc	r19, r21
     234:	21 f4       	brne	.+8      	; 0x23e <main+0x84>
			  Buffer->In = Buffer->Start;
     236:	24 81       	ldd	r18, Z+4	; 0x04
     238:	35 81       	ldd	r19, Z+5	; 0x05
     23a:	31 83       	std	Z+1, r19	; 0x01
     23c:	20 83       	st	Z, r18
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     23e:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     240:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
     242:	21 85       	ldd	r18, Z+9	; 0x09
     244:	32 85       	ldd	r19, Z+10	; 0x0a
     246:	2f 5f       	subi	r18, 0xFF	; 255
     248:	3f 4f       	sbci	r19, 0xFF	; 255
     24a:	32 87       	std	Z+10, r19	; 0x0a
     24c:	21 87       	std	Z+9, r18	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     24e:	4f bf       	out	0x3f, r20	; 63
                  //RingBuffer_Insert(&USB_Buffer, 'a');
                  //LEDs_ToggleLEDs(LEDS_LED1);
                  process_byte(ReceivedByte);
     250:	bf d1       	rcall	.+894    	; 0x5d0 <process_byte>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     252:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     254:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     256:	c0 91 1f 01 	lds	r28, 0x011F
     25a:	d0 91 20 01 	lds	r29, 0x0120
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     25e:	8f bf       	out	0x3f, r24	; 63
		uint16_t BufferCount = RingBuffer_GetCount(&USB_Buffer);



			/* Read bytes from the USART receive buffer into the USB IN endpoint */
		while ((BufferCount--)>0)
     260:	23 c0       	rjmp	.+70     	; 0x2a8 <main+0xee>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     262:	e0 91 18 01 	lds	r30, 0x0118
     266:	f0 91 19 01 	lds	r31, 0x0119
		{
                /* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
				if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	60 81       	ld	r22, Z
     270:	0e 94 a9 09 	call	0x1352	; 0x1352 <CDC_Device_SendByte>
     274:	88 23       	and	r24, r24
     276:	d1 f4       	brne	.+52     	; 0x2ac <main+0xf2>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     278:	f8 01       	movw	r30, r16
		
			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     27a:	82 81       	ldd	r24, Z+2	; 0x02
     27c:	93 81       	ldd	r25, Z+3	; 0x03
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	93 83       	std	Z+3, r25	; 0x03
     282:	82 83       	std	Z+2, r24	; 0x02
     284:	26 81       	ldd	r18, Z+6	; 0x06
     286:	37 81       	ldd	r19, Z+7	; 0x07
     288:	82 17       	cp	r24, r18
     28a:	93 07       	cpc	r25, r19
     28c:	21 f4       	brne	.+8      	; 0x296 <main+0xdc>
			  Buffer->Out = Buffer->Start;
     28e:	84 81       	ldd	r24, Z+4	; 0x04
     290:	95 81       	ldd	r25, Z+5	; 0x05
     292:	93 83       	std	Z+3, r25	; 0x03
     294:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     296:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     298:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
     29a:	81 85       	ldd	r24, Z+9	; 0x09
     29c:	92 85       	ldd	r25, Z+10	; 0x0a
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	92 87       	std	Z+10, r25	; 0x0a
     2a2:	81 87       	std	Z+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2a4:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     2a6:	21 97       	sbiw	r28, 0x01	; 1
		uint16_t BufferCount = RingBuffer_GetCount(&USB_Buffer);



			/* Read bytes from the USART receive buffer into the USB IN endpoint */
		while ((BufferCount--)>0)
     2a8:	20 97       	sbiw	r28, 0x00	; 0
     2aa:	d9 f6       	brne	.-74     	; 0x262 <main+0xa8>
				/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
                RingBuffer_Remove(&USB_Buffer);

			}

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	0e 94 08 0a 	call	0x1410	; 0x1410 <CDC_Device_USBTask>
		USB_USBTask();
     2b4:	4f d7       	rcall	.+3742   	; 0x1154 <USB_USBTask>
	}
     2b6:	9d cf       	rjmp	.-198    	; 0x1f2 <main+0x38>

000002b8 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
}
     2b8:	08 95       	ret

000002ba <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
}
     2ba:	08 95       	ret

000002bc <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	91 e0       	ldi	r25, 0x01	; 1
}
     2c0:	f7 c7       	rjmp	.+4078   	; 0x12b0 <CDC_Device_ConfigureEndpoints>

000002c2 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	91 e0       	ldi	r25, 0x01	; 1
}
     2c6:	58 c7       	rjmp	.+3760   	; 0x1178 <CDC_Device_ProcessControlRequest>

000002c8 <EVENT_CDC_Device_LineEncodingChanged>:

void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    
}
     2c8:	08 95       	ret

000002ca <CALLBACK_USB_GetDescriptor>:
     2ca:	da 01       	movw	r26, r20
     2cc:	92 30       	cpi	r25, 0x02	; 2
     2ce:	49 f0       	breq	.+18     	; 0x2e2 <CALLBACK_USB_GetDescriptor+0x18>
     2d0:	93 30       	cpi	r25, 0x03	; 3
     2d2:	61 f0       	breq	.+24     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x22>
     2d4:	91 30       	cpi	r25, 0x01	; 1
     2d6:	f9 f4       	brne	.+62     	; 0x316 <CALLBACK_USB_GetDescriptor+0x4c>
     2d8:	ec ea       	ldi	r30, 0xAC	; 172
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	22 e1       	ldi	r18, 0x12	; 18
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	1e c0       	rjmp	.+60     	; 0x31e <CALLBACK_USB_GetDescriptor+0x54>
     2e2:	ee eb       	ldi	r30, 0xBE	; 190
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	2e e3       	ldi	r18, 0x3E	; 62
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	19 c0       	rjmp	.+50     	; 0x31e <CALLBACK_USB_GetDescriptor+0x54>
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	49 f0       	breq	.+18     	; 0x302 <CALLBACK_USB_GetDescriptor+0x38>
     2f0:	81 30       	cpi	r24, 0x01	; 1
     2f2:	18 f0       	brcs	.+6      	; 0x2fa <CALLBACK_USB_GetDescriptor+0x30>
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	79 f4       	brne	.+30     	; 0x316 <CALLBACK_USB_GetDescriptor+0x4c>
     2f8:	08 c0       	rjmp	.+16     	; 0x30a <CALLBACK_USB_GetDescriptor+0x40>
     2fa:	ec ef       	ldi	r30, 0xFC	; 252
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	84 91       	lpm	r24, Z+
     300:	07 c0       	rjmp	.+14     	; 0x310 <CALLBACK_USB_GetDescriptor+0x46>
     302:	e0 e0       	ldi	r30, 0x00	; 0
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	84 91       	lpm	r24, Z+
     308:	03 c0       	rjmp	.+6      	; 0x310 <CALLBACK_USB_GetDescriptor+0x46>
     30a:	ea e1       	ldi	r30, 0x1A	; 26
     30c:	f1 e0       	ldi	r31, 0x01	; 1
     30e:	84 91       	lpm	r24, Z+
     310:	28 2f       	mov	r18, r24
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	04 c0       	rjmp	.+8      	; 0x31e <CALLBACK_USB_GetDescriptor+0x54>
     316:	e0 e0       	ldi	r30, 0x00	; 0
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	ed 93       	st	X+, r30
     320:	fc 93       	st	X, r31
     322:	c9 01       	movw	r24, r18
     324:	08 95       	ret

00000326 <SPI_MasterInit>:
#include <avr/io.h>
#include "SPI.h"

void SPI_MasterInit(void) {
     //Set Direction For MOSI and SCK PIN
    DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS)|(1<<DD_SS2)|(1<<DD_SS3)|(1<<DD_SS4); 
     326:	87 e7       	ldi	r24, 0x77	; 119
     328:	84 b9       	out	0x04, r24	; 4
    //Set SPI Control Registers
    PORT_SPI = PORT_SPI | PSS;
     32a:	85 b1       	in	r24, 0x05	; 5
     32c:	85 b9       	out	0x05, r24	; 5
    PORT_SPI = PORT_SPI | PSS2;
     32e:	2a 9a       	sbi	0x05, 2	; 5
    PORT_SPI = PORT_SPI | PSS3;
     330:	85 b1       	in	r24, 0x05	; 5
     332:	85 60       	ori	r24, 0x05	; 5
     334:	85 b9       	out	0x05, r24	; 5
    PORT_SPI = PORT_SPI | PSS4;
     336:	85 b1       	in	r24, 0x05	; 5
     338:	86 60       	ori	r24, 0x06	; 6
     33a:	85 b9       	out	0x05, r24	; 5
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL);
     33c:	89 e5       	ldi	r24, 0x59	; 89
     33e:	8c bd       	out	0x2c, r24	; 44
}
     340:	08 95       	ret

00000342 <SPI_MaterTransmit>:

void SPI_MaterTransmit(char cData) {
    SPDR = cData;
     342:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1<<SPIF)));
     344:	0d b4       	in	r0, 0x2d	; 45
     346:	07 fe       	sbrs	r0, 7
     348:	fd cf       	rjmp	.-6      	; 0x344 <SPI_MaterTransmit+0x2>
}
     34a:	08 95       	ret

0000034c <filters_MasterInit>:

void filters_MasterInit(void) {

	//Turn off JTAG by switching JTD pin high (twice within 4 cycles)
	//-this gives us access to i/o pins PF4, PF5, PF6, and PF7 on the atmega16u4
	MCUCR |= (1<<7);
     34c:	85 b7       	in	r24, 0x35	; 53
     34e:	80 68       	ori	r24, 0x80	; 128
     350:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<7);
     352:	85 b7       	in	r24, 0x35	; 53
     354:	80 68       	ori	r24, 0x80	; 128
     356:	85 bf       	out	0x35, r24	; 53
	
	
	//sets voltage and current BP MUX to passthrough/OFF (PSU line)	
	PORTF &= ~(1<<PF4);
     358:	8c 98       	cbi	0x11, 4	; 17
	PORTF &= ~(1<<PF5);	
     35a:	8d 98       	cbi	0x11, 5	; 17
    //PORTF |= (1<<PF4);
	//PORTF |= (1<<PF5);	

	//sets voltage and current BP MUX to passthrough/OFF (alt line)	
	PORTF &= ~(1<<PF6);
     35c:	8e 98       	cbi	0x11, 6	; 17
	PORTF &= ~(1<<PF7);
     35e:	8f 98       	cbi	0x11, 7	; 17

	//sets 60Hz Notch OFF for Voltage and Current lines (PSU input)
	//PORTF |= ((1<<PF0)|(1<<PF1));	
	PORTF &= ~(1<<PF0);
     360:	88 98       	cbi	0x11, 0	; 17
	PORTF &= ~(1<<PF1);
     362:	89 98       	cbi	0x11, 1	; 17

	//sets 60Hz Notch OFF for V and I lines (alternate input)
	PORTE &= ~(1<<PE6);
     364:	76 98       	cbi	0x0e, 6	; 14
	PORTD &= ~(1<<PD7);
     366:	5f 98       	cbi	0x0b, 7	; 11
	PORTF &= ~(1<<PF7); 
	PORTE &= ~(1<<PE6);
	PORTD &= ~(1<<PD7);
*/

}
     368:	08 95       	ret

0000036a <init_callbacks>:
#include <avr/io.h>
#include "FSM.h"
#include "commands.h"
#include <ctype.h>
void init_callbacks() {
     36a:	e2 ea       	ldi	r30, 0xA2	; 162
     36c:	f1 e0       	ldi	r31, 0x01	; 1
    for(int i=0;i<NUMBER_CMDS;i++){
        cb_command[i].id = 0;
     36e:	11 82       	std	Z+1, r1	; 0x01
     370:	10 82       	st	Z, r1
        cb_command[i].fxn = NULL;
     372:	13 82       	std	Z+3, r1	; 0x03
     374:	12 82       	std	Z+2, r1	; 0x02
     376:	34 96       	adiw	r30, 0x04	; 4
#include <avr/io.h>
#include "FSM.h"
#include "commands.h"
#include <ctype.h>
void init_callbacks() {
    for(int i=0;i<NUMBER_CMDS;i++){
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	e2 3d       	cpi	r30, 0xD2	; 210
     37c:	f8 07       	cpc	r31, r24
     37e:	b9 f7       	brne	.-18     	; 0x36e <init_callbacks+0x4>
        cb_command[i].id = 0;
        cb_command[i].fxn = NULL;
    }
}
     380:	08 95       	ret

00000382 <setup_callbacks>:

void setup_callbacks() {
    init_callbacks();
     382:	f3 df       	rcall	.-26     	; 0x36a <init_callbacks>
    cb_command[0].id = GAINC1;
     384:	87 e4       	ldi	r24, 0x47	; 71
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	90 93 a3 01 	sts	0x01A3, r25
     38c:	80 93 a2 01 	sts	0x01A2, r24
    cb_command[0].fxn = cb_gainC1; 
     390:	8f e0       	ldi	r24, 0x0F	; 15
     392:	93 e0       	ldi	r25, 0x03	; 3
     394:	90 93 a5 01 	sts	0x01A5, r25
     398:	80 93 a4 01 	sts	0x01A4, r24
    cb_command[1].id = GAINV1;
     39c:	87 e6       	ldi	r24, 0x67	; 103
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	90 93 a7 01 	sts	0x01A7, r25
     3a4:	80 93 a6 01 	sts	0x01A6, r24
    cb_command[1].fxn = cb_gainV1;
     3a8:	87 e3       	ldi	r24, 0x37	; 55
     3aa:	93 e0       	ldi	r25, 0x03	; 3
     3ac:	90 93 a9 01 	sts	0x01A9, r25
     3b0:	80 93 a8 01 	sts	0x01A8, r24
    cb_command[2].id = FILTERV1;
     3b4:	86 e6       	ldi	r24, 0x66	; 102
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	90 93 ab 01 	sts	0x01AB, r25
     3bc:	80 93 aa 01 	sts	0x01AA, r24
    cb_command[2].fxn = cb_filterV1;
     3c0:	8f ea       	ldi	r24, 0xAF	; 175
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	90 93 ad 01 	sts	0x01AD, r25
     3c8:	80 93 ac 01 	sts	0x01AC, r24
    cb_command[3].id = FILTERC1;
     3cc:	86 e4       	ldi	r24, 0x46	; 70
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	90 93 af 01 	sts	0x01AF, r25
     3d4:	80 93 ae 01 	sts	0x01AE, r24
    cb_command[3].fxn = cb_filterC1;
     3d8:	8d ec       	ldi	r24, 0xCD	; 205
     3da:	93 e0       	ldi	r25, 0x03	; 3
     3dc:	90 93 b1 01 	sts	0x01B1, r25
     3e0:	80 93 b0 01 	sts	0x01B0, r24
    cb_command[4].id = NOTCHV1;
     3e4:	8e e6       	ldi	r24, 0x6E	; 110
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	90 93 b3 01 	sts	0x01B3, r25
     3ec:	80 93 b2 01 	sts	0x01B2, r24
    cb_command[4].fxn = cb_notchV1;
     3f0:	87 e2       	ldi	r24, 0x27	; 39
     3f2:	94 e0       	ldi	r25, 0x04	; 4
     3f4:	90 93 b5 01 	sts	0x01B5, r25
     3f8:	80 93 b4 01 	sts	0x01B4, r24
    cb_command[5].id = NOTCHC1;
     3fc:	8e e4       	ldi	r24, 0x4E	; 78
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	90 93 b7 01 	sts	0x01B7, r25
     404:	80 93 b6 01 	sts	0x01B6, r24
    cb_command[5].fxn = cb_notchC1;
     408:	85 e4       	ldi	r24, 0x45	; 69
     40a:	94 e0       	ldi	r25, 0x04	; 4
     40c:	90 93 b9 01 	sts	0x01B9, r25
     410:	80 93 b8 01 	sts	0x01B8, r24
    cb_command[6].id = GAINC2;
     414:	81 e4       	ldi	r24, 0x41	; 65
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	90 93 bb 01 	sts	0x01BB, r25
     41c:	80 93 ba 01 	sts	0x01BA, r24
    cb_command[6].fxn = cb_gainC2; 
     420:	8f e5       	ldi	r24, 0x5F	; 95
     422:	93 e0       	ldi	r25, 0x03	; 3
     424:	90 93 bd 01 	sts	0x01BD, r25
     428:	80 93 bc 01 	sts	0x01BC, r24
    cb_command[7].id = GAINV2;
     42c:	81 e6       	ldi	r24, 0x61	; 97
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	90 93 bf 01 	sts	0x01BF, r25
     434:	80 93 be 01 	sts	0x01BE, r24
    cb_command[7].fxn = cb_gainV2;
     438:	87 e8       	ldi	r24, 0x87	; 135
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	90 93 c1 01 	sts	0x01C1, r25
     440:	80 93 c0 01 	sts	0x01C0, r24
    cb_command[8].id = FILTERV2;
     444:	82 e6       	ldi	r24, 0x62	; 98
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	90 93 c3 01 	sts	0x01C3, r25
     44c:	80 93 c2 01 	sts	0x01C2, r24
    cb_command[8].fxn = cb_filterV2;
     450:	8b ee       	ldi	r24, 0xEB	; 235
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	90 93 c5 01 	sts	0x01C5, r25
     458:	80 93 c4 01 	sts	0x01C4, r24
    cb_command[9].id = FILTERC2;
     45c:	82 e4       	ldi	r24, 0x42	; 66
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	90 93 c7 01 	sts	0x01C7, r25
     464:	80 93 c6 01 	sts	0x01C6, r24
    cb_command[9].fxn = cb_filterC2;
     468:	89 e0       	ldi	r24, 0x09	; 9
     46a:	94 e0       	ldi	r25, 0x04	; 4
     46c:	90 93 c9 01 	sts	0x01C9, r25
     470:	80 93 c8 01 	sts	0x01C8, r24
    cb_command[10].id = NOTCHV2;
     474:	83 e7       	ldi	r24, 0x73	; 115
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	90 93 cb 01 	sts	0x01CB, r25
     47c:	80 93 ca 01 	sts	0x01CA, r24
    cb_command[10].fxn = cb_notchV2;
     480:	8f e6       	ldi	r24, 0x6F	; 111
     482:	94 e0       	ldi	r25, 0x04	; 4
     484:	90 93 cd 01 	sts	0x01CD, r25
     488:	80 93 cc 01 	sts	0x01CC, r24
    cb_command[11].id = NOTCHC2;
     48c:	83 e5       	ldi	r24, 0x53	; 83
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	90 93 cf 01 	sts	0x01CF, r25
     494:	80 93 ce 01 	sts	0x01CE, r24
    cb_command[11].fxn = cb_notchC2;
     498:	8d e8       	ldi	r24, 0x8D	; 141
     49a:	94 e0       	ldi	r25, 0x04	; 4
     49c:	90 93 d1 01 	sts	0x01D1, r25
     4a0:	80 93 d0 01 	sts	0x01D0, r24

}
     4a4:	08 95       	ret

000004a6 <search_callback>:

int16_t search_callback(COMMAND *cmd) {
    
    for (int i=0;i<NUMBER_CMDS;i++) {

        if (cmd->command == cb_command[i].id) {
     4a6:	fc 01       	movw	r30, r24
     4a8:	40 81       	ld	r20, Z
     4aa:	51 81       	ldd	r21, Z+1	; 0x01
     4ac:	e2 ea       	ldi	r30, 0xA2	; 162
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
}


int16_t search_callback(COMMAND *cmd) {
    
    for (int i=0;i<NUMBER_CMDS;i++) {
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0

        if (cmd->command == cb_command[i].id) {
     4b4:	60 81       	ld	r22, Z
     4b6:	71 81       	ldd	r23, Z+1	; 0x01
     4b8:	46 17       	cp	r20, r22
     4ba:	57 07       	cpc	r21, r23
     4bc:	79 f4       	brne	.+30     	; 0x4dc <search_callback+0x36>
            //LEDs_ToggleLEDs(LEDS_LED1);
            cb_command[i].fxn(cmd->param);
     4be:	f9 01       	movw	r30, r18
     4c0:	ee 0f       	add	r30, r30
     4c2:	ff 1f       	adc	r31, r31
     4c4:	ee 0f       	add	r30, r30
     4c6:	ff 1f       	adc	r31, r31
     4c8:	ee 55       	subi	r30, 0x5E	; 94
     4ca:	fe 4f       	sbci	r31, 0xFE	; 254
     4cc:	02 80       	ldd	r0, Z+2	; 0x02
     4ce:	f3 81       	ldd	r31, Z+3	; 0x03
     4d0:	e0 2d       	mov	r30, r0
     4d2:	02 96       	adiw	r24, 0x02	; 2
     4d4:	09 95       	icall
            return 0;
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	08 c0       	rjmp	.+16     	; 0x4ec <search_callback+0x46>
}


int16_t search_callback(COMMAND *cmd) {
    
    for (int i=0;i<NUMBER_CMDS;i++) {
     4dc:	2f 5f       	subi	r18, 0xFF	; 255
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	34 96       	adiw	r30, 0x04	; 4
     4e2:	2c 30       	cpi	r18, 0x0C	; 12
     4e4:	31 05       	cpc	r19, r1
     4e6:	31 f7       	brne	.-52     	; 0x4b4 <search_callback+0xe>
            //LEDs_ToggleLEDs(LEDS_LED1);
            cb_command[i].fxn(cmd->param);
            return 0;
        }
    }
    return -1;
     4e8:	2f ef       	ldi	r18, 0xFF	; 255
     4ea:	3f ef       	ldi	r19, 0xFF	; 255
}
     4ec:	c9 01       	movw	r24, r18
     4ee:	08 95       	ret

000004f0 <init_command>:
void init_FSM() {
    FSM_State = WAITING_CMD;
    init_command(&cmd);
}

void init_command(COMMAND *cmd) {
     4f0:	fc 01       	movw	r30, r24
    cmd->command = 0;
     4f2:	11 82       	std	Z+1, r1	; 0x01
     4f4:	10 82       	st	Z, r1
    cmd->param[0] = '\0';
     4f6:	12 82       	std	Z+2, r1	; 0x02
}
     4f8:	08 95       	ret

000004fa <init_FSM>:
    }
    return -1;
}

void init_FSM() {
    FSM_State = WAITING_CMD;
     4fa:	10 92 a1 01 	sts	0x01A1, r1
    init_command(&cmd);
     4fe:	82 ed       	ldi	r24, 0xD2	; 210
     500:	91 e0       	ldi	r25, 0x01	; 1
}
     502:	f6 cf       	rjmp	.-20     	; 0x4f0 <init_command>

00000504 <set_command>:
    cmd->command = 0;
    cmd->param[0] = '\0';
}

void set_command(COMMAND *cmd, int16_t c) {
    if(VALIDCMD(c)) { 
     504:	67 34       	cpi	r22, 0x47	; 71
     506:	71 05       	cpc	r23, r1
     508:	09 f1       	breq	.+66     	; 0x54c <set_command+0x48>
     50a:	67 36       	cpi	r22, 0x67	; 103
     50c:	71 05       	cpc	r23, r1
     50e:	f1 f0       	breq	.+60     	; 0x54c <set_command+0x48>
     510:	66 36       	cpi	r22, 0x66	; 102
     512:	71 05       	cpc	r23, r1
     514:	d9 f0       	breq	.+54     	; 0x54c <set_command+0x48>
     516:	66 34       	cpi	r22, 0x46	; 70
     518:	71 05       	cpc	r23, r1
     51a:	c1 f0       	breq	.+48     	; 0x54c <set_command+0x48>
     51c:	6e 36       	cpi	r22, 0x6E	; 110
     51e:	71 05       	cpc	r23, r1
     520:	a9 f0       	breq	.+42     	; 0x54c <set_command+0x48>
     522:	6e 34       	cpi	r22, 0x4E	; 78
     524:	71 05       	cpc	r23, r1
     526:	91 f0       	breq	.+36     	; 0x54c <set_command+0x48>
     528:	61 34       	cpi	r22, 0x41	; 65
     52a:	71 05       	cpc	r23, r1
     52c:	79 f0       	breq	.+30     	; 0x54c <set_command+0x48>
     52e:	61 36       	cpi	r22, 0x61	; 97
     530:	71 05       	cpc	r23, r1
     532:	61 f0       	breq	.+24     	; 0x54c <set_command+0x48>
     534:	62 36       	cpi	r22, 0x62	; 98
     536:	71 05       	cpc	r23, r1
     538:	49 f0       	breq	.+18     	; 0x54c <set_command+0x48>
     53a:	62 34       	cpi	r22, 0x42	; 66
     53c:	71 05       	cpc	r23, r1
     53e:	31 f0       	breq	.+12     	; 0x54c <set_command+0x48>
     540:	63 37       	cpi	r22, 0x73	; 115
     542:	71 05       	cpc	r23, r1
     544:	19 f0       	breq	.+6      	; 0x54c <set_command+0x48>
     546:	63 35       	cpi	r22, 0x53	; 83
     548:	71 05       	cpc	r23, r1
     54a:	39 f4       	brne	.+14     	; 0x55a <set_command+0x56>
        cmd->command = c;
     54c:	fc 01       	movw	r30, r24
     54e:	71 83       	std	Z+1, r23	; 0x01
     550:	60 83       	st	Z, r22
        FSM_State = PARAM1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 a1 01 	sts	0x01A1, r24
     558:	08 95       	ret
    } else {
    
        init_FSM();
     55a:	cf cf       	rjmp	.-98     	; 0x4fa <init_FSM>

0000055c <set_param0>:
    }
}

void set_param0(COMMAND *cmd, int16_t p) {
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	df 93       	push	r29
     562:	cf 93       	push	r28
     564:	0f 92       	push	r0
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	8c 01       	movw	r16, r24
    if(isxdigit(p)) {
     56c:	cb 01       	movw	r24, r22
     56e:	69 83       	std	Y+1, r22	; 0x01
     570:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <isxdigit>
     574:	69 81       	ldd	r22, Y+1	; 0x01
     576:	00 97       	sbiw	r24, 0x00	; 0
     578:	39 f0       	breq	.+14     	; 0x588 <set_param0+0x2c>
        cmd->param[0] = (char)p;
     57a:	f8 01       	movw	r30, r16
     57c:	62 83       	std	Z+2, r22	; 0x02
        cmd->param[1] = '\0';
     57e:	13 82       	std	Z+3, r1	; 0x03
        FSM_State = PARAM2;
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	80 93 a1 01 	sts	0x01A1, r24
     586:	01 c0       	rjmp	.+2      	; 0x58a <set_param0+0x2e>
    } else {
        init_FSM();
     588:	b8 df       	rcall	.-144    	; 0x4fa <init_FSM>
    }
}
     58a:	0f 90       	pop	r0
     58c:	cf 91       	pop	r28
     58e:	df 91       	pop	r29
     590:	1f 91       	pop	r17
     592:	0f 91       	pop	r16
     594:	08 95       	ret

00000596 <set_param1>:

void set_param1(COMMAND *cmd, int16_t p) {
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	df 93       	push	r29
     59c:	cf 93       	push	r28
     59e:	0f 92       	push	r0
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	8c 01       	movw	r16, r24
    if(isxdigit((int)p)) {
     5a6:	cb 01       	movw	r24, r22
     5a8:	69 83       	std	Y+1, r22	; 0x01
     5aa:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <isxdigit>
     5ae:	69 81       	ldd	r22, Y+1	; 0x01
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	39 f0       	breq	.+14     	; 0x5c2 <set_param1+0x2c>
        cmd->param[1] = (char)p;
     5b4:	f8 01       	movw	r30, r16
     5b6:	63 83       	std	Z+3, r22	; 0x03
        cmd->param[2] = '\0';
     5b8:	14 82       	std	Z+4, r1	; 0x04
        FSM_State = RUN;
     5ba:	85 e0       	ldi	r24, 0x05	; 5
     5bc:	80 93 a1 01 	sts	0x01A1, r24
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <set_param1+0x2e>
    } else {
        init_FSM();
     5c2:	9b df       	rcall	.-202    	; 0x4fa <init_FSM>
    }
}
     5c4:	0f 90       	pop	r0
     5c6:	cf 91       	pop	r28
     5c8:	df 91       	pop	r29
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	08 95       	ret

000005d0 <process_byte>:

void process_byte(int16_t rxbyte) {
     5d0:	bc 01       	movw	r22, r24
    switch(FSM_State) { 
     5d2:	80 91 a1 01 	lds	r24, 0x01A1
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	51 f0       	breq	.+20     	; 0x5ee <process_byte+0x1e>
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	28 f0       	brcs	.+10     	; 0x5e8 <process_byte+0x18>
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	49 f0       	breq	.+18     	; 0x5f4 <process_byte+0x24>
     5e2:	85 30       	cpi	r24, 0x05	; 5
     5e4:	91 f4       	brne	.+36     	; 0x60a <process_byte+0x3a>
     5e6:	09 c0       	rjmp	.+18     	; 0x5fa <process_byte+0x2a>
        case WAITING_CMD:
            set_command(&cmd, rxbyte);
     5e8:	82 ed       	ldi	r24, 0xD2	; 210
     5ea:	91 e0       	ldi	r25, 0x01	; 1
            break;
     5ec:	8b cf       	rjmp	.-234    	; 0x504 <set_command>
        case PARAM1:
            set_param0(&cmd, rxbyte);
     5ee:	82 ed       	ldi	r24, 0xD2	; 210
     5f0:	91 e0       	ldi	r25, 0x01	; 1
            break;
     5f2:	b4 cf       	rjmp	.-152    	; 0x55c <set_param0>
        case PARAM2:
            set_param1(&cmd, rxbyte);
     5f4:	82 ed       	ldi	r24, 0xD2	; 210
     5f6:	91 e0       	ldi	r25, 0x01	; 1
            break;
     5f8:	ce cf       	rjmp	.-100    	; 0x596 <set_param1>
        case RUN:
            if(isspace(rxbyte)) {
     5fa:	cb 01       	movw	r24, r22
     5fc:	0e 94 87 0b 	call	0x170e	; 0x170e <isspace>
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	19 f0       	breq	.+6      	; 0x60a <process_byte+0x3a>
                search_callback(&cmd);
     604:	82 ed       	ldi	r24, 0xD2	; 210
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	4e df       	rcall	.-356    	; 0x4a6 <search_callback>
                init_FSM();
                break;
            }
        default:
            init_FSM();
     60a:	77 cf       	rjmp	.-274    	; 0x4fa <init_FSM>

0000060c <LEDs_ToggleLEDs.clone.0>:
				PORTD = ((PORTD | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
     60c:	8b b1       	in	r24, 0x0b	; 11
     60e:	98 e0       	ldi	r25, 0x08	; 8
     610:	89 27       	eor	r24, r25
     612:	8b b9       	out	0x0b, r24	; 11
			}
     614:	08 95       	ret

00000616 <LEDs_TurnOffLEDs.clone.1>:
				PORTD |= LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
     616:	5b 98       	cbi	0x0b, 3	; 11
			}
     618:	08 95       	ret

0000061a <LEDs_TurnOnLEDs.clone.2>:

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
     61a:	5b 9a       	sbi	0x0b, 3	; 11
			}
     61c:	08 95       	ret

0000061e <cb_gainC1>:
#include "commands.h"
#include <stdlib.h>
#include "SPI.h"


void cb_gainC1(char *param) {		//current1 gain
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	df 93       	push	r29
     628:	cf 93       	push	r28
     62a:	00 d0       	rcall	.+0      	; 0x62c <cb_gainC1+0xe>
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
    char *s;
    int16_t val;
    s = param;
     630:	9a 83       	std	Y+2, r25	; 0x02
     632:	89 83       	std	Y+1, r24	; 0x01
    val = strtol(param,&s,16);
     634:	be 01       	movw	r22, r28
     636:	6f 5f       	subi	r22, 0xFF	; 255
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	40 e1       	ldi	r20, 0x10	; 16
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	32 d7       	rcall	.+3684   	; 0x14a4 <strtol>
     640:	7b 01       	movw	r14, r22
    for (int i=0;i<val;i++) {
     642:	00 e0       	ldi	r16, 0x00	; 0
     644:	10 e0       	ldi	r17, 0x00	; 0
     646:	03 c0       	rjmp	.+6      	; 0x64e <cb_gainC1+0x30>
        LEDs_ToggleLEDs(LEDS_LED1);
     648:	e1 df       	rcall	.-62     	; 0x60c <LEDs_ToggleLEDs.clone.0>
void cb_gainC1(char *param) {		//current1 gain
    char *s;
    int16_t val;
    s = param;
    val = strtol(param,&s,16);
    for (int i=0;i<val;i++) {
     64a:	0f 5f       	subi	r16, 0xFF	; 255
     64c:	1f 4f       	sbci	r17, 0xFF	; 255
     64e:	0e 15       	cp	r16, r14
     650:	1f 05       	cpc	r17, r15
     652:	d4 f3       	brlt	.-12     	; 0x648 <cb_gainC1+0x2a>
        LEDs_ToggleLEDs(LEDS_LED1);
    }
    SELECT1();
     654:	2c 98       	cbi	0x05, 4	; 5
    SPI_MaterTransmit(val);
     656:	8e 2d       	mov	r24, r14
     658:	74 de       	rcall	.-792    	; 0x342 <SPI_MaterTransmit>
    UNSELECT1();
     65a:	2c 9a       	sbi	0x05, 4	; 5

}
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	cf 91       	pop	r28
     662:	df 91       	pop	r29
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	08 95       	ret

0000066e <cb_gainV1>:

void cb_gainV1(char *param) {		//voltage1 gain
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	df 93       	push	r29
     678:	cf 93       	push	r28
     67a:	00 d0       	rcall	.+0      	; 0x67c <cb_gainV1+0xe>
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
    char *s;
    int16_t val;
    s = param;
     680:	9a 83       	std	Y+2, r25	; 0x02
     682:	89 83       	std	Y+1, r24	; 0x01
    val = strtol(param,&s,16);
     684:	be 01       	movw	r22, r28
     686:	6f 5f       	subi	r22, 0xFF	; 255
     688:	7f 4f       	sbci	r23, 0xFF	; 255
     68a:	40 e1       	ldi	r20, 0x10	; 16
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	0a d7       	rcall	.+3604   	; 0x14a4 <strtol>
     690:	7b 01       	movw	r14, r22
    for (int i=0;i<val;i++) {
     692:	00 e0       	ldi	r16, 0x00	; 0
     694:	10 e0       	ldi	r17, 0x00	; 0
     696:	03 c0       	rjmp	.+6      	; 0x69e <cb_gainV1+0x30>
        LEDs_ToggleLEDs(LEDS_LED1);
     698:	b9 df       	rcall	.-142    	; 0x60c <LEDs_ToggleLEDs.clone.0>
void cb_gainV1(char *param) {		//voltage1 gain
    char *s;
    int16_t val;
    s = param;
    val = strtol(param,&s,16);
    for (int i=0;i<val;i++) {
     69a:	0f 5f       	subi	r16, 0xFF	; 255
     69c:	1f 4f       	sbci	r17, 0xFF	; 255
     69e:	0e 15       	cp	r16, r14
     6a0:	1f 05       	cpc	r17, r15
     6a2:	d4 f3       	brlt	.-12     	; 0x698 <cb_gainV1+0x2a>
        LEDs_ToggleLEDs(LEDS_LED1);
    }
    SELECT0();
     6a4:	28 98       	cbi	0x05, 0	; 5
    SPI_MaterTransmit(val);
     6a6:	8e 2d       	mov	r24, r14
     6a8:	4c de       	rcall	.-872    	; 0x342 <SPI_MaterTransmit>
    UNSELECT0();
     6aa:	28 9a       	sbi	0x05, 0	; 5

}
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	cf 91       	pop	r28
     6b2:	df 91       	pop	r29
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	08 95       	ret

000006be <cb_gainC2>:

void cb_gainC2(char *param) {		//current2 gain
     6be:	ef 92       	push	r14
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	df 93       	push	r29
     6c8:	cf 93       	push	r28
     6ca:	00 d0       	rcall	.+0      	; 0x6cc <cb_gainC2+0xe>
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
    char *s;
    int16_t val;
    s = param;
     6d0:	9a 83       	std	Y+2, r25	; 0x02
     6d2:	89 83       	std	Y+1, r24	; 0x01
    val = strtol(param,&s,16);
     6d4:	be 01       	movw	r22, r28
     6d6:	6f 5f       	subi	r22, 0xFF	; 255
     6d8:	7f 4f       	sbci	r23, 0xFF	; 255
     6da:	40 e1       	ldi	r20, 0x10	; 16
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	e2 d6       	rcall	.+3524   	; 0x14a4 <strtol>
     6e0:	7b 01       	movw	r14, r22
    for (int i=0;i<val;i++) {
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	03 c0       	rjmp	.+6      	; 0x6ee <cb_gainC2+0x30>
        LEDs_ToggleLEDs(LEDS_LED1);
     6e8:	91 df       	rcall	.-222    	; 0x60c <LEDs_ToggleLEDs.clone.0>
void cb_gainC2(char *param) {		//current2 gain
    char *s;
    int16_t val;
    s = param;
    val = strtol(param,&s,16);
    for (int i=0;i<val;i++) {
     6ea:	0f 5f       	subi	r16, 0xFF	; 255
     6ec:	1f 4f       	sbci	r17, 0xFF	; 255
     6ee:	0e 15       	cp	r16, r14
     6f0:	1f 05       	cpc	r17, r15
     6f2:	d4 f3       	brlt	.-12     	; 0x6e8 <cb_gainC2+0x2a>
        LEDs_ToggleLEDs(LEDS_LED1);
    }
    SELECT3();
     6f4:	2e 98       	cbi	0x05, 6	; 5
    SPI_MaterTransmit(val);
     6f6:	8e 2d       	mov	r24, r14
     6f8:	24 de       	rcall	.-952    	; 0x342 <SPI_MaterTransmit>
    UNSELECT3();
     6fa:	2e 9a       	sbi	0x05, 6	; 5

}
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	cf 91       	pop	r28
     702:	df 91       	pop	r29
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	08 95       	ret

0000070e <cb_gainV2>:

void cb_gainV2(char *param) {		//voltage2 gain
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	df 93       	push	r29
     718:	cf 93       	push	r28
     71a:	00 d0       	rcall	.+0      	; 0x71c <cb_gainV2+0xe>
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
    char *s;
    int16_t val;
    s = param;
     720:	9a 83       	std	Y+2, r25	; 0x02
     722:	89 83       	std	Y+1, r24	; 0x01
    val = strtol(param,&s,16);
     724:	be 01       	movw	r22, r28
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	40 e1       	ldi	r20, 0x10	; 16
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	ba d6       	rcall	.+3444   	; 0x14a4 <strtol>
     730:	7b 01       	movw	r14, r22
    for (int i=0;i<val;i++) {
     732:	00 e0       	ldi	r16, 0x00	; 0
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	03 c0       	rjmp	.+6      	; 0x73e <cb_gainV2+0x30>
        LEDs_ToggleLEDs(LEDS_LED1);
     738:	69 df       	rcall	.-302    	; 0x60c <LEDs_ToggleLEDs.clone.0>
void cb_gainV2(char *param) {		//voltage2 gain
    char *s;
    int16_t val;
    s = param;
    val = strtol(param,&s,16);
    for (int i=0;i<val;i++) {
     73a:	0f 5f       	subi	r16, 0xFF	; 255
     73c:	1f 4f       	sbci	r17, 0xFF	; 255
     73e:	0e 15       	cp	r16, r14
     740:	1f 05       	cpc	r17, r15
     742:	d4 f3       	brlt	.-12     	; 0x738 <cb_gainV2+0x2a>
        LEDs_ToggleLEDs(LEDS_LED1);
    }
    SELECT2();
     744:	2d 98       	cbi	0x05, 5	; 5
    SPI_MaterTransmit(val);
     746:	8e 2d       	mov	r24, r14
     748:	fc dd       	rcall	.-1032   	; 0x342 <SPI_MaterTransmit>
    UNSELECT2();
     74a:	2d 9a       	sbi	0x05, 5	; 5

}
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	08 95       	ret

0000075e <cb_filterV1>:

void cb_filterV1(char *param) {		//voltage BP filter MUX decision "n" 
     75e:	df 93       	push	r29
     760:	cf 93       	push	r28
     762:	00 d0       	rcall	.+0      	; 0x764 <cb_filterV1+0x6>
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
	char *s;
	int16_t val;
	s = param;
     768:	9a 83       	std	Y+2, r25	; 0x02
     76a:	89 83       	std	Y+1, r24	; 0x01
	val = strtol(param,&s,16);
     76c:	be 01       	movw	r22, r28
     76e:	6f 5f       	subi	r22, 0xFF	; 255
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	40 e1       	ldi	r20, 0x10	; 16
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	96 d6       	rcall	.+3372   	; 0x14a4 <strtol>
	
	switch(val) {
     778:	61 15       	cp	r22, r1
     77a:	71 05       	cpc	r23, r1
     77c:	21 f0       	breq	.+8      	; 0x786 <cb_filterV1+0x28>
     77e:	61 30       	cpi	r22, 0x01	; 1
     780:	71 05       	cpc	r23, r1
     782:	31 f4       	brne	.+12     	; 0x790 <cb_filterV1+0x32>
     784:	03 c0       	rjmp	.+6      	; 0x78c <cb_filterV1+0x2e>
	case 0:				//BP ON	
		PORTF |=(1<<4);
     786:	8c 9a       	sbi	0x11, 4	; 17
		LEDs_TurnOnLEDs(LEDS_LED1);
     788:	48 df       	rcall	.-368    	; 0x61a <LEDs_TurnOnLEDs.clone.2>
		break;
     78a:	02 c0       	rjmp	.+4      	; 0x790 <cb_filterV1+0x32>
	case 1:				//BP OFF 
		PORTF &=~(1<<4);
     78c:	8c 98       	cbi	0x11, 4	; 17
		LEDs_TurnOffLEDs(LEDS_LED1);
     78e:	43 df       	rcall	.-378    	; 0x616 <LEDs_TurnOffLEDs.clone.1>
		break;
	}
}
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	cf 91       	pop	r28
     796:	df 91       	pop	r29
     798:	08 95       	ret

0000079a <cb_filterC1>:

void cb_filterC1(char *param) {		//current1 BP filter MUX decision "n" 
     79a:	df 93       	push	r29
     79c:	cf 93       	push	r28
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <cb_filterC1+0x6>
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
	char *s;
	int16_t val;
	s = param;
     7a4:	9a 83       	std	Y+2, r25	; 0x02
     7a6:	89 83       	std	Y+1, r24	; 0x01
	val = strtol(param,&s,16);
     7a8:	be 01       	movw	r22, r28
     7aa:	6f 5f       	subi	r22, 0xFF	; 255
     7ac:	7f 4f       	sbci	r23, 0xFF	; 255
     7ae:	40 e1       	ldi	r20, 0x10	; 16
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	78 d6       	rcall	.+3312   	; 0x14a4 <strtol>
	
	switch(val) {
     7b4:	61 15       	cp	r22, r1
     7b6:	71 05       	cpc	r23, r1
     7b8:	21 f0       	breq	.+8      	; 0x7c2 <cb_filterC1+0x28>
     7ba:	61 30       	cpi	r22, 0x01	; 1
     7bc:	71 05       	cpc	r23, r1
     7be:	31 f4       	brne	.+12     	; 0x7cc <cb_filterC1+0x32>
     7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <cb_filterC1+0x2e>
	case 0:					//BP OFF
		PORTF |=(1<<5);
     7c2:	8d 9a       	sbi	0x11, 5	; 17
		LEDs_TurnOnLEDs(LEDS_LED1);
     7c4:	2a df       	rcall	.-428    	; 0x61a <LEDs_TurnOnLEDs.clone.2>
		break;
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <cb_filterC1+0x32>
	case 1:					//BP ON
		PORTF &=~(1<<5);
     7c8:	8d 98       	cbi	0x11, 5	; 17
		LEDs_TurnOffLEDs(LEDS_LED1);	
     7ca:	25 df       	rcall	.-438    	; 0x616 <LEDs_TurnOffLEDs.clone.1>
		break;
	}
}
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	cf 91       	pop	r28
     7d2:	df 91       	pop	r29
     7d4:	08 95       	ret

000007d6 <cb_filterV2>:

void cb_filterV2(char *param) {		//voltage BP filter MUX decision "n" 
     7d6:	df 93       	push	r29
     7d8:	cf 93       	push	r28
     7da:	00 d0       	rcall	.+0      	; 0x7dc <cb_filterV2+0x6>
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
	char *s;
	int16_t val;
	s = param;
     7e0:	9a 83       	std	Y+2, r25	; 0x02
     7e2:	89 83       	std	Y+1, r24	; 0x01
	val = strtol(param,&s,16);
     7e4:	be 01       	movw	r22, r28
     7e6:	6f 5f       	subi	r22, 0xFF	; 255
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	40 e1       	ldi	r20, 0x10	; 16
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	5a d6       	rcall	.+3252   	; 0x14a4 <strtol>
	
	switch(val) {
     7f0:	61 15       	cp	r22, r1
     7f2:	71 05       	cpc	r23, r1
     7f4:	21 f0       	breq	.+8      	; 0x7fe <cb_filterV2+0x28>
     7f6:	61 30       	cpi	r22, 0x01	; 1
     7f8:	71 05       	cpc	r23, r1
     7fa:	31 f4       	brne	.+12     	; 0x808 <cb_filterV2+0x32>
     7fc:	03 c0       	rjmp	.+6      	; 0x804 <cb_filterV2+0x2e>
	case 0:					//BP ON
		PORTF |=(1<<6);
     7fe:	8e 9a       	sbi	0x11, 6	; 17
		LEDs_TurnOnLEDs(LEDS_LED1);
     800:	0c df       	rcall	.-488    	; 0x61a <LEDs_TurnOnLEDs.clone.2>
		break;
     802:	02 c0       	rjmp	.+4      	; 0x808 <cb_filterV2+0x32>
	case 1:					//BP OFF
		PORTF &=~(1<<6);
     804:	8e 98       	cbi	0x11, 6	; 17
		LEDs_TurnOffLEDs(LEDS_LED1);
     806:	07 df       	rcall	.-498    	; 0x616 <LEDs_TurnOffLEDs.clone.1>
		break;
	}
}
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	cf 91       	pop	r28
     80e:	df 91       	pop	r29
     810:	08 95       	ret

00000812 <cb_filterC2>:


void cb_filterC2(char *param) {		//current BP filter MUX decision "n" 
     812:	df 93       	push	r29
     814:	cf 93       	push	r28
     816:	00 d0       	rcall	.+0      	; 0x818 <cb_filterC2+0x6>
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
	char *s;
	int16_t val;
	s = param;
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
	val = strtol(param,&s,16);
     820:	be 01       	movw	r22, r28
     822:	6f 5f       	subi	r22, 0xFF	; 255
     824:	7f 4f       	sbci	r23, 0xFF	; 255
     826:	40 e1       	ldi	r20, 0x10	; 16
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	3c d6       	rcall	.+3192   	; 0x14a4 <strtol>
	
	switch(val) {
     82c:	61 15       	cp	r22, r1
     82e:	71 05       	cpc	r23, r1
     830:	21 f0       	breq	.+8      	; 0x83a <cb_filterC2+0x28>
     832:	61 30       	cpi	r22, 0x01	; 1
     834:	71 05       	cpc	r23, r1
     836:	31 f4       	brne	.+12     	; 0x844 <cb_filterC2+0x32>
     838:	03 c0       	rjmp	.+6      	; 0x840 <cb_filterC2+0x2e>
	case 0:					//BP OFF
		PORTF |=(1<<7);
     83a:	8f 9a       	sbi	0x11, 7	; 17
		LEDs_TurnOnLEDs(LEDS_LED1);
     83c:	ee de       	rcall	.-548    	; 0x61a <LEDs_TurnOnLEDs.clone.2>
		break;
     83e:	02 c0       	rjmp	.+4      	; 0x844 <cb_filterC2+0x32>
	case 1:					//BP ON
		PORTF &=~(1<<7);
     840:	8f 98       	cbi	0x11, 7	; 17
		LEDs_TurnOffLEDs(LEDS_LED1);
     842:	e9 de       	rcall	.-558    	; 0x616 <LEDs_TurnOffLEDs.clone.1>
		break;
	}
}
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	cf 91       	pop	r28
     84a:	df 91       	pop	r29
     84c:	08 95       	ret

0000084e <cb_notchV1>:




void cb_notchV1(char *param) {		//voltage1 60hz notch filter MUX decision "n" 
     84e:	df 93       	push	r29
     850:	cf 93       	push	r28
     852:	00 d0       	rcall	.+0      	; 0x854 <cb_notchV1+0x6>
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
	char *s;
	int16_t val;
	s = param;
     858:	9a 83       	std	Y+2, r25	; 0x02
     85a:	89 83       	std	Y+1, r24	; 0x01
	val = strtol(param,&s,16);
     85c:	be 01       	movw	r22, r28
     85e:	6f 5f       	subi	r22, 0xFF	; 255
     860:	7f 4f       	sbci	r23, 0xFF	; 255
     862:	40 e1       	ldi	r20, 0x10	; 16
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	1e d6       	rcall	.+3132   	; 0x14a4 <strtol>
	
	switch(val) {
     868:	61 15       	cp	r22, r1
     86a:	71 05       	cpc	r23, r1
     86c:	21 f0       	breq	.+8      	; 0x876 <cb_notchV1+0x28>
     86e:	61 30       	cpi	r22, 0x01	; 1
     870:	71 05       	cpc	r23, r1
     872:	31 f4       	brne	.+12     	; 0x880 <cb_notchV1+0x32>
     874:	03 c0       	rjmp	.+6      	; 0x87c <cb_notchV1+0x2e>
	case 0:	
		PORTF |=(1<<0);
     876:	88 9a       	sbi	0x11, 0	; 17
		LEDs_TurnOnLEDs(LEDS_LED1);
     878:	d0 de       	rcall	.-608    	; 0x61a <LEDs_TurnOnLEDs.clone.2>
		break;
     87a:	02 c0       	rjmp	.+4      	; 0x880 <cb_notchV1+0x32>
	case 1:
		PORTF &=~(1<<0);
     87c:	88 98       	cbi	0x11, 0	; 17
		LEDs_TurnOffLEDs(LEDS_LED1);
     87e:	cb de       	rcall	.-618    	; 0x616 <LEDs_TurnOffLEDs.clone.1>
		break;
	}
}
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	cf 91       	pop	r28
     886:	df 91       	pop	r29
     888:	08 95       	ret

0000088a <cb_notchC1>:


void cb_notchC1(char *param) {		//current1 60hz notch filter MUX decision 
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	df 93       	push	r29
     894:	cf 93       	push	r28
     896:	00 d0       	rcall	.+0      	; 0x898 <cb_notchC1+0xe>
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
	char *s;
	int16_t val;
	s = param;
     89c:	9a 83       	std	Y+2, r25	; 0x02
     89e:	89 83       	std	Y+1, r24	; 0x01
	val = strtol(param,&s,16);
     8a0:	be 01       	movw	r22, r28
     8a2:	6f 5f       	subi	r22, 0xFF	; 255
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	40 e1       	ldi	r20, 0x10	; 16
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	fc d5       	rcall	.+3064   	; 0x14a4 <strtol>
     8ac:	7b 01       	movw	r14, r22
     8ae:	8c 01       	movw	r16, r24
	LEDs_ToggleLEDs(LEDS_LED1);
     8b0:	ad de       	rcall	.-678    	; 0x60c <LEDs_ToggleLEDs.clone.0>
	switch(val) {
     8b2:	e1 14       	cp	r14, r1
     8b4:	f1 04       	cpc	r15, r1
     8b6:	29 f0       	breq	.+10     	; 0x8c2 <cb_notchC1+0x38>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	e8 16       	cp	r14, r24
     8bc:	f1 04       	cpc	r15, r1
     8be:	31 f4       	brne	.+12     	; 0x8cc <cb_notchC1+0x42>
     8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <cb_notchC1+0x3e>
	case 0:	
		PORTF |=(1<<1);
     8c2:	89 9a       	sbi	0x11, 1	; 17
		LEDs_TurnOnLEDs(LEDS_LED1);
     8c4:	aa de       	rcall	.-684    	; 0x61a <LEDs_TurnOnLEDs.clone.2>
		break;
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <cb_notchC1+0x42>
	case 1:
        	LEDs_TurnOffLEDs(LEDS_LED1);
     8c8:	a6 de       	rcall	.-692    	; 0x616 <LEDs_TurnOffLEDs.clone.1>
		PORTF &=~(1<<1);
     8ca:	89 98       	cbi	0x11, 1	; 17
		break;
	}
}
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	cf 91       	pop	r28
     8d2:	df 91       	pop	r29
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	08 95       	ret

000008de <cb_notchV2>:


void cb_notchV2(char *param) {		//voltage2 60hz notch filter MUX decision "n" 
     8de:	df 93       	push	r29
     8e0:	cf 93       	push	r28
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <cb_notchV2+0x6>
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
	char *s;
	int16_t val;
	s = param;
     8e8:	9a 83       	std	Y+2, r25	; 0x02
     8ea:	89 83       	std	Y+1, r24	; 0x01
	val = strtol(param,&s,16);
     8ec:	be 01       	movw	r22, r28
     8ee:	6f 5f       	subi	r22, 0xFF	; 255
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	40 e1       	ldi	r20, 0x10	; 16
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	d6 d5       	rcall	.+2988   	; 0x14a4 <strtol>
	
	switch(val) {
     8f8:	61 15       	cp	r22, r1
     8fa:	71 05       	cpc	r23, r1
     8fc:	21 f0       	breq	.+8      	; 0x906 <cb_notchV2+0x28>
     8fe:	61 30       	cpi	r22, 0x01	; 1
     900:	71 05       	cpc	r23, r1
     902:	31 f4       	brne	.+12     	; 0x910 <cb_notchV2+0x32>
     904:	03 c0       	rjmp	.+6      	; 0x90c <cb_notchV2+0x2e>
	case 0:	
		PORTE |=(1<<6);
     906:	76 9a       	sbi	0x0e, 6	; 14
		LEDs_TurnOnLEDs(LEDS_LED1);
     908:	88 de       	rcall	.-752    	; 0x61a <LEDs_TurnOnLEDs.clone.2>
		break;
     90a:	02 c0       	rjmp	.+4      	; 0x910 <cb_notchV2+0x32>
	case 1:
		PORTE &=~(1<<6);
     90c:	76 98       	cbi	0x0e, 6	; 14
		LEDs_TurnOffLEDs(LEDS_LED1);
     90e:	83 de       	rcall	.-762    	; 0x616 <LEDs_TurnOffLEDs.clone.1>
		break;
	}
}
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	cf 91       	pop	r28
     916:	df 91       	pop	r29
     918:	08 95       	ret

0000091a <cb_notchC2>:


void cb_notchC2(char *param) {		//current2 60hz notch filter MUX decision 
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	df 93       	push	r29
     924:	cf 93       	push	r28
     926:	00 d0       	rcall	.+0      	; 0x928 <cb_notchC2+0xe>
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
	char *s;
	int16_t val;
	s = param;
     92c:	9a 83       	std	Y+2, r25	; 0x02
     92e:	89 83       	std	Y+1, r24	; 0x01
	val = strtol(param,&s,16);
     930:	be 01       	movw	r22, r28
     932:	6f 5f       	subi	r22, 0xFF	; 255
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	40 e1       	ldi	r20, 0x10	; 16
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	b4 d5       	rcall	.+2920   	; 0x14a4 <strtol>
     93c:	7b 01       	movw	r14, r22
     93e:	8c 01       	movw	r16, r24
	LEDs_ToggleLEDs(LEDS_LED1);
     940:	65 de       	rcall	.-822    	; 0x60c <LEDs_ToggleLEDs.clone.0>
	switch(val) {
     942:	e1 14       	cp	r14, r1
     944:	f1 04       	cpc	r15, r1
     946:	29 f0       	breq	.+10     	; 0x952 <cb_notchC2+0x38>
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	e8 16       	cp	r14, r24
     94c:	f1 04       	cpc	r15, r1
     94e:	31 f4       	brne	.+12     	; 0x95c <cb_notchC2+0x42>
     950:	03 c0       	rjmp	.+6      	; 0x958 <cb_notchC2+0x3e>
	case 0:	
		PORTD |=(1<<7);
     952:	5f 9a       	sbi	0x0b, 7	; 11
		LEDs_TurnOnLEDs(LEDS_LED1);
     954:	62 de       	rcall	.-828    	; 0x61a <LEDs_TurnOnLEDs.clone.2>
		break;
     956:	02 c0       	rjmp	.+4      	; 0x95c <cb_notchC2+0x42>
	case 1:
        	LEDs_TurnOffLEDs(LEDS_LED1);
     958:	5e de       	rcall	.-836    	; 0x616 <LEDs_TurnOffLEDs.clone.1>
		PORTD &=~(1<<7);
     95a:	5f 98       	cbi	0x0b, 7	; 11
		break;
	}
}
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	cf 91       	pop	r28
     962:	df 91       	pop	r29
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	08 95       	ret

0000096e <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     96e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     972:	eb ee       	ldi	r30, 0xEB	; 235
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	81 60       	ori	r24, 0x01	; 1
     97a:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     97c:	ed ee       	ldi	r30, 0xED	; 237
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
     982:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     986:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     988:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     98c:	88 1f       	adc	r24, r24
     98e:	88 27       	eor	r24, r24
     990:	88 1f       	adc	r24, r24
     992:	08 95       	ret

00000994 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     994:	80 91 dd 01 	lds	r24, 0x01DD
     998:	87 ff       	sbrs	r24, 7
     99a:	11 c0       	rjmp	.+34     	; 0x9be <Endpoint_ClearStatusStage+0x2a>
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     99e:	8e b3       	in	r24, 0x1e	; 30
     9a0:	88 23       	and	r24, r24
     9a2:	b1 f0       	breq	.+44     	; 0x9d0 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9a4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     9a8:	82 ff       	sbrs	r24, 2
     9aa:	f9 cf       	rjmp	.-14     	; 0x99e <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9ac:	80 91 e8 00 	lds	r24, 0x00E8
     9b0:	8b 77       	andi	r24, 0x7B	; 123
     9b2:	80 93 e8 00 	sts	0x00E8, r24
     9b6:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     9b8:	8e b3       	in	r24, 0x1e	; 30
     9ba:	88 23       	and	r24, r24
     9bc:	49 f0       	breq	.+18     	; 0x9d0 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9be:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     9c2:	80 ff       	sbrs	r24, 0
     9c4:	f9 cf       	rjmp	.-14     	; 0x9b8 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9c6:	80 91 e8 00 	lds	r24, 0x00E8
     9ca:	8e 77       	andi	r24, 0x7E	; 126
     9cc:	80 93 e8 00 	sts	0x00E8, r24
     9d0:	08 95       	ret

000009d2 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     9d2:	80 91 e4 00 	lds	r24, 0x00E4
     9d6:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     9da:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     9dc:	20 91 ec 00 	lds	r18, 0x00EC
     9e0:	20 ff       	sbrs	r18, 0
     9e2:	25 c0       	rjmp	.+74     	; 0xa2e <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9e4:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     9e8:	20 fd       	sbrc	r18, 0
     9ea:	15 c0       	rjmp	.+42     	; 0xa16 <Endpoint_WaitUntilReady+0x44>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9ec:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9ee:	22 23       	and	r18, r18
     9f0:	a1 f0       	breq	.+40     	; 0xa1a <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9f2:	25 30       	cpi	r18, 0x05	; 5
     9f4:	a1 f0       	breq	.+40     	; 0xa1e <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9f6:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     9fa:	25 fd       	sbrc	r18, 5
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <Endpoint_WaitUntilReady+0x50>
     9fe:	20 91 e4 00 	lds	r18, 0x00E4
     a02:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a06:	28 17       	cp	r18, r24
     a08:	39 07       	cpc	r19, r25
     a0a:	41 f3       	breq	.-48     	; 0x9dc <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a0c:	44 23       	and	r20, r20
     a0e:	59 f0       	breq	.+22     	; 0xa26 <Endpoint_WaitUntilReady+0x54>
     a10:	41 50       	subi	r20, 0x01	; 1
     a12:	c9 01       	movw	r24, r18
     a14:	e3 cf       	rjmp	.-58     	; 0x9dc <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     a26:	84 e0       	ldi	r24, 0x04	; 4
     a28:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     a2a:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     a2c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a2e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     a32:	22 ff       	sbrs	r18, 2
     a34:	db cf       	rjmp	.-74     	; 0x9ec <Endpoint_WaitUntilReady+0x1a>
     a36:	f9 cf       	rjmp	.-14     	; 0xa2a <Endpoint_WaitUntilReady+0x58>

00000a38 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a40:	45 d0       	rcall	.+138    	; 0xacc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a42:	4c d0       	rcall	.+152    	; 0xadc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a44:	c8 ed       	ldi	r28, 0xD8	; 216
     a46:	d0 e0       	ldi	r29, 0x00	; 0
     a48:	88 81       	ld	r24, Y
     a4a:	8f 77       	andi	r24, 0x7F	; 127
     a4c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     a4e:	88 81       	ld	r24, Y
     a50:	80 68       	ori	r24, 0x80	; 128
     a52:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     a54:	88 81       	ld	r24, Y
     a56:	8f 7d       	andi	r24, 0xDF	; 223
     a58:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a5a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     a5c:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     a5e:	10 92 d9 01 	sts	0x01D9, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     a62:	10 92 db 01 	sts	0x01DB, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     a66:	10 92 da 01 	sts	0x01DA, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     a6a:	00 ee       	ldi	r16, 0xE0	; 224
     a6c:	10 e0       	ldi	r17, 0x00	; 0
     a6e:	f8 01       	movw	r30, r16
     a70:	80 81       	ld	r24, Z
     a72:	8b 7f       	andi	r24, 0xFB	; 251
     a74:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     a76:	88 81       	ld	r24, Y
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	88 83       	st	Y, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	42 e0       	ldi	r20, 0x02	; 2
     a82:	75 df       	rcall	.-278    	; 0x96e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a84:	e1 ee       	ldi	r30, 0xE1	; 225
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	8e 7f       	andi	r24, 0xFE	; 254
     a8c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a8e:	e2 ee       	ldi	r30, 0xE2	; 226
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	81 60       	ori	r24, 0x01	; 1
     a96:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a98:	80 81       	ld	r24, Z
     a9a:	88 60       	ori	r24, 0x08	; 8
     a9c:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a9e:	f8 01       	movw	r30, r16
     aa0:	80 81       	ld	r24, Z
     aa2:	8e 7f       	andi	r24, 0xFE	; 254
     aa4:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     aa6:	88 81       	ld	r24, Y
     aa8:	80 61       	ori	r24, 0x10	; 16
     aaa:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	08 95       	ret

00000ab6 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ab6:	e7 ed       	ldi	r30, 0xD7	; 215
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	81 60       	ori	r24, 0x01	; 1
     abe:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
     ac0:	8a e4       	ldi	r24, 0x4A	; 74
     ac2:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 dc 01 	sts	0x01DC, r24

	USB_ResetInterface();
}
     aca:	b6 cf       	rjmp	.-148    	; 0xa38 <USB_ResetInterface>

00000acc <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     acc:	e8 ed       	ldi	r30, 0xD8	; 216
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	8e 7f       	andi	r24, 0xFE	; 254
     ad4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     ad6:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     ada:	08 95       	ret

00000adc <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     adc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     ae0:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     ae4:	08 95       	ret

00000ae6 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	5f 93       	push	r21
     af8:	6f 93       	push	r22
     afa:	7f 93       	push	r23
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	ef 93       	push	r30
     b06:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     b08:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     b0c:	82 ff       	sbrs	r24, 2
     b0e:	0a c0       	rjmp	.+20     	; 0xb24 <__stack+0x25>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     b10:	80 91 e2 00 	lds	r24, 0x00E2
     b14:	82 ff       	sbrs	r24, 2
     b16:	06 c0       	rjmp	.+12     	; 0xb24 <__stack+0x25>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     b18:	80 91 e1 00 	lds	r24, 0x00E1
     b1c:	8b 7f       	andi	r24, 0xFB	; 251
     b1e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     b22:	17 d3       	rcall	.+1582   	; 0x1152 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     b24:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     b28:	80 ff       	sbrs	r24, 0
     b2a:	1b c0       	rjmp	.+54     	; 0xb62 <__stack+0x63>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     b2c:	80 91 d8 00 	lds	r24, 0x00D8
     b30:	80 ff       	sbrs	r24, 0
     b32:	17 c0       	rjmp	.+46     	; 0xb62 <__stack+0x63>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     b34:	80 91 da 00 	lds	r24, 0x00DA
     b38:	8e 7f       	andi	r24, 0xFE	; 254
     b3a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     b3e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     b42:	80 ff       	sbrs	r24, 0
     b44:	0b c0       	rjmp	.+22     	; 0xb5c <__stack+0x5d>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b46:	80 e1       	ldi	r24, 0x10	; 16
     b48:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b4a:	82 e1       	ldi	r24, 0x12	; 18
     b4c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     b4e:	09 b4       	in	r0, 0x29	; 41
     b50:	00 fe       	sbrs	r0, 0
     b52:	fd cf       	rjmp	.-6      	; 0xb4e <__stack+0x4f>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
     b58:	af db       	rcall	.-2210   	; 0x2b8 <EVENT_USB_Device_Connect>
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <__stack+0x63>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b5c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     b5e:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
     b60:	ac db       	rcall	.-2216   	; 0x2ba <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     b62:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     b66:	80 ff       	sbrs	r24, 0
     b68:	17 c0       	rjmp	.+46     	; 0xb98 <__stack+0x99>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     b6a:	80 91 e2 00 	lds	r24, 0x00E2
     b6e:	80 ff       	sbrs	r24, 0
     b70:	13 c0       	rjmp	.+38     	; 0xb98 <__stack+0x99>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b72:	80 91 e2 00 	lds	r24, 0x00E2
     b76:	8e 7f       	andi	r24, 0xFE	; 254
     b78:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b7c:	80 91 e2 00 	lds	r24, 0x00E2
     b80:	80 61       	ori	r24, 0x10	; 16
     b82:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     b86:	80 91 d8 00 	lds	r24, 0x00D8
     b8a:	80 62       	ori	r24, 0x20	; 32
     b8c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b90:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     b92:	85 e0       	ldi	r24, 0x05	; 5
     b94:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
     b96:	dd d2       	rcall	.+1466   	; 0x1152 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     b98:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     b9c:	84 ff       	sbrs	r24, 4
     b9e:	2c c0       	rjmp	.+88     	; 0xbf8 <__stack+0xf9>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ba0:	80 91 e2 00 	lds	r24, 0x00E2
     ba4:	84 ff       	sbrs	r24, 4
     ba6:	28 c0       	rjmp	.+80     	; 0xbf8 <__stack+0xf9>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ba8:	80 e1       	ldi	r24, 0x10	; 16
     baa:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     bac:	82 e1       	ldi	r24, 0x12	; 18
     bae:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     bb0:	09 b4       	in	r0, 0x29	; 41
     bb2:	00 fe       	sbrs	r0, 0
     bb4:	fd cf       	rjmp	.-6      	; 0xbb0 <__stack+0xb1>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     bb6:	80 91 d8 00 	lds	r24, 0x00D8
     bba:	8f 7d       	andi	r24, 0xDF	; 223
     bbc:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     bc0:	80 91 e1 00 	lds	r24, 0x00E1
     bc4:	8f 7e       	andi	r24, 0xEF	; 239
     bc6:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     bca:	80 91 e2 00 	lds	r24, 0x00E2
     bce:	8f 7e       	andi	r24, 0xEF	; 239
     bd0:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     bd4:	80 91 e2 00 	lds	r24, 0x00E2
     bd8:	81 60       	ori	r24, 0x01	; 1
     bda:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     bde:	80 91 d9 01 	lds	r24, 0x01D9
     be2:	88 23       	and	r24, r24
     be4:	21 f4       	brne	.+8      	; 0xbee <__stack+0xef>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     be6:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     bea:	87 ff       	sbrs	r24, 7
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <__stack+0xf3>
     bee:	84 e0       	ldi	r24, 0x04	; 4
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <__stack+0xf5>
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     bf6:	ad d2       	rcall	.+1370   	; 0x1152 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     bf8:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     bfc:	83 ff       	sbrs	r24, 3
     bfe:	26 c0       	rjmp	.+76     	; 0xc4c <__stack+0x14d>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     c00:	80 91 e2 00 	lds	r24, 0x00E2
     c04:	83 ff       	sbrs	r24, 3
     c06:	22 c0       	rjmp	.+68     	; 0xc4c <__stack+0x14d>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     c08:	80 91 e1 00 	lds	r24, 0x00E1
     c0c:	87 7f       	andi	r24, 0xF7	; 247
     c0e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     c16:	10 92 d9 01 	sts	0x01D9, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     c1a:	80 91 e1 00 	lds	r24, 0x00E1
     c1e:	8e 7f       	andi	r24, 0xFE	; 254
     c20:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     c24:	80 91 e2 00 	lds	r24, 0x00E2
     c28:	8e 7f       	andi	r24, 0xFE	; 254
     c2a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     c2e:	80 91 e2 00 	lds	r24, 0x00E2
     c32:	80 61       	ori	r24, 0x10	; 16
     c34:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	42 e0       	ldi	r20, 0x02	; 2
     c3e:	97 de       	rcall	.-722    	; 0x96e <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     c40:	80 91 f0 00 	lds	r24, 0x00F0
     c44:	88 60       	ori	r24, 0x08	; 8
     c46:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     c4a:	83 d2       	rcall	.+1286   	; 0x1152 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c4c:	ff 91       	pop	r31
     c4e:	ef 91       	pop	r30
     c50:	bf 91       	pop	r27
     c52:	af 91       	pop	r26
     c54:	9f 91       	pop	r25
     c56:	8f 91       	pop	r24
     c58:	7f 91       	pop	r23
     c5a:	6f 91       	pop	r22
     c5c:	5f 91       	pop	r21
     c5e:	4f 91       	pop	r20
     c60:	3f 91       	pop	r19
     c62:	2f 91       	pop	r18
     c64:	0f 90       	pop	r0
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	0f 90       	pop	r0
     c6a:	1f 90       	pop	r1
     c6c:	18 95       	reti

00000c6e <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     c6e:	1f 92       	push	r1
     c70:	0f 92       	push	r0
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	0f 92       	push	r0
     c76:	11 24       	eor	r1, r1
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	6f 93       	push	r22
     c8a:	7f 93       	push	r23
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	af 93       	push	r26
     c92:	bf 93       	push	r27
     c94:	ef 93       	push	r30
     c96:	ff 93       	push	r31
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	0f 92       	push	r0
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     ca2:	89 ee       	ldi	r24, 0xE9	; 233
     ca4:	e8 2e       	mov	r14, r24
     ca6:	f1 2c       	mov	r15, r1
     ca8:	f7 01       	movw	r30, r14
     caa:	80 81       	ld	r24, Z
     cac:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cae:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     cb0:	00 ef       	ldi	r16, 0xF0	; 240
     cb2:	10 e0       	ldi	r17, 0x00	; 0
     cb4:	f8 01       	movw	r30, r16
     cb6:	90 81       	ld	r25, Z
     cb8:	97 7f       	andi	r25, 0xF7	; 247
     cba:	90 83       	st	Z, r25
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     cbc:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	e4 d0       	rcall	.+456    	; 0xe8a <USB_Device_ProcessControlRequest>
     cc2:	f7 01       	movw	r30, r14
     cc4:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     cc6:	f8 01       	movw	r30, r16
     cc8:	90 81       	ld	r25, Z
     cca:	98 60       	ori	r25, 0x08	; 8
     ccc:	90 83       	st	Z, r25
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	f7 01       	movw	r30, r14
     cd2:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     cd4:	0f 90       	pop	r0
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	ff 91       	pop	r31
     cdc:	ef 91       	pop	r30
     cde:	bf 91       	pop	r27
     ce0:	af 91       	pop	r26
     ce2:	9f 91       	pop	r25
     ce4:	8f 91       	pop	r24
     ce6:	7f 91       	pop	r23
     ce8:	6f 91       	pop	r22
     cea:	5f 91       	pop	r21
     cec:	4f 91       	pop	r20
     cee:	3f 91       	pop	r19
     cf0:	2f 91       	pop	r18
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d04:	48 2f       	mov	r20, r24
     d06:	59 2f       	mov	r21, r25
     d08:	fa 01       	movw	r30, r20
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     d0a:	80 91 e3 01 	lds	r24, 0x01E3
     d0e:	90 91 e4 01 	lds	r25, 0x01E4
     d12:	86 17       	cp	r24, r22
     d14:	97 07       	cpc	r25, r23
     d16:	18 f4       	brcc	.+6      	; 0xd1e <Endpoint_Write_Control_Stream_LE+0x1a>
     d18:	bc 01       	movw	r22, r24
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	3b c0       	rjmp	.+118    	; 0xd94 <Endpoint_Write_Control_Stream_LE+0x90>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     d1e:	61 15       	cp	r22, r1
     d20:	71 05       	cpc	r23, r1
     d22:	d9 f7       	brne	.-10     	; 0xd1a <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d24:	80 91 e8 00 	lds	r24, 0x00E8
     d28:	8e 77       	andi	r24, 0x7E	; 126
     d2a:	80 93 e8 00 	sts	0x00E8, r24
     d2e:	f5 cf       	rjmp	.-22     	; 0xd1a <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d30:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d32:	88 23       	and	r24, r24
     d34:	09 f4       	brne	.+2      	; 0xd38 <Endpoint_Write_Control_Stream_LE+0x34>
     d36:	43 c0       	rjmp	.+134    	; 0xdbe <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d38:	85 30       	cpi	r24, 0x05	; 5
     d3a:	e9 f1       	breq	.+122    	; 0xdb6 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d3c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     d40:	83 fd       	sbrc	r24, 3
     d42:	3b c0       	rjmp	.+118    	; 0xdba <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d44:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     d48:	82 fd       	sbrc	r24, 2
     d4a:	2f c0       	rjmp	.+94     	; 0xdaa <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d4c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     d50:	80 ff       	sbrs	r24, 0
     d52:	20 c0       	rjmp	.+64     	; 0xd94 <Endpoint_Write_Control_Stream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     d54:	90 91 f3 00 	lds	r25, 0x00F3
     d58:	80 91 f2 00 	lds	r24, 0x00F2
     d5c:	39 2f       	mov	r19, r25
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	82 2b       	or	r24, r18
     d64:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d66:	06 c0       	rjmp	.+12     	; 0xd74 <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     d68:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d6a:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     d6e:	61 50       	subi	r22, 0x01	; 1
     d70:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     d72:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d74:	61 15       	cp	r22, r1
     d76:	71 05       	cpc	r23, r1
     d78:	19 f0       	breq	.+6      	; 0xd80 <Endpoint_Write_Control_Stream_LE+0x7c>
     d7a:	88 30       	cpi	r24, 0x08	; 8
     d7c:	91 05       	cpc	r25, r1
     d7e:	a0 f3       	brcs	.-24     	; 0xd68 <Endpoint_Write_Control_Stream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	88 30       	cpi	r24, 0x08	; 8
     d84:	91 05       	cpc	r25, r1
     d86:	09 f0       	breq	.+2      	; 0xd8a <Endpoint_Write_Control_Stream_LE+0x86>
     d88:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d8a:	80 91 e8 00 	lds	r24, 0x00E8
     d8e:	8e 77       	andi	r24, 0x7E	; 126
     d90:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     d94:	61 15       	cp	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	59 f6       	brne	.-106    	; 0xd30 <Endpoint_Write_Control_Stream_LE+0x2c>
     d9a:	44 23       	and	r20, r20
     d9c:	49 f6       	brne	.-110    	; 0xd30 <Endpoint_Write_Control_Stream_LE+0x2c>
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <Endpoint_Write_Control_Stream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     da0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     da2:	88 23       	and	r24, r24
     da4:	61 f0       	breq	.+24     	; 0xdbe <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     da6:	85 30       	cpi	r24, 0x05	; 5
     da8:	61 f0       	breq	.+24     	; 0xdc2 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     daa:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     dae:	82 ff       	sbrs	r24, 2
     db0:	f7 cf       	rjmp	.-18     	; 0xda0 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     dc2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     dc4:	08 95       	ret

00000dc6 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     dc6:	e8 2f       	mov	r30, r24
     dc8:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     dca:	80 91 e3 01 	lds	r24, 0x01E3
     dce:	90 91 e4 01 	lds	r25, 0x01E4
     dd2:	86 17       	cp	r24, r22
     dd4:	97 07       	cpc	r25, r23
     dd6:	18 f4       	brcc	.+6      	; 0xdde <Endpoint_Write_Control_PStream_LE+0x18>
     dd8:	bc 01       	movw	r22, r24
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	3d c0       	rjmp	.+122    	; 0xe58 <Endpoint_Write_Control_PStream_LE+0x92>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     dde:	61 15       	cp	r22, r1
     de0:	71 05       	cpc	r23, r1
     de2:	d9 f7       	brne	.-10     	; 0xdda <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     de4:	80 91 e8 00 	lds	r24, 0x00E8
     de8:	8e 77       	andi	r24, 0x7E	; 126
     dea:	80 93 e8 00 	sts	0x00E8, r24
     dee:	f5 cf       	rjmp	.-22     	; 0xdda <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     df0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     df2:	88 23       	and	r24, r24
     df4:	09 f4       	brne	.+2      	; 0xdf8 <Endpoint_Write_Control_PStream_LE+0x32>
     df6:	45 c0       	rjmp	.+138    	; 0xe82 <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     df8:	85 30       	cpi	r24, 0x05	; 5
     dfa:	09 f4       	brne	.+2      	; 0xdfe <Endpoint_Write_Control_PStream_LE+0x38>
     dfc:	3e c0       	rjmp	.+124    	; 0xe7a <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     dfe:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     e02:	83 fd       	sbrc	r24, 3
     e04:	3c c0       	rjmp	.+120    	; 0xe7e <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e06:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     e0a:	82 fd       	sbrc	r24, 2
     e0c:	30 c0       	rjmp	.+96     	; 0xe6e <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e0e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     e12:	80 ff       	sbrs	r24, 0
     e14:	21 c0       	rjmp	.+66     	; 0xe58 <Endpoint_Write_Control_PStream_LE+0x92>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     e16:	90 91 f3 00 	lds	r25, 0x00F3
     e1a:	80 91 f2 00 	lds	r24, 0x00F2
     e1e:	39 2f       	mov	r19, r25
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	82 2b       	or	r24, r18
     e26:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     e2a:	44 91       	lpm	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e2c:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     e30:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     e32:	61 50       	subi	r22, 0x01	; 1
     e34:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     e36:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e38:	61 15       	cp	r22, r1
     e3a:	71 05       	cpc	r23, r1
     e3c:	19 f0       	breq	.+6      	; 0xe44 <Endpoint_Write_Control_PStream_LE+0x7e>
     e3e:	88 30       	cpi	r24, 0x08	; 8
     e40:	91 05       	cpc	r25, r1
     e42:	98 f3       	brcs	.-26     	; 0xe2a <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	88 30       	cpi	r24, 0x08	; 8
     e48:	91 05       	cpc	r25, r1
     e4a:	09 f0       	breq	.+2      	; 0xe4e <Endpoint_Write_Control_PStream_LE+0x88>
     e4c:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e4e:	80 91 e8 00 	lds	r24, 0x00E8
     e52:	8e 77       	andi	r24, 0x7E	; 126
     e54:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     e58:	61 15       	cp	r22, r1
     e5a:	71 05       	cpc	r23, r1
     e5c:	49 f6       	brne	.-110    	; 0xdf0 <Endpoint_Write_Control_PStream_LE+0x2a>
     e5e:	44 23       	and	r20, r20
     e60:	39 f6       	brne	.-114    	; 0xdf0 <Endpoint_Write_Control_PStream_LE+0x2a>
     e62:	05 c0       	rjmp	.+10     	; 0xe6e <Endpoint_Write_Control_PStream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e64:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e66:	88 23       	and	r24, r24
     e68:	61 f0       	breq	.+24     	; 0xe82 <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e6a:	85 30       	cpi	r24, 0x05	; 5
     e6c:	61 f0       	breq	.+24     	; 0xe86 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e6e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     e72:	82 ff       	sbrs	r24, 2
     e74:	f7 cf       	rjmp	.-18     	; 0xe64 <Endpoint_Write_Control_PStream_LE+0x9e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     e86:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     e88:	08 95       	ret

00000e8a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	ac 97       	sbiw	r28, 0x2c	; 44
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     ea2:	ed ed       	ldi	r30, 0xDD	; 221
     ea4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ea6:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     eaa:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     eac:	21 e0       	ldi	r18, 0x01	; 1
     eae:	e5 3e       	cpi	r30, 0xE5	; 229
     eb0:	f2 07       	cpc	r31, r18
     eb2:	c9 f7       	brne	.-14     	; 0xea6 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     eb4:	06 da       	rcall	.-3060   	; 0x2c2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     eb6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     eba:	83 ff       	sbrs	r24, 3
     ebc:	31 c1       	rjmp	.+610    	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     ebe:	80 91 dd 01 	lds	r24, 0x01DD

		switch (USB_ControlRequest.bRequest)
     ec2:	20 91 de 01 	lds	r18, 0x01DE
     ec6:	25 30       	cpi	r18, 0x05	; 5
     ec8:	09 f4       	brne	.+2      	; 0xecc <USB_Device_ProcessControlRequest+0x42>
     eca:	84 c0       	rjmp	.+264    	; 0xfd4 <USB_Device_ProcessControlRequest+0x14a>
     ecc:	26 30       	cpi	r18, 0x06	; 6
     ece:	40 f4       	brcc	.+16     	; 0xee0 <USB_Device_ProcessControlRequest+0x56>
     ed0:	21 30       	cpi	r18, 0x01	; 1
     ed2:	a1 f1       	breq	.+104    	; 0xf3c <USB_Device_ProcessControlRequest+0xb2>
     ed4:	21 30       	cpi	r18, 0x01	; 1
     ed6:	70 f0       	brcs	.+28     	; 0xef4 <USB_Device_ProcessControlRequest+0x6a>
     ed8:	23 30       	cpi	r18, 0x03	; 3
     eda:	09 f0       	breq	.+2      	; 0xede <USB_Device_ProcessControlRequest+0x54>
     edc:	21 c1       	rjmp	.+578    	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
     ede:	2e c0       	rjmp	.+92     	; 0xf3c <USB_Device_ProcessControlRequest+0xb2>
     ee0:	28 30       	cpi	r18, 0x08	; 8
     ee2:	09 f4       	brne	.+2      	; 0xee6 <USB_Device_ProcessControlRequest+0x5c>
     ee4:	f0 c0       	rjmp	.+480    	; 0x10c6 <USB_Device_ProcessControlRequest+0x23c>
     ee6:	29 30       	cpi	r18, 0x09	; 9
     ee8:	09 f4       	brne	.+2      	; 0xeec <USB_Device_ProcessControlRequest+0x62>
     eea:	ff c0       	rjmp	.+510    	; 0x10ea <USB_Device_ProcessControlRequest+0x260>
     eec:	26 30       	cpi	r18, 0x06	; 6
     eee:	09 f0       	breq	.+2      	; 0xef2 <USB_Device_ProcessControlRequest+0x68>
     ef0:	17 c1       	rjmp	.+558    	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
     ef2:	93 c0       	rjmp	.+294    	; 0x101a <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ef4:	80 38       	cpi	r24, 0x80	; 128
     ef6:	21 f0       	breq	.+8      	; 0xf00 <USB_Device_ProcessControlRequest+0x76>
     ef8:	82 38       	cpi	r24, 0x82	; 130
     efa:	09 f0       	breq	.+2      	; 0xefe <USB_Device_ProcessControlRequest+0x74>
     efc:	11 c1       	rjmp	.+546    	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
     efe:	08 c0       	rjmp	.+16     	; 0xf10 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     f00:	80 91 da 01 	lds	r24, 0x01DA
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     f04:	90 91 db 01 	lds	r25, 0x01DB
     f08:	99 23       	and	r25, r25
     f0a:	71 f0       	breq	.+28     	; 0xf28 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     f0c:	82 60       	ori	r24, 0x02	; 2
     f0e:	0c c0       	rjmp	.+24     	; 0xf28 <USB_Device_ProcessControlRequest+0x9e>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     f10:	80 91 e1 01 	lds	r24, 0x01E1
     f14:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f16:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f1a:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	95 ff       	sbrs	r25, 5
     f22:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f24:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f28:	90 91 e8 00 	lds	r25, 0x00E8
     f2c:	97 7f       	andi	r25, 0xF7	; 247
     f2e:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     f32:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     f36:	10 92 f1 00 	sts	0x00F1, r1
     f3a:	d0 c0       	rjmp	.+416    	; 0x10dc <USB_Device_ProcessControlRequest+0x252>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f3c:	88 23       	and	r24, r24
     f3e:	19 f0       	breq	.+6      	; 0xf46 <USB_Device_ProcessControlRequest+0xbc>
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	09 f0       	breq	.+2      	; 0xf46 <USB_Device_ProcessControlRequest+0xbc>
     f44:	ed c0       	rjmp	.+474    	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	8f 71       	andi	r24, 0x1F	; 31
     f4a:	90 70       	andi	r25, 0x00	; 0
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	29 f0       	breq	.+10     	; 0xf5a <USB_Device_ProcessControlRequest+0xd0>
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	91 05       	cpc	r25, r1
     f54:	09 f0       	breq	.+2      	; 0xf58 <USB_Device_ProcessControlRequest+0xce>
     f56:	e4 c0       	rjmp	.+456    	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
     f58:	0b c0       	rjmp	.+22     	; 0xf70 <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     f5a:	80 91 df 01 	lds	r24, 0x01DF
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	09 f0       	breq	.+2      	; 0xf64 <USB_Device_ProcessControlRequest+0xda>
     f62:	de c0       	rjmp	.+444    	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     f64:	23 30       	cpi	r18, 0x03	; 3
     f66:	09 f0       	breq	.+2      	; 0xf6a <USB_Device_ProcessControlRequest+0xe0>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	80 93 db 01 	sts	0x01DB, r24
     f6e:	2c c0       	rjmp	.+88     	; 0xfc8 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     f70:	80 91 df 01 	lds	r24, 0x01DF
     f74:	88 23       	and	r24, r24
     f76:	41 f5       	brne	.+80     	; 0xfc8 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     f78:	20 91 e1 01 	lds	r18, 0x01E1
     f7c:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     f7e:	09 f4       	brne	.+2      	; 0xf82 <USB_Device_ProcessControlRequest+0xf8>
     f80:	cf c0       	rjmp	.+414    	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f82:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     f86:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     f8a:	80 ff       	sbrs	r24, 0
     f8c:	1d c0       	rjmp	.+58     	; 0xfc8 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     f8e:	80 91 de 01 	lds	r24, 0x01DE
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	21 f4       	brne	.+8      	; 0xf9e <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f96:	80 91 eb 00 	lds	r24, 0x00EB
     f9a:	80 62       	ori	r24, 0x20	; 32
     f9c:	13 c0       	rjmp	.+38     	; 0xfc4 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     f9e:	80 91 eb 00 	lds	r24, 0x00EB
     fa2:	80 61       	ori	r24, 0x10	; 16
     fa4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <USB_Device_ProcessControlRequest+0x128>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	2a 95       	dec	r18
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <USB_Device_ProcessControlRequest+0x124>
     fb6:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     fba:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     fbe:	80 91 eb 00 	lds	r24, 0x00EB
     fc2:	88 60       	ori	r24, 0x08	; 8
     fc4:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     fc8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fcc:	80 91 e8 00 	lds	r24, 0x00E8
     fd0:	87 7f       	andi	r24, 0xF7	; 247
     fd2:	87 c0       	rjmp	.+270    	; 0x10e2 <USB_Device_ProcessControlRequest+0x258>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     fd4:	88 23       	and	r24, r24
     fd6:	09 f0       	breq	.+2      	; 0xfda <USB_Device_ProcessControlRequest+0x150>
     fd8:	a3 c0       	rjmp	.+326    	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     fda:	10 91 df 01 	lds	r17, 0x01DF
     fde:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     fe0:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     fe2:	f8 94       	cli
     fe4:	80 91 e8 00 	lds	r24, 0x00E8
     fe8:	87 7f       	andi	r24, 0xF7	; 247
     fea:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     fee:	d2 dc       	rcall	.-1628   	; 0x994 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ff0:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     ff4:	80 ff       	sbrs	r24, 0
     ff6:	fc cf       	rjmp	.-8      	; 0xff0 <USB_Device_ProcessControlRequest+0x166>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     ff8:	80 91 e3 00 	lds	r24, 0x00E3
     ffc:	80 78       	andi	r24, 0x80	; 128
     ffe:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1000:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    1004:	80 68       	ori	r24, 0x80	; 128
    1006:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    100a:	11 23       	and	r17, r17
    100c:	11 f0       	breq	.+4      	; 0x1012 <USB_Device_ProcessControlRequest+0x188>
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <USB_Device_ProcessControlRequest+0x18a>
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1016:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    1018:	83 c0       	rjmp	.+262    	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    101a:	80 58       	subi	r24, 0x80	; 128
    101c:	82 30       	cpi	r24, 0x02	; 2
    101e:	08 f0       	brcs	.+2      	; 0x1022 <USB_Device_ProcessControlRequest+0x198>
    1020:	7f c0       	rjmp	.+254    	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1022:	80 91 df 01 	lds	r24, 0x01DF
    1026:	90 91 e0 01 	lds	r25, 0x01E0
    102a:	23 e0       	ldi	r18, 0x03	; 3
    102c:	8c 3d       	cpi	r24, 0xDC	; 220
    102e:	92 07       	cpc	r25, r18
    1030:	91 f5       	brne	.+100    	; 0x1096 <USB_Device_ProcessControlRequest+0x20c>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1032:	83 e0       	ldi	r24, 0x03	; 3
    1034:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1036:	8a e2       	ldi	r24, 0x2A	; 42
    1038:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    103a:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    103c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    103e:	de 01       	movw	r26, r28
    1040:	15 96       	adiw	r26, 0x05	; 5
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1046:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1048:	61 e2       	ldi	r22, 0x21	; 33
    104a:	e4 2f       	mov	r30, r20
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	60 93 57 00 	sts	0x0057, r22
    1052:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
    1054:	80 ff       	sbrs	r24, 0
    1056:	03 c0       	rjmp	.+6      	; 0x105e <USB_Device_ProcessControlRequest+0x1d4>
					{
						SerialByte >>= 4;
    1058:	e2 95       	swap	r30
    105a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    105c:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    105e:	ef 70       	andi	r30, 0x0F	; 15
    1060:	2e 2f       	mov	r18, r30
    1062:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1064:	ea 30       	cpi	r30, 0x0A	; 10
    1066:	18 f0       	brcs	.+6      	; 0x106e <USB_Device_ProcessControlRequest+0x1e4>
    1068:	29 5c       	subi	r18, 0xC9	; 201
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <USB_Device_ProcessControlRequest+0x1e8>
    106e:	20 5d       	subi	r18, 0xD0	; 208
    1070:	3f 4f       	sbci	r19, 0xFF	; 255
    1072:	2d 93       	st	X+, r18
    1074:	3d 93       	st	X+, r19
    1076:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1078:	84 31       	cpi	r24, 0x14	; 20
    107a:	91 05       	cpc	r25, r1
    107c:	31 f7       	brne	.-52     	; 0x104a <USB_Device_ProcessControlRequest+0x1c0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    107e:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1080:	80 91 e8 00 	lds	r24, 0x00E8
    1084:	87 7f       	andi	r24, 0xF7	; 247
    1086:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    108a:	ce 01       	movw	r24, r28
    108c:	03 96       	adiw	r24, 0x03	; 3
    108e:	6a e2       	ldi	r22, 0x2A	; 42
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	38 de       	rcall	.-912    	; 0xd04 <Endpoint_Write_Control_Stream_LE>
    1094:	12 c0       	rjmp	.+36     	; 0x10ba <USB_Device_ProcessControlRequest+0x230>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1096:	60 91 e1 01 	lds	r22, 0x01E1
    109a:	ae 01       	movw	r20, r28
    109c:	4f 5f       	subi	r20, 0xFF	; 255
    109e:	5f 4f       	sbci	r21, 0xFF	; 255
    10a0:	14 d9       	rcall	.-3544   	; 0x2ca <CALLBACK_USB_GetDescriptor>
    10a2:	bc 01       	movw	r22, r24
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	09 f4       	brne	.+2      	; 0x10aa <USB_Device_ProcessControlRequest+0x220>
    10a8:	3b c0       	rjmp	.+118    	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
    10aa:	80 91 e8 00 	lds	r24, 0x00E8
    10ae:	87 7f       	andi	r24, 0xF7	; 247
    10b0:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	86 de       	rcall	.-756    	; 0xdc6 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10ba:	80 91 e8 00 	lds	r24, 0x00E8
    10be:	8b 77       	andi	r24, 0x7B	; 123
    10c0:	80 93 e8 00 	sts	0x00E8, r24
    10c4:	2d c0       	rjmp	.+90     	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    10c6:	80 38       	cpi	r24, 0x80	; 128
    10c8:	59 f5       	brne	.+86     	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10ca:	80 91 e8 00 	lds	r24, 0x00E8
    10ce:	87 7f       	andi	r24, 0xF7	; 247
    10d0:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    10d4:	80 91 d9 01 	lds	r24, 0x01D9
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10d8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10dc:	80 91 e8 00 	lds	r24, 0x00E8
    10e0:	8e 77       	andi	r24, 0x7E	; 126
    10e2:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    10e6:	56 dc       	rcall	.-1876   	; 0x994 <Endpoint_ClearStatusStage>
    10e8:	1b c0       	rjmp	.+54     	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    10ea:	88 23       	and	r24, r24
    10ec:	c9 f4       	brne	.+50     	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    10ee:	90 91 df 01 	lds	r25, 0x01DF
    10f2:	92 30       	cpi	r25, 0x02	; 2
    10f4:	a8 f4       	brcc	.+42     	; 0x1120 <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10f6:	80 91 e8 00 	lds	r24, 0x00E8
    10fa:	87 7f       	andi	r24, 0xF7	; 247
    10fc:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1100:	90 93 d9 01 	sts	0x01D9, r25

	Endpoint_ClearStatusStage();
    1104:	47 dc       	rcall	.-1906   	; 0x994 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1106:	80 91 d9 01 	lds	r24, 0x01D9
    110a:	88 23       	and	r24, r24
    110c:	21 f4       	brne	.+8      	; 0x1116 <USB_Device_ProcessControlRequest+0x28c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    110e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1112:	87 ff       	sbrs	r24, 7
    1114:	02 c0       	rjmp	.+4      	; 0x111a <USB_Device_ProcessControlRequest+0x290>
    1116:	84 e0       	ldi	r24, 0x04	; 4
    1118:	01 c0       	rjmp	.+2      	; 0x111c <USB_Device_ProcessControlRequest+0x292>
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    111e:	ce d8       	rcall	.-3684   	; 0x2bc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1120:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1124:	83 ff       	sbrs	r24, 3
    1126:	0a c0       	rjmp	.+20     	; 0x113c <USB_Device_ProcessControlRequest+0x2b2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1128:	80 91 eb 00 	lds	r24, 0x00EB
    112c:	80 62       	ori	r24, 0x20	; 32
    112e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1132:	80 91 e8 00 	lds	r24, 0x00E8
    1136:	87 7f       	andi	r24, 0xF7	; 247
    1138:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    113c:	ac 96       	adiw	r28, 0x2c	; 44
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	08 95       	ret

00001152 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1152:	08 95       	ret

00001154 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1154:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1156:	8e b3       	in	r24, 0x1e	; 30
    1158:	88 23       	and	r24, r24
    115a:	61 f0       	breq	.+24     	; 0x1174 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    115c:	10 91 e9 00 	lds	r17, 0x00E9
    1160:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1162:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1166:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    116a:	83 ff       	sbrs	r24, 3
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    116e:	8d de       	rcall	.-742    	; 0xe8a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1170:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1174:	1f 91       	pop	r17
    1176:	08 95       	ret

00001178 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    117e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1182:	83 ff       	sbrs	r24, 3
    1184:	92 c0       	rjmp	.+292    	; 0x12aa <CDC_Device_ProcessControlRequest+0x132>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1186:	88 81       	ld	r24, Y
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	20 91 e1 01 	lds	r18, 0x01E1
    118e:	30 91 e2 01 	lds	r19, 0x01E2
    1192:	28 17       	cp	r18, r24
    1194:	39 07       	cpc	r19, r25
    1196:	09 f0       	breq	.+2      	; 0x119a <CDC_Device_ProcessControlRequest+0x22>
    1198:	88 c0       	rjmp	.+272    	; 0x12aa <CDC_Device_ProcessControlRequest+0x132>
	  return;

	switch (USB_ControlRequest.bRequest)
    119a:	80 91 de 01 	lds	r24, 0x01DE
    119e:	81 32       	cpi	r24, 0x21	; 33
    11a0:	69 f0       	breq	.+26     	; 0x11bc <CDC_Device_ProcessControlRequest+0x44>
    11a2:	82 32       	cpi	r24, 0x22	; 34
    11a4:	20 f4       	brcc	.+8      	; 0x11ae <CDC_Device_ProcessControlRequest+0x36>
    11a6:	80 32       	cpi	r24, 0x20	; 32
    11a8:	09 f0       	breq	.+2      	; 0x11ac <CDC_Device_ProcessControlRequest+0x34>
    11aa:	7f c0       	rjmp	.+254    	; 0x12aa <CDC_Device_ProcessControlRequest+0x132>
    11ac:	38 c0       	rjmp	.+112    	; 0x121e <CDC_Device_ProcessControlRequest+0xa6>
    11ae:	82 32       	cpi	r24, 0x22	; 34
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <CDC_Device_ProcessControlRequest+0x3c>
    11b2:	5d c0       	rjmp	.+186    	; 0x126e <CDC_Device_ProcessControlRequest+0xf6>
    11b4:	83 32       	cpi	r24, 0x23	; 35
    11b6:	09 f0       	breq	.+2      	; 0x11ba <CDC_Device_ProcessControlRequest+0x42>
    11b8:	78 c0       	rjmp	.+240    	; 0x12aa <CDC_Device_ProcessControlRequest+0x132>
    11ba:	69 c0       	rjmp	.+210    	; 0x128e <CDC_Device_ProcessControlRequest+0x116>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11bc:	80 91 dd 01 	lds	r24, 0x01DD
    11c0:	81 3a       	cpi	r24, 0xA1	; 161
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <CDC_Device_ProcessControlRequest+0x4e>
    11c4:	72 c0       	rjmp	.+228    	; 0x12aa <CDC_Device_ProcessControlRequest+0x132>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11c6:	80 91 e8 00 	lds	r24, 0x00E8
    11ca:	87 7f       	andi	r24, 0xF7	; 247
    11cc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    11d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d2:	98 89       	ldd	r25, Y+16	; 0x10
    11d4:	a9 89       	ldd	r26, Y+17	; 0x11
    11d6:	ba 89       	ldd	r27, Y+18	; 0x12
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    11d8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    11dc:	29 2f       	mov	r18, r25
    11de:	3a 2f       	mov	r19, r26
    11e0:	4b 2f       	mov	r20, r27
    11e2:	55 27       	eor	r21, r21
    11e4:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    11e8:	9d 01       	movw	r18, r26
    11ea:	44 27       	eor	r20, r20
    11ec:	55 27       	eor	r21, r21
    11ee:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    11f2:	8b 2f       	mov	r24, r27
    11f4:	99 27       	eor	r25, r25
    11f6:	aa 27       	eor	r26, r26
    11f8:	bb 27       	eor	r27, r27
    11fa:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    11fe:	8b 89       	ldd	r24, Y+19	; 0x13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1200:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1204:	8c 89       	ldd	r24, Y+20	; 0x14
    1206:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    120a:	8d 89       	ldd	r24, Y+21	; 0x15
    120c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1210:	80 91 e8 00 	lds	r24, 0x00E8
    1214:	8e 77       	andi	r24, 0x7E	; 126
    1216:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    121a:	bc db       	rcall	.-2184   	; 0x994 <Endpoint_ClearStatusStage>
    121c:	46 c0       	rjmp	.+140    	; 0x12aa <CDC_Device_ProcessControlRequest+0x132>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    121e:	80 91 dd 01 	lds	r24, 0x01DD
    1222:	81 32       	cpi	r24, 0x21	; 33
    1224:	09 f0       	breq	.+2      	; 0x1228 <CDC_Device_ProcessControlRequest+0xb0>
    1226:	41 c0       	rjmp	.+130    	; 0x12aa <CDC_Device_ProcessControlRequest+0x132>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1228:	80 91 e8 00 	lds	r24, 0x00E8
    122c:	87 7f       	andi	r24, 0xF7	; 247
    122e:	80 93 e8 00 	sts	0x00E8, r24
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1232:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
    1236:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
    123a:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
    123e:	80 91 f1 00 	lds	r24, 0x00F1
			{
				Endpoint_ClearSETUP();
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1242:	3f 87       	std	Y+15, r19	; 0x0f
    1244:	28 8b       	std	Y+16, r18	; 0x10
    1246:	99 8b       	std	Y+17, r25	; 0x11
    1248:	8a 8b       	std	Y+18, r24	; 0x12
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    124a:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    124e:	8b 8b       	std	Y+19, r24	; 0x13
    1250:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1254:	8c 8b       	std	Y+20, r24	; 0x14
    1256:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    125a:	8d 8b       	std	Y+21, r24	; 0x15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    125c:	80 91 e8 00 	lds	r24, 0x00E8
    1260:	8b 77       	andi	r24, 0x7B	; 123
    1262:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1266:	96 db       	rcall	.-2260   	; 0x994 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1268:	ce 01       	movw	r24, r28
    126a:	2e d8       	rcall	.-4004   	; 0x2c8 <EVENT_CDC_Device_LineEncodingChanged>
    126c:	1e c0       	rjmp	.+60     	; 0x12aa <CDC_Device_ProcessControlRequest+0x132>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    126e:	80 91 dd 01 	lds	r24, 0x01DD
    1272:	81 32       	cpi	r24, 0x21	; 33
    1274:	d1 f4       	brne	.+52     	; 0x12aa <CDC_Device_ProcessControlRequest+0x132>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1276:	80 91 e8 00 	lds	r24, 0x00E8
    127a:	87 7f       	andi	r24, 0xF7	; 247
    127c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1280:	89 db       	rcall	.-2286   	; 0x994 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1282:	80 91 df 01 	lds	r24, 0x01DF
    1286:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1288:	ce 01       	movw	r24, r28
    128a:	0b d1       	rcall	.+534    	; 0x14a2 <CDC_Device_Event_Stub>
    128c:	0e c0       	rjmp	.+28     	; 0x12aa <CDC_Device_ProcessControlRequest+0x132>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    128e:	80 91 dd 01 	lds	r24, 0x01DD
    1292:	81 32       	cpi	r24, 0x21	; 33
    1294:	51 f4       	brne	.+20     	; 0x12aa <CDC_Device_ProcessControlRequest+0x132>
    1296:	80 91 e8 00 	lds	r24, 0x00E8
    129a:	87 7f       	andi	r24, 0xF7	; 247
    129c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    12a0:	79 db       	rcall	.-2318   	; 0x994 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    12a2:	ce 01       	movw	r24, r28
    12a4:	60 91 df 01 	lds	r22, 0x01DF
    12a8:	fc d0       	rcall	.+504    	; 0x14a2 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    12b8:	0d 96       	adiw	r24, 0x0d	; 13
    12ba:	fc 01       	movw	r30, r24
    12bc:	89 e0       	ldi	r24, 0x09	; 9
    12be:	df 01       	movw	r26, r30
    12c0:	1d 92       	st	X+, r1
    12c2:	8a 95       	dec	r24
    12c4:	e9 f7       	brne	.-6      	; 0x12c0 <CDC_Device_ConfigureEndpoints+0x10>

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    12c6:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	18 17       	cp	r17, r24
    12cc:	29 f4       	brne	.+10     	; 0x12d8 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
    12ce:	ea 81       	ldd	r30, Y+2	; 0x02
    12d0:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
    12d4:	80 e8       	ldi	r24, 0x80	; 128
    12d6:	07 c0       	rjmp	.+14     	; 0x12e6 <CDC_Device_ConfigureEndpoints+0x36>
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	18 17       	cp	r17, r24
    12dc:	31 f4       	brne	.+12     	; 0x12ea <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
    12de:	ee 81       	ldd	r30, Y+6	; 0x06
    12e0:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    12e2:	98 85       	ldd	r25, Y+8	; 0x08
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
			Direction    = ENDPOINT_DIR_OUT;
    12e4:	80 e0       	ldi	r24, 0x00	; 0
			Type         = EP_TYPE_BULK;
    12e6:	22 e0       	ldi	r18, 0x02	; 2
    12e8:	08 c0       	rjmp	.+16     	; 0x12fa <CDC_Device_ConfigureEndpoints+0x4a>
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
    12ea:	89 85       	ldd	r24, Y+9	; 0x09
    12ec:	18 17       	cp	r17, r24
    12ee:	39 f5       	brne	.+78     	; 0x133e <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
    12f0:	ea 85       	ldd	r30, Y+10	; 0x0a
    12f2:	fb 85       	ldd	r31, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
    12f4:	9c 85       	ldd	r25, Y+12	; 0x0c
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
    12f6:	80 e8       	ldi	r24, 0x80	; 128
			Type         = EP_TYPE_INTERRUPT;
    12f8:	23 e0       	ldi	r18, 0x03	; 3
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    12fa:	99 23       	and	r25, r25
    12fc:	11 f0       	breq	.+4      	; 0x1302 <CDC_Device_ConfigureEndpoints+0x52>
    12fe:	44 e0       	ldi	r20, 0x04	; 4
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <CDC_Device_ConfigureEndpoints+0x54>
    1302:	40 e0       	ldi	r20, 0x00	; 0
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	66 e0       	ldi	r22, 0x06	; 6
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	6a 95       	dec	r22
    130e:	e1 f7       	brne	.-8      	; 0x1308 <CDC_Device_ConfigureEndpoints+0x58>
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	88 23       	and	r24, r24
    1314:	09 f4       	brne	.+2      	; 0x1318 <CDC_Device_ConfigureEndpoints+0x68>
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	62 2b       	or	r22, r18
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    131a:	28 e0       	ldi	r18, 0x08	; 8
    131c:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <CDC_Device_ConfigureEndpoints+0x78>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1322:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1328:	2e 17       	cp	r18, r30
    132a:	3f 07       	cpc	r19, r31
    132c:	d0 f3       	brcs	.-12     	; 0x1322 <CDC_Device_ConfigureEndpoints+0x72>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    132e:	42 60       	ori	r20, 0x02	; 2
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1330:	82 95       	swap	r24
    1332:	80 7f       	andi	r24, 0xF0	; 240
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1334:	48 2b       	or	r20, r24
    1336:	81 2f       	mov	r24, r17
    1338:	1a db       	rcall	.-2508   	; 0x96e <Endpoint_ConfigureEndpoint_Prv>
    133a:	88 23       	and	r24, r24
    133c:	29 f0       	breq	.+10     	; 0x1348 <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    133e:	1f 5f       	subi	r17, 0xFF	; 255
    1340:	17 30       	cpi	r17, 0x07	; 7
    1342:	11 f6       	brne	.-124    	; 0x12c8 <CDC_Device_ConfigureEndpoints+0x18>
		{
			return false;
		}
	}

	return true;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	01 c0       	rjmp	.+2      	; 0x134a <CDC_Device_ConfigureEndpoints+0x9a>
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
		                                 DoubleBanked ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
		{
			return false;
    1348:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return true;
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	08 95       	ret

00001352 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	0f 92       	push	r0
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    135e:	8e b3       	in	r24, 0x1e	; 30
    1360:	84 30       	cpi	r24, 0x04	; 4
    1362:	f1 f4       	brne	.+60     	; 0x13a0 <CDC_Device_SendByte+0x4e>
    1364:	27 85       	ldd	r18, Z+15	; 0x0f
    1366:	30 89       	ldd	r19, Z+16	; 0x10
    1368:	41 89       	ldd	r20, Z+17	; 0x11
    136a:	52 89       	ldd	r21, Z+18	; 0x12
    136c:	21 15       	cp	r18, r1
    136e:	31 05       	cpc	r19, r1
    1370:	41 05       	cpc	r20, r1
    1372:	51 05       	cpc	r21, r1
    1374:	a9 f0       	breq	.+42     	; 0x13a0 <CDC_Device_SendByte+0x4e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    1376:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1378:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    137c:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
    1380:	85 fd       	sbrc	r24, 5
    1382:	0a c0       	rjmp	.+20     	; 0x1398 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1384:	80 91 e8 00 	lds	r24, 0x00E8
    1388:	8e 77       	andi	r24, 0x7E	; 126
    138a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    138e:	69 83       	std	Y+1, r22	; 0x01
    1390:	20 db       	rcall	.-2496   	; 0x9d2 <Endpoint_WaitUntilReady>
    1392:	69 81       	ldd	r22, Y+1	; 0x01
    1394:	88 23       	and	r24, r24
    1396:	29 f4       	brne	.+10     	; 0x13a2 <CDC_Device_SendByte+0x50>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1398:	60 93 f1 00 	sts	0x00F1, r22
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <CDC_Device_SendByte+0x50>

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    13a0:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    13aa:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    13ac:	8e b3       	in	r24, 0x1e	; 30
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	49 f5       	brne	.+82     	; 0x1404 <CDC_Device_Flush+0x5a>
    13b2:	27 85       	ldd	r18, Z+15	; 0x0f
    13b4:	30 89       	ldd	r19, Z+16	; 0x10
    13b6:	41 89       	ldd	r20, Z+17	; 0x11
    13b8:	52 89       	ldd	r21, Z+18	; 0x12
    13ba:	21 15       	cp	r18, r1
    13bc:	31 05       	cpc	r19, r1
    13be:	41 05       	cpc	r20, r1
    13c0:	51 05       	cpc	r21, r1
    13c2:	01 f1       	breq	.+64     	; 0x1404 <CDC_Device_Flush+0x5a>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    13c4:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    13c6:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    13ca:	90 91 f3 00 	lds	r25, 0x00F3
    13ce:	80 91 f2 00 	lds	r24, 0x00F2
    13d2:	39 2f       	mov	r19, r25
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	82 2b       	or	r24, r18
    13da:	93 2b       	or	r25, r19

	if (!(Endpoint_BytesInEndpoint()))
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	a1 f0       	breq	.+40     	; 0x1408 <CDC_Device_Flush+0x5e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13e0:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13e4:	80 91 e8 00 	lds	r24, 0x00E8
    13e8:	8e 77       	andi	r24, 0x7E	; 126
    13ea:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    13ee:	95 fd       	sbrc	r25, 5
    13f0:	0d c0       	rjmp	.+26     	; 0x140c <CDC_Device_Flush+0x62>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    13f2:	ef da       	rcall	.-2594   	; 0x9d2 <Endpoint_WaitUntilReady>
    13f4:	88 23       	and	r24, r24
    13f6:	59 f4       	brne	.+22     	; 0x140e <CDC_Device_Flush+0x64>
    13f8:	90 91 e8 00 	lds	r25, 0x00E8
    13fc:	9e 77       	andi	r25, 0x7E	; 126
    13fe:	90 93 e8 00 	sts	0x00E8, r25
    1402:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    140c:	80 e0       	ldi	r24, 0x00	; 0
}
    140e:	08 95       	ret

00001410 <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1410:	2e b3       	in	r18, 0x1e	; 30
    1412:	24 30       	cpi	r18, 0x04	; 4
    1414:	59 f4       	brne	.+22     	; 0x142c <CDC_Device_USBTask+0x1c>
    1416:	fc 01       	movw	r30, r24
    1418:	27 85       	ldd	r18, Z+15	; 0x0f
    141a:	30 89       	ldd	r19, Z+16	; 0x10
    141c:	41 89       	ldd	r20, Z+17	; 0x11
    141e:	52 89       	ldd	r21, Z+18	; 0x12
    1420:	21 15       	cp	r18, r1
    1422:	31 05       	cpc	r19, r1
    1424:	41 05       	cpc	r20, r1
    1426:	51 05       	cpc	r21, r1
    1428:	09 f0       	breq	.+2      	; 0x142c <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    142a:	bf cf       	rjmp	.-130    	; 0x13aa <CDC_Device_Flush>
    142c:	08 95       	ret

0000142e <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    142e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1430:	8e b3       	in	r24, 0x1e	; 30
    1432:	84 30       	cpi	r24, 0x04	; 4
    1434:	91 f5       	brne	.+100    	; 0x149a <CDC_Device_ReceiveByte+0x6c>
    1436:	27 85       	ldd	r18, Z+15	; 0x0f
    1438:	30 89       	ldd	r19, Z+16	; 0x10
    143a:	41 89       	ldd	r20, Z+17	; 0x11
    143c:	52 89       	ldd	r21, Z+18	; 0x12
    143e:	21 15       	cp	r18, r1
    1440:	31 05       	cpc	r19, r1
    1442:	41 05       	cpc	r20, r1
    1444:	51 05       	cpc	r21, r1
    1446:	49 f1       	breq	.+82     	; 0x149a <CDC_Device_ReceiveByte+0x6c>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    1448:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    144a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    144e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
    1452:	82 ff       	sbrs	r24, 2
    1454:	22 c0       	rjmp	.+68     	; 0x149a <CDC_Device_ReceiveByte+0x6c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1456:	90 91 f3 00 	lds	r25, 0x00F3
    145a:	80 91 f2 00 	lds	r24, 0x00F2
    145e:	39 2f       	mov	r19, r25
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	82 2b       	or	r24, r18
    1466:	93 2b       	or	r25, r19
	{
		if (Endpoint_BytesInEndpoint())
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	21 f0       	breq	.+8      	; 0x1474 <CDC_Device_ReceiveByte+0x46>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    146c:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <CDC_Device_ReceiveByte+0x4a>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1474:	2f ef       	ldi	r18, 0xFF	; 255
    1476:	3f ef       	ldi	r19, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1478:	90 91 f3 00 	lds	r25, 0x00F3
    147c:	80 91 f2 00 	lds	r24, 0x00F2
    1480:	59 2f       	mov	r21, r25
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	84 2b       	or	r24, r20
    1488:	95 2b       	or	r25, r21
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	41 f4       	brne	.+16     	; 0x149e <CDC_Device_ReceiveByte+0x70>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    148e:	80 91 e8 00 	lds	r24, 0x00E8
    1492:	8b 77       	andi	r24, 0x7B	; 123
    1494:	80 93 e8 00 	sts	0x00E8, r24
    1498:	02 c0       	rjmp	.+4      	; 0x149e <CDC_Device_ReceiveByte+0x70>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    149a:	2f ef       	ldi	r18, 0xFF	; 255
    149c:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    149e:	c9 01       	movw	r24, r18
    14a0:	08 95       	ret

000014a2 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    14a2:	08 95       	ret

000014a4 <strtol>:
    14a4:	2f 92       	push	r2
    14a6:	3f 92       	push	r3
    14a8:	4f 92       	push	r4
    14aa:	5f 92       	push	r5
    14ac:	7f 92       	push	r7
    14ae:	8f 92       	push	r8
    14b0:	9f 92       	push	r9
    14b2:	af 92       	push	r10
    14b4:	bf 92       	push	r11
    14b6:	cf 92       	push	r12
    14b8:	df 92       	push	r13
    14ba:	ef 92       	push	r14
    14bc:	ff 92       	push	r15
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	4b 01       	movw	r8, r22
    14c8:	ea 01       	movw	r28, r20
    14ca:	61 15       	cp	r22, r1
    14cc:	71 05       	cpc	r23, r1
    14ce:	19 f0       	breq	.+6      	; 0x14d6 <strtol+0x32>
    14d0:	fb 01       	movw	r30, r22
    14d2:	80 83       	st	Z, r24
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	20 97       	sbiw	r28, 0x00	; 0
    14d8:	39 f0       	breq	.+14     	; 0x14e8 <strtol+0x44>
    14da:	9e 01       	movw	r18, r28
    14dc:	22 50       	subi	r18, 0x02	; 2
    14de:	30 40       	sbci	r19, 0x00	; 0
    14e0:	23 32       	cpi	r18, 0x23	; 35
    14e2:	31 05       	cpc	r19, r1
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <strtol+0x44>
    14e6:	f1 c0       	rjmp	.+482    	; 0x16ca <strtol+0x226>
    14e8:	a8 2e       	mov	r10, r24
    14ea:	b9 2e       	mov	r11, r25
    14ec:	f5 01       	movw	r30, r10
    14ee:	11 91       	ld	r17, Z+
    14f0:	5f 01       	movw	r10, r30
    14f2:	7f 01       	movw	r14, r30
    14f4:	81 2f       	mov	r24, r17
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0a d1       	rcall	.+532    	; 0x170e <isspace>
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	b9 f7       	brne	.-18     	; 0x14ec <strtol+0x48>
    14fe:	1d 32       	cpi	r17, 0x2D	; 45
    1500:	29 f4       	brne	.+10     	; 0x150c <strtol+0x68>
    1502:	f5 01       	movw	r30, r10
    1504:	11 91       	ld	r17, Z+
    1506:	7f 01       	movw	r14, r30
    1508:	01 e0       	ldi	r16, 0x01	; 1
    150a:	06 c0       	rjmp	.+12     	; 0x1518 <strtol+0x74>
    150c:	1b 32       	cpi	r17, 0x2B	; 43
    150e:	19 f4       	brne	.+6      	; 0x1516 <strtol+0x72>
    1510:	f5 01       	movw	r30, r10
    1512:	11 91       	ld	r17, Z+
    1514:	7f 01       	movw	r14, r30
    1516:	00 e0       	ldi	r16, 0x00	; 0
    1518:	20 97       	sbiw	r28, 0x00	; 0
    151a:	19 f0       	breq	.+6      	; 0x1522 <strtol+0x7e>
    151c:	c0 31       	cpi	r28, 0x10	; 16
    151e:	d1 05       	cpc	r29, r1
    1520:	b9 f4       	brne	.+46     	; 0x1550 <strtol+0xac>
    1522:	10 33       	cpi	r17, 0x30	; 48
    1524:	81 f4       	brne	.+32     	; 0x1546 <strtol+0xa2>
    1526:	f7 01       	movw	r30, r14
    1528:	80 81       	ld	r24, Z
    152a:	88 37       	cpi	r24, 0x78	; 120
    152c:	11 f0       	breq	.+4      	; 0x1532 <strtol+0x8e>
    152e:	88 35       	cpi	r24, 0x58	; 88
    1530:	51 f4       	brne	.+20     	; 0x1546 <strtol+0xa2>
    1532:	f7 01       	movw	r30, r14
    1534:	11 81       	ldd	r17, Z+1	; 0x01
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	e8 0e       	add	r14, r24
    153c:	f9 1e       	adc	r15, r25
    153e:	02 60       	ori	r16, 0x02	; 2
    1540:	c0 e1       	ldi	r28, 0x10	; 16
    1542:	d0 e0       	ldi	r29, 0x00	; 0
    1544:	05 c0       	rjmp	.+10     	; 0x1550 <strtol+0xac>
    1546:	20 97       	sbiw	r28, 0x00	; 0
    1548:	19 f4       	brne	.+6      	; 0x1550 <strtol+0xac>
    154a:	10 33       	cpi	r17, 0x30	; 48
    154c:	c1 f4       	brne	.+48     	; 0x157e <strtol+0xda>
    154e:	22 c0       	rjmp	.+68     	; 0x1594 <strtol+0xf0>
    1550:	c8 30       	cpi	r28, 0x08	; 8
    1552:	d1 05       	cpc	r29, r1
    1554:	f9 f0       	breq	.+62     	; 0x1594 <strtol+0xf0>
    1556:	c9 30       	cpi	r28, 0x09	; 9
    1558:	d1 05       	cpc	r29, r1
    155a:	24 f4       	brge	.+8      	; 0x1564 <strtol+0xc0>
    155c:	c2 30       	cpi	r28, 0x02	; 2
    155e:	d1 05       	cpc	r29, r1
    1560:	09 f5       	brne	.+66     	; 0x15a4 <strtol+0x100>
    1562:	07 c0       	rjmp	.+14     	; 0x1572 <strtol+0xce>
    1564:	ca 30       	cpi	r28, 0x0A	; 10
    1566:	d1 05       	cpc	r29, r1
    1568:	51 f0       	breq	.+20     	; 0x157e <strtol+0xda>
    156a:	c0 31       	cpi	r28, 0x10	; 16
    156c:	d1 05       	cpc	r29, r1
    156e:	d1 f4       	brne	.+52     	; 0x15a4 <strtol+0x100>
    1570:	26 c0       	rjmp	.+76     	; 0x15be <strtol+0x11a>
    1572:	a1 2c       	mov	r10, r1
    1574:	b1 2c       	mov	r11, r1
    1576:	c1 2c       	mov	r12, r1
    1578:	f0 e4       	ldi	r31, 0x40	; 64
    157a:	df 2e       	mov	r13, r31
    157c:	25 c0       	rjmp	.+74     	; 0x15c8 <strtol+0x124>
    157e:	ca e0       	ldi	r28, 0x0A	; 10
    1580:	d0 e0       	ldi	r29, 0x00	; 0
    1582:	ec ec       	ldi	r30, 0xCC	; 204
    1584:	ae 2e       	mov	r10, r30
    1586:	ec ec       	ldi	r30, 0xCC	; 204
    1588:	be 2e       	mov	r11, r30
    158a:	ec ec       	ldi	r30, 0xCC	; 204
    158c:	ce 2e       	mov	r12, r30
    158e:	ec e0       	ldi	r30, 0x0C	; 12
    1590:	de 2e       	mov	r13, r30
    1592:	1a c0       	rjmp	.+52     	; 0x15c8 <strtol+0x124>
    1594:	c8 e0       	ldi	r28, 0x08	; 8
    1596:	d0 e0       	ldi	r29, 0x00	; 0
    1598:	a1 2c       	mov	r10, r1
    159a:	b1 2c       	mov	r11, r1
    159c:	c1 2c       	mov	r12, r1
    159e:	70 e1       	ldi	r23, 0x10	; 16
    15a0:	d7 2e       	mov	r13, r23
    15a2:	12 c0       	rjmp	.+36     	; 0x15c8 <strtol+0x124>
    15a4:	9e 01       	movw	r18, r28
    15a6:	44 27       	eor	r20, r20
    15a8:	37 fd       	sbrc	r19, 7
    15aa:	40 95       	com	r20
    15ac:	54 2f       	mov	r21, r20
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e8       	ldi	r25, 0x80	; 128
    15b6:	d5 d0       	rcall	.+426    	; 0x1762 <__udivmodsi4>
    15b8:	59 01       	movw	r10, r18
    15ba:	6a 01       	movw	r12, r20
    15bc:	05 c0       	rjmp	.+10     	; 0x15c8 <strtol+0x124>
    15be:	a1 2c       	mov	r10, r1
    15c0:	b1 2c       	mov	r11, r1
    15c2:	c1 2c       	mov	r12, r1
    15c4:	68 e0       	ldi	r22, 0x08	; 8
    15c6:	d6 2e       	mov	r13, r22
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	cb 01       	movw	r24, r22
    15d0:	1e 01       	movw	r2, r28
    15d2:	44 24       	eor	r4, r4
    15d4:	37 fc       	sbrc	r3, 7
    15d6:	40 94       	com	r4
    15d8:	54 2c       	mov	r5, r4
    15da:	50 ed       	ldi	r21, 0xD0	; 208
    15dc:	75 2e       	mov	r7, r21
    15de:	71 0e       	add	r7, r17
    15e0:	e7 2d       	mov	r30, r7
    15e2:	ea 30       	cpi	r30, 0x0A	; 10
    15e4:	70 f0       	brcs	.+28     	; 0x1602 <strtol+0x15e>
    15e6:	21 2f       	mov	r18, r17
    15e8:	21 54       	subi	r18, 0x41	; 65
    15ea:	2a 31       	cpi	r18, 0x1A	; 26
    15ec:	18 f4       	brcc	.+6      	; 0x15f4 <strtol+0x150>
    15ee:	39 ec       	ldi	r19, 0xC9	; 201
    15f0:	73 2e       	mov	r7, r19
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <strtol+0x15c>
    15f4:	21 2f       	mov	r18, r17
    15f6:	21 56       	subi	r18, 0x61	; 97
    15f8:	2a 31       	cpi	r18, 0x1A	; 26
    15fa:	28 f5       	brcc	.+74     	; 0x1646 <strtol+0x1a2>
    15fc:	29 ea       	ldi	r18, 0xA9	; 169
    15fe:	72 2e       	mov	r7, r18
    1600:	71 0e       	add	r7, r17
    1602:	27 2d       	mov	r18, r7
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	2c 17       	cp	r18, r28
    1608:	3d 07       	cpc	r19, r29
    160a:	ec f4       	brge	.+58     	; 0x1646 <strtol+0x1a2>
    160c:	47 fd       	sbrc	r20, 7
    160e:	17 c0       	rjmp	.+46     	; 0x163e <strtol+0x19a>
    1610:	a6 16       	cp	r10, r22
    1612:	b7 06       	cpc	r11, r23
    1614:	c8 06       	cpc	r12, r24
    1616:	d9 06       	cpc	r13, r25
    1618:	78 f0       	brcs	.+30     	; 0x1638 <strtol+0x194>
    161a:	a2 01       	movw	r20, r4
    161c:	91 01       	movw	r18, r2
    161e:	82 d0       	rcall	.+260    	; 0x1724 <__mulsi3>
    1620:	67 0d       	add	r22, r7
    1622:	71 1d       	adc	r23, r1
    1624:	81 1d       	adc	r24, r1
    1626:	91 1d       	adc	r25, r1
    1628:	61 30       	cpi	r22, 0x01	; 1
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	7f 07       	cpc	r23, r31
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	8f 07       	cpc	r24, r31
    1632:	f0 e8       	ldi	r31, 0x80	; 128
    1634:	9f 07       	cpc	r25, r31
    1636:	10 f0       	brcs	.+4      	; 0x163c <strtol+0x198>
    1638:	4f ef       	ldi	r20, 0xFF	; 255
    163a:	01 c0       	rjmp	.+2      	; 0x163e <strtol+0x19a>
    163c:	41 e0       	ldi	r20, 0x01	; 1
    163e:	f7 01       	movw	r30, r14
    1640:	11 91       	ld	r17, Z+
    1642:	7f 01       	movw	r14, r30
    1644:	ca cf       	rjmp	.-108    	; 0x15da <strtol+0x136>
    1646:	81 14       	cp	r8, r1
    1648:	91 04       	cpc	r9, r1
    164a:	91 f0       	breq	.+36     	; 0x1670 <strtol+0x1cc>
    164c:	44 23       	and	r20, r20
    164e:	39 f0       	breq	.+14     	; 0x165e <strtol+0x1ba>
    1650:	08 94       	sec
    1652:	e1 08       	sbc	r14, r1
    1654:	f1 08       	sbc	r15, r1
    1656:	f4 01       	movw	r30, r8
    1658:	f1 82       	std	Z+1, r15	; 0x01
    165a:	e0 82       	st	Z, r14
    165c:	09 c0       	rjmp	.+18     	; 0x1670 <strtol+0x1cc>
    165e:	01 ff       	sbrs	r16, 1
    1660:	1b c0       	rjmp	.+54     	; 0x1698 <strtol+0x1f4>
    1662:	97 01       	movw	r18, r14
    1664:	22 50       	subi	r18, 0x02	; 2
    1666:	30 40       	sbci	r19, 0x00	; 0
    1668:	f4 01       	movw	r30, r8
    166a:	31 83       	std	Z+1, r19	; 0x01
    166c:	20 83       	st	Z, r18
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <strtol+0x1f4>
    1670:	47 ff       	sbrs	r20, 7
    1672:	12 c0       	rjmp	.+36     	; 0x1698 <strtol+0x1f4>
    1674:	00 ff       	sbrs	r16, 0
    1676:	05 c0       	rjmp	.+10     	; 0x1682 <strtol+0x1de>
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e8       	ldi	r25, 0x80	; 128
    1680:	04 c0       	rjmp	.+8      	; 0x168a <strtol+0x1e6>
    1682:	6f ef       	ldi	r22, 0xFF	; 255
    1684:	7f ef       	ldi	r23, 0xFF	; 255
    1686:	8f ef       	ldi	r24, 0xFF	; 255
    1688:	9f e7       	ldi	r25, 0x7F	; 127
    168a:	22 e2       	ldi	r18, 0x22	; 34
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	30 93 e6 01 	sts	0x01E6, r19
    1692:	20 93 e5 01 	sts	0x01E5, r18
    1696:	16 c0       	rjmp	.+44     	; 0x16c4 <strtol+0x220>
    1698:	00 ff       	sbrs	r16, 0
    169a:	08 c0       	rjmp	.+16     	; 0x16ac <strtol+0x208>
    169c:	90 95       	com	r25
    169e:	80 95       	com	r24
    16a0:	70 95       	com	r23
    16a2:	61 95       	neg	r22
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	8f 4f       	sbci	r24, 0xFF	; 255
    16a8:	9f 4f       	sbci	r25, 0xFF	; 255
    16aa:	0c c0       	rjmp	.+24     	; 0x16c4 <strtol+0x220>
    16ac:	97 ff       	sbrs	r25, 7
    16ae:	0a c0       	rjmp	.+20     	; 0x16c4 <strtol+0x220>
    16b0:	82 e2       	ldi	r24, 0x22	; 34
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	90 93 e6 01 	sts	0x01E6, r25
    16b8:	80 93 e5 01 	sts	0x01E5, r24
    16bc:	6f ef       	ldi	r22, 0xFF	; 255
    16be:	7f ef       	ldi	r23, 0xFF	; 255
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	9f e7       	ldi	r25, 0x7F	; 127
    16c4:	9b 01       	movw	r18, r22
    16c6:	ac 01       	movw	r20, r24
    16c8:	03 c0       	rjmp	.+6      	; 0x16d0 <strtol+0x22c>
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	a9 01       	movw	r20, r18
    16d0:	b9 01       	movw	r22, r18
    16d2:	ca 01       	movw	r24, r20
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	df 90       	pop	r13
    16e2:	cf 90       	pop	r12
    16e4:	bf 90       	pop	r11
    16e6:	af 90       	pop	r10
    16e8:	9f 90       	pop	r9
    16ea:	8f 90       	pop	r8
    16ec:	7f 90       	pop	r7
    16ee:	5f 90       	pop	r5
    16f0:	4f 90       	pop	r4
    16f2:	3f 90       	pop	r3
    16f4:	2f 90       	pop	r2
    16f6:	08 95       	ret

000016f8 <isxdigit>:
    16f8:	91 11       	cpse	r25, r1
    16fa:	11 c0       	rjmp	.+34     	; 0x171e <__ctype_isfalse>
    16fc:	80 53       	subi	r24, 0x30	; 48
    16fe:	8a 50       	subi	r24, 0x0A	; 10
    1700:	28 f0       	brcs	.+10     	; 0x170c <isxdigit+0x14>
    1702:	86 5c       	subi	r24, 0xC6	; 198
    1704:	80 62       	ori	r24, 0x20	; 32
    1706:	81 56       	subi	r24, 0x61	; 97
    1708:	86 50       	subi	r24, 0x06	; 6
    170a:	b8 f7       	brcc	.-18     	; 0x16fa <isxdigit+0x2>
    170c:	08 95       	ret

0000170e <isspace>:
    170e:	91 11       	cpse	r25, r1
    1710:	06 c0       	rjmp	.+12     	; 0x171e <__ctype_isfalse>
    1712:	80 32       	cpi	r24, 0x20	; 32
    1714:	19 f0       	breq	.+6      	; 0x171c <isspace+0xe>
    1716:	89 50       	subi	r24, 0x09	; 9
    1718:	85 50       	subi	r24, 0x05	; 5
    171a:	d0 f7       	brcc	.-12     	; 0x1710 <isspace+0x2>
    171c:	08 95       	ret

0000171e <__ctype_isfalse>:
    171e:	99 27       	eor	r25, r25
    1720:	88 27       	eor	r24, r24

00001722 <__ctype_istrue>:
    1722:	08 95       	ret

00001724 <__mulsi3>:
    1724:	62 9f       	mul	r22, r18
    1726:	d0 01       	movw	r26, r0
    1728:	73 9f       	mul	r23, r19
    172a:	f0 01       	movw	r30, r0
    172c:	82 9f       	mul	r24, r18
    172e:	e0 0d       	add	r30, r0
    1730:	f1 1d       	adc	r31, r1
    1732:	64 9f       	mul	r22, r20
    1734:	e0 0d       	add	r30, r0
    1736:	f1 1d       	adc	r31, r1
    1738:	92 9f       	mul	r25, r18
    173a:	f0 0d       	add	r31, r0
    173c:	83 9f       	mul	r24, r19
    173e:	f0 0d       	add	r31, r0
    1740:	74 9f       	mul	r23, r20
    1742:	f0 0d       	add	r31, r0
    1744:	65 9f       	mul	r22, r21
    1746:	f0 0d       	add	r31, r0
    1748:	99 27       	eor	r25, r25
    174a:	72 9f       	mul	r23, r18
    174c:	b0 0d       	add	r27, r0
    174e:	e1 1d       	adc	r30, r1
    1750:	f9 1f       	adc	r31, r25
    1752:	63 9f       	mul	r22, r19
    1754:	b0 0d       	add	r27, r0
    1756:	e1 1d       	adc	r30, r1
    1758:	f9 1f       	adc	r31, r25
    175a:	bd 01       	movw	r22, r26
    175c:	cf 01       	movw	r24, r30
    175e:	11 24       	eor	r1, r1
    1760:	08 95       	ret

00001762 <__udivmodsi4>:
    1762:	a1 e2       	ldi	r26, 0x21	; 33
    1764:	1a 2e       	mov	r1, r26
    1766:	aa 1b       	sub	r26, r26
    1768:	bb 1b       	sub	r27, r27
    176a:	fd 01       	movw	r30, r26
    176c:	0d c0       	rjmp	.+26     	; 0x1788 <__udivmodsi4_ep>

0000176e <__udivmodsi4_loop>:
    176e:	aa 1f       	adc	r26, r26
    1770:	bb 1f       	adc	r27, r27
    1772:	ee 1f       	adc	r30, r30
    1774:	ff 1f       	adc	r31, r31
    1776:	a2 17       	cp	r26, r18
    1778:	b3 07       	cpc	r27, r19
    177a:	e4 07       	cpc	r30, r20
    177c:	f5 07       	cpc	r31, r21
    177e:	20 f0       	brcs	.+8      	; 0x1788 <__udivmodsi4_ep>
    1780:	a2 1b       	sub	r26, r18
    1782:	b3 0b       	sbc	r27, r19
    1784:	e4 0b       	sbc	r30, r20
    1786:	f5 0b       	sbc	r31, r21

00001788 <__udivmodsi4_ep>:
    1788:	66 1f       	adc	r22, r22
    178a:	77 1f       	adc	r23, r23
    178c:	88 1f       	adc	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	1a 94       	dec	r1
    1792:	69 f7       	brne	.-38     	; 0x176e <__udivmodsi4_loop>
    1794:	60 95       	com	r22
    1796:	70 95       	com	r23
    1798:	80 95       	com	r24
    179a:	90 95       	com	r25
    179c:	9b 01       	movw	r18, r22
    179e:	ac 01       	movw	r20, r24
    17a0:	bd 01       	movw	r22, r26
    17a2:	cf 01       	movw	r24, r30
    17a4:	08 95       	ret

000017a6 <_exit>:
    17a6:	f8 94       	cli

000017a8 <__stop_program>:
    17a8:	ff cf       	rjmp	.-2      	; 0x17a8 <__stop_program>
