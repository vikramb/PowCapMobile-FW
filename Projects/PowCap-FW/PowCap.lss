
PowCap.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000015da  0000166e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b3  00800116  00800116  00001684  2**0
                  ALLOC
  3 .stab         00001128  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000066b  00000000  00000000  000027ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000568  00000000  00000000  00002e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e46  00000000  00000000  0000337f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008a65  00000000  00000000  000041c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002469  00000000  00000000  0000cc2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006893  00000000  00000000  0000f093  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000810  00000000  00000000  00015928  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000341a  00000000  00000000  00016138  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000387e  00000000  00000000  00019552  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000680  00000000  00000000  0001cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	a4 c0       	rjmp	.+328    	; 0x14a <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	be c0       	rjmp	.+380    	; 0x182 <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
       6:	00 00       	nop
       8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
       a:	00 00       	nop
       c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
       e:	00 00       	nop
      10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
      12:	00 00       	nop
      14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
      16:	00 00       	nop
      18:	b4 c0       	rjmp	.+360    	; 0x182 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
      22:	00 00       	nop
      24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
      26:	00 00       	nop
      28:	93 c4       	rjmp	.+2342   	; 0x950 <__vector_10>
      2a:	00 00       	nop
      2c:	58 c4       	rjmp	.+2224   	; 0x8de <__vector_11>
      2e:	00 00       	nop
      30:	a8 c0       	rjmp	.+336    	; 0x182 <__bad_interrupt>
      32:	00 00       	nop
      34:	a6 c0       	rjmp	.+332    	; 0x182 <__bad_interrupt>
      36:	00 00       	nop
      38:	a4 c0       	rjmp	.+328    	; 0x182 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a2 c0       	rjmp	.+324    	; 0x182 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a0 c0       	rjmp	.+320    	; 0x182 <__bad_interrupt>
      42:	00 00       	nop
      44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
      46:	00 00       	nop
      48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
      4e:	00 00       	nop
      50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
      52:	00 00       	nop
      54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
      56:	00 00       	nop
      58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
      5e:	00 00       	nop
      60:	90 c0       	rjmp	.+288    	; 0x182 <__bad_interrupt>
      62:	00 00       	nop
      64:	8e c0       	rjmp	.+284    	; 0x182 <__bad_interrupt>
      66:	00 00       	nop
      68:	8c c0       	rjmp	.+280    	; 0x182 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8a c0       	rjmp	.+276    	; 0x182 <__bad_interrupt>
      6e:	00 00       	nop
      70:	88 c0       	rjmp	.+272    	; 0x182 <__bad_interrupt>
      72:	00 00       	nop
      74:	86 c0       	rjmp	.+268    	; 0x182 <__bad_interrupt>
      76:	00 00       	nop
      78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7a c0       	rjmp	.+244    	; 0x182 <__bad_interrupt>
      8e:	00 00       	nop
      90:	78 c0       	rjmp	.+240    	; 0x182 <__bad_interrupt>
      92:	00 00       	nop
      94:	76 c0       	rjmp	.+236    	; 0x182 <__bad_interrupt>
      96:	00 00       	nop
      98:	74 c0       	rjmp	.+232    	; 0x182 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	72 c0       	rjmp	.+228    	; 0x182 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	70 c0       	rjmp	.+224    	; 0x182 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6e c0       	rjmp	.+220    	; 0x182 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6c c0       	rjmp	.+216    	; 0x182 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <DeviceDescriptor>:
      ac:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
      bc:	dc 01                                               ..

000000be <ConfigurationDescriptor>:
      be:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ce:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      de:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      ee:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000fc <LanguageString>:
      fc:	04 03 09 04                                         ....

00000100 <ManufacturerString>:
     100:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     110:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000011a <ProductString>:
     11a:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
     12a:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     13a:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	da e0       	ldi	r29, 0x0A	; 10
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	ea ed       	ldi	r30, 0xDA	; 218
     15e:	f5 e1       	ldi	r31, 0x15	; 21
     160:	02 c0       	rjmp	.+4      	; 0x166 <.do_copy_data_start>

00000162 <.do_copy_data_loop>:
     162:	05 90       	lpm	r0, Z+
     164:	0d 92       	st	X+, r0

00000166 <.do_copy_data_start>:
     166:	a6 31       	cpi	r26, 0x16	; 22
     168:	b1 07       	cpc	r27, r17
     16a:	d9 f7       	brne	.-10     	; 0x162 <.do_copy_data_loop>

0000016c <__do_clear_bss>:
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	a6 e1       	ldi	r26, 0x16	; 22
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
     174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
     176:	a9 3c       	cpi	r26, 0xC9	; 201
     178:	b1 07       	cpc	r27, r17
     17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>
     17c:	29 d0       	rcall	.+82     	; 0x1d0 <main>
     17e:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <_exit>

00000182 <__bad_interrupt>:
     182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
}
     184:	08 95       	ret

00000186 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
}
     186:	08 95       	ret

00000188 <EVENT_CDC_Device_LineEncodingChanged>:
}

void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    
}
     188:	08 95       	ret

0000018a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <CDC_Device_ProcessControlRequest>

00000192 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	91 e0       	ldi	r25, 0x01	; 1
}
     196:	e5 c7       	rjmp	.+4042   	; 0x1162 <CDC_Device_ConfigureEndpoints>

00000198 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     198:	84 b7       	in	r24, 0x34	; 52
     19a:	87 7f       	andi	r24, 0xF7	; 247
     19c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     19e:	88 e1       	ldi	r24, 0x18	; 24
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	80 93 60 00 	sts	0x0060, r24
     1a8:	10 92 60 00 	sts	0x0060, r1
     1ac:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	20 e8       	ldi	r18, 0x80	; 128
     1b4:	0f b6       	in	r0, 0x3f	; 63
     1b6:	f8 94       	cli
     1b8:	20 93 61 00 	sts	0x0061, r18
     1bc:	80 93 61 00 	sts	0x0061, r24
     1c0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
     1c2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= LEDS_ALL_LEDS;
     1c4:	5b 9a       	sbi	0x0b, 3	; 11
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
     1c6:	5b 98       	cbi	0x0b, 3	; 11

	/* Hardware Initialization */
	LEDs_Init();
    LEDs_TurnOffLEDs(LEDS_LED1);
    //LEDs_TurnOnLEDs(LEDS_LED1);
    SPI_MasterInit();
     1c8:	ae d0       	rcall	.+348    	; 0x326 <SPI_MasterInit>
    filters_MasterInit();
     1ca:	ba d0       	rcall	.+372    	; 0x340 <filters_MasterInit>
    USB_Init();
     1cc:	70 d3       	rcall	.+1760   	; 0x8ae <USB_Init>
    setup_callbacks();

}
     1ce:	ce c0       	rjmp	.+412    	; 0x36c <setup_callbacks>

000001d0 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
	
    
    SetupHardware();
     1d8:	df df       	rcall	.-66     	; 0x198 <SetupHardware>
		 *  \param[out] DataPtr  Pointer to a global array that will hold the data stored into the ring buffer.
		 *  \param[out] Size     Maximum number of bytes that can be stored in the underlying data array.
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1da:	e6 e1       	ldi	r30, 0x16	; 22
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1de:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1e0:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
     1e2:	81 e2       	ldi	r24, 0x21	; 33
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	91 83       	std	Z+1, r25	; 0x01
     1e8:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     1ea:	93 83       	std	Z+3, r25	; 0x03
     1ec:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     1ee:	95 83       	std	Z+5, r25	; 0x05
     1f0:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     1f2:	81 ea       	ldi	r24, 0xA1	; 161
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	97 83       	std	Z+7, r25	; 0x07
     1f8:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     1fa:	80 e8       	ldi	r24, 0x80	; 128
     1fc:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     1fe:	12 86       	std	Z+10, r1	; 0x0a
     200:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     202:	2f bf       	out	0x3f, r18	; 63



	RingBuffer_InitBuffer(&USB_Buffer, USB_Buffer_Data, sizeof(USB_Buffer_Data));

	sei();
     204:	78 94       	sei
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     206:	06 e1       	ldi	r16, 0x16	; 22
     208:	11 e0       	ldi	r17, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     20a:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     20c:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     20e:	20 91 1f 01 	lds	r18, 0x011F
     212:	30 91 20 01 	lds	r19, 0x0120
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     216:	8f bf       	out	0x3f, r24	; 63

	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USB_Buffer)))
     218:	80 91 1e 01 	lds	r24, 0x011E
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	28 17       	cp	r18, r24
     220:	39 07       	cpc	r19, r25
     222:	11 f1       	breq	.+68     	; 0x268 <main+0x98>
		{
		int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	fc d6       	rcall	.+3576   	; 0x1022 <CDC_Device_ReceiveByte>
     22a:	ac 01       	movw	r20, r24
			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
        	if (!(ReceivedByte < 0)) {
     22c:	97 fd       	sbrc	r25, 7
     22e:	1c c0       	rjmp	.+56     	; 0x268 <main+0x98>
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     230:	e8 01       	movw	r28, r16

			*Buffer->In = Data;
     232:	e8 81       	ld	r30, Y
     234:	f9 81       	ldd	r31, Y+1	; 0x01
     236:	80 83       	st	Z, r24

			if (++Buffer->In == Buffer->End)
     238:	88 81       	ld	r24, Y
     23a:	99 81       	ldd	r25, Y+1	; 0x01
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	99 83       	std	Y+1, r25	; 0x01
     240:	88 83       	st	Y, r24
     242:	2e 81       	ldd	r18, Y+6	; 0x06
     244:	3f 81       	ldd	r19, Y+7	; 0x07
     246:	82 17       	cp	r24, r18
     248:	93 07       	cpc	r25, r19
     24a:	21 f4       	brne	.+8      	; 0x254 <main+0x84>
			  Buffer->In = Buffer->Start;
     24c:	8c 81       	ldd	r24, Y+4	; 0x04
     24e:	9d 81       	ldd	r25, Y+5	; 0x05
     250:	99 83       	std	Y+1, r25	; 0x01
     252:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     254:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     256:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
     258:	89 85       	ldd	r24, Y+9	; 0x09
     25a:	9a 85       	ldd	r25, Y+10	; 0x0a
     25c:	01 96       	adiw	r24, 0x01	; 1
     25e:	9a 87       	std	Y+10, r25	; 0x0a
     260:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     262:	2f bf       	out	0x3f, r18	; 63
                  RingBuffer_Insert(&USB_Buffer, ReceivedByte);
                  //RingBuffer_Insert(&USB_Buffer, 'a');
                  //LEDs_ToggleLEDs(LEDS_LED1);
                  process_byte(ReceivedByte);
     264:	ca 01       	movw	r24, r20
     266:	45 d1       	rcall	.+650    	; 0x4f2 <process_byte>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     268:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     26a:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
     26c:	c0 91 1f 01 	lds	r28, 0x011F
     270:	d0 91 20 01 	lds	r29, 0x0120
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     274:	8f bf       	out	0x3f, r24	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
     276:	22 c0       	rjmp	.+68     	; 0x2bc <main+0xec>

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
		while ((BufferCount--)>0)
		{
                /* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
				if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     278:	e0 91 18 01 	lds	r30, 0x0118
     27c:	f0 91 19 01 	lds	r31, 0x0119
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	60 81       	ld	r22, Z
     286:	49 d7       	rcall	.+3730   	; 0x111a <CDC_Device_SendByte>
     288:	88 23       	and	r24, r24
     28a:	d1 f4       	brne	.+52     	; 0x2c0 <main+0xf0>
		 *
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     28c:	f8 01       	movw	r30, r16
		
			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
     28e:	82 81       	ldd	r24, Z+2	; 0x02
     290:	93 81       	ldd	r25, Z+3	; 0x03
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	93 83       	std	Z+3, r25	; 0x03
     296:	82 83       	std	Z+2, r24	; 0x02
     298:	26 81       	ldd	r18, Z+6	; 0x06
     29a:	37 81       	ldd	r19, Z+7	; 0x07
     29c:	82 17       	cp	r24, r18
     29e:	93 07       	cpc	r25, r19
     2a0:	21 f4       	brne	.+8      	; 0x2aa <main+0xda>
			  Buffer->Out = Buffer->Start;
     2a2:	84 81       	ldd	r24, Z+4	; 0x04
     2a4:	95 81       	ldd	r25, Z+5	; 0x05
     2a6:	93 83       	std	Z+3, r25	; 0x03
     2a8:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2aa:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2ac:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
     2ae:	81 85       	ldd	r24, Z+9	; 0x09
     2b0:	92 85       	ldd	r25, Z+10	; 0x0a
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	92 87       	std	Z+10, r25	; 0x0a
     2b6:	81 87       	std	Z+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2b8:	2f bf       	out	0x3f, r18	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
     2ba:	21 97       	sbiw	r28, 0x01	; 1
		uint16_t BufferCount = RingBuffer_GetCount(&USB_Buffer);



			/* Read bytes from the USART receive buffer into the USB IN endpoint */
		while ((BufferCount--)>0)
     2bc:	20 97       	sbiw	r28, 0x00	; 0
     2be:	e1 f6       	brne	.-72     	; 0x278 <main+0xa8>
				/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
                RingBuffer_Remove(&USB_Buffer);

			}

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	1b d7       	rcall	.+3638   	; 0x10fc <CDC_Device_USBTask>
		USB_USBTask();
     2c6:	9b d6       	rcall	.+3382   	; 0xffe <USB_USBTask>
     2c8:	a0 cf       	rjmp	.-192    	; 0x20a <main+0x3a>

000002ca <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     2ca:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     2cc:	92 30       	cpi	r25, 0x02	; 2
     2ce:	49 f0       	breq	.+18     	; 0x2e2 <CALLBACK_USB_GetDescriptor+0x18>
     2d0:	93 30       	cpi	r25, 0x03	; 3
     2d2:	61 f0       	breq	.+24     	; 0x2ec <CALLBACK_USB_GetDescriptor+0x22>
     2d4:	91 30       	cpi	r25, 0x01	; 1
     2d6:	f9 f4       	brne	.+62     	; 0x316 <CALLBACK_USB_GetDescriptor+0x4c>
     2d8:	ec ea       	ldi	r30, 0xAC	; 172
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	22 e1       	ldi	r18, 0x12	; 18
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	1e c0       	rjmp	.+60     	; 0x31e <CALLBACK_USB_GetDescriptor+0x54>
     2e2:	ee eb       	ldi	r30, 0xBE	; 190
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	2e e3       	ldi	r18, 0x3E	; 62
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	19 c0       	rjmp	.+50     	; 0x31e <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	49 f0       	breq	.+18     	; 0x302 <CALLBACK_USB_GetDescriptor+0x38>
     2f0:	81 30       	cpi	r24, 0x01	; 1
     2f2:	18 f0       	brcs	.+6      	; 0x2fa <CALLBACK_USB_GetDescriptor+0x30>
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	79 f4       	brne	.+30     	; 0x316 <CALLBACK_USB_GetDescriptor+0x4c>
     2f8:	08 c0       	rjmp	.+16     	; 0x30a <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     2fa:	ec ef       	ldi	r30, 0xFC	; 252
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	84 91       	lpm	r24, Z+
     300:	07 c0       	rjmp	.+14     	; 0x310 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     302:	e0 e0       	ldi	r30, 0x00	; 0
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	84 91       	lpm	r24, Z+
     308:	03 c0       	rjmp	.+6      	; 0x310 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     30a:	ea e1       	ldi	r30, 0x1A	; 26
     30c:	f1 e0       	ldi	r31, 0x01	; 1
     30e:	84 91       	lpm	r24, Z+
     310:	28 2f       	mov	r18, r24
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	04 c0       	rjmp	.+8      	; 0x31e <CALLBACK_USB_GetDescriptor+0x54>
     316:	e0 e0       	ldi	r30, 0x00	; 0
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     31e:	ed 93       	st	X+, r30
     320:	fc 93       	st	X, r31
	return Size;
}
     322:	c9 01       	movw	r24, r18
     324:	08 95       	ret

00000326 <SPI_MasterInit>:
#include <avr/io.h>
#include "SPI.h"

void SPI_MasterInit(void) {
     //Set Direction For MOSI and SCK PIN
    DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS)|(1<<DD_SS2); 
     326:	87 e1       	ldi	r24, 0x17	; 23
     328:	84 b9       	out	0x04, r24	; 4
    //Set SPI Control Registers
    PORT_SPI = PORT_SPI | PSS;
     32a:	85 b1       	in	r24, 0x05	; 5
     32c:	85 b9       	out	0x05, r24	; 5
    PORT_SPI = PORT_SPI | PSS2;
     32e:	2a 9a       	sbi	0x05, 2	; 5
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL);
     330:	89 e5       	ldi	r24, 0x59	; 89
     332:	8c bd       	out	0x2c, r24	; 44
}
     334:	08 95       	ret

00000336 <SPI_MaterTransmit>:

void SPI_MaterTransmit(char cData) {
    SPDR = cData;
     336:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1<<SPIF)));
     338:	0d b4       	in	r0, 0x2d	; 45
     33a:	07 fe       	sbrs	r0, 7
     33c:	fd cf       	rjmp	.-6      	; 0x338 <SPI_MaterTransmit+0x2>
}
     33e:	08 95       	ret

00000340 <filters_MasterInit>:

void filters_MasterInit(void) {
	//Set pin values for lines to muxes
	
	//sets current MUX to 60Hz Notch passthrough  (000)
	DDRF = (1<<PF4)|(1>>PF5)|(1<<PF6); 
     340:	80 e5       	ldi	r24, 0x50	; 80
     342:	80 bb       	out	0x10, r24	; 16
	
	//sets voltage MUX to 60Hz notch passthrough (100)
	DDRF != (1<<PF7);	
     344:	80 b3       	in	r24, 0x10	; 16
	DDRE = (1<<PE6);
     346:	80 e4       	ldi	r24, 0x40	; 64
     348:	8d b9       	out	0x0d, r24	; 13
	DDRD = (1<<PD7);	
     34a:	80 e8       	ldi	r24, 0x80	; 128
     34c:	8a b9       	out	0x0a, r24	; 10

	//sets 60Hz Notch OFF for Voltage and Current lines
	DDRF = (1<<PF0)|(1<<PF1);
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	80 bb       	out	0x10, r24	; 16
}
     352:	08 95       	ret

00000354 <init_callbacks>:
#include <avr/io.h>
#include "FSM.h"
#include "commands.h"
#include <ctype.h>
void init_callbacks() {
     354:	e2 ea       	ldi	r30, 0xA2	; 162
     356:	f1 e0       	ldi	r31, 0x01	; 1
    for(int i=0;i<NUMBER_CMDS;i++){
        cb_command[i].id = 0;
     358:	11 82       	std	Z+1, r1	; 0x01
     35a:	10 82       	st	Z, r1
        cb_command[i].fxn = NULL;
     35c:	13 82       	std	Z+3, r1	; 0x03
     35e:	12 82       	std	Z+2, r1	; 0x02
     360:	34 96       	adiw	r30, 0x04	; 4
#include <avr/io.h>
#include "FSM.h"
#include "commands.h"
#include <ctype.h>
void init_callbacks() {
    for(int i=0;i<NUMBER_CMDS;i++){
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	e6 3b       	cpi	r30, 0xB6	; 182
     366:	f8 07       	cpc	r31, r24
     368:	b9 f7       	brne	.-18     	; 0x358 <init_callbacks+0x4>
        cb_command[i].id = 0;
        cb_command[i].fxn = NULL;
    }
}
     36a:	08 95       	ret

0000036c <setup_callbacks>:

void setup_callbacks() {
    init_callbacks();
     36c:	f3 df       	rcall	.-26     	; 0x354 <init_callbacks>
    cb_command[0].id = GAIN1;
     36e:	87 e6       	ldi	r24, 0x67	; 103
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	90 93 a3 01 	sts	0x01A3, r25
     376:	80 93 a2 01 	sts	0x01A2, r24
    cb_command[0].fxn = cb_gain1; 
     37a:	8f e8       	ldi	r24, 0x8F	; 143
     37c:	93 e0       	ldi	r25, 0x03	; 3
     37e:	90 93 a5 01 	sts	0x01A5, r25
     382:	80 93 a4 01 	sts	0x01A4, r24
    cb_command[1].id = GAIN2;
     386:	87 e4       	ldi	r24, 0x47	; 71
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	90 93 a7 01 	sts	0x01A7, r25
     38e:	80 93 a6 01 	sts	0x01A6, r24
    cb_command[1].fxn = cb_gain2;
     392:	8d e6       	ldi	r24, 0x6D	; 109
     394:	93 e0       	ldi	r25, 0x03	; 3
     396:	90 93 a9 01 	sts	0x01A9, r25
     39a:	80 93 a8 01 	sts	0x01A8, r24
    cb_command[2].id = FILTER1;
     39e:	86 e6       	ldi	r24, 0x66	; 102
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	90 93 ab 01 	sts	0x01AB, r25
     3a6:	80 93 aa 01 	sts	0x01AA, r24
    cb_command[2].fxn = cb_filter1;
     3aa:	81 ed       	ldi	r24, 0xD1	; 209
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	90 93 ad 01 	sts	0x01AD, r25
     3b2:	80 93 ac 01 	sts	0x01AC, r24
    cb_command[3].id = FILTER2;
     3b6:	86 e4       	ldi	r24, 0x46	; 70
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	90 93 af 01 	sts	0x01AF, r25
     3be:	80 93 ae 01 	sts	0x01AE, r24
    cb_command[3].fxn = cb_filter2;
     3c2:	8f e1       	ldi	r24, 0x1F	; 31
     3c4:	93 e0       	ldi	r25, 0x03	; 3
     3c6:	90 93 b1 01 	sts	0x01B1, r25
     3ca:	80 93 b0 01 	sts	0x01B0, r24
    cb_command[4].id = NOTCH1;
     3ce:	8e e6       	ldi	r24, 0x6E	; 110
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	90 93 b3 01 	sts	0x01B3, r25
     3d6:	80 93 b2 01 	sts	0x01B2, r24
    cb_command[4].fxn = cb_notch1;
     3da:	84 eb       	ldi	r24, 0xB4	; 180
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	90 93 b5 01 	sts	0x01B5, r25
     3e2:	80 93 b4 01 	sts	0x01B4, r24
    cb_command[5].id = NOTCH2;
     3e6:	8e e4       	ldi	r24, 0x4E	; 78
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	90 93 b7 01 	sts	0x01B7, r25
     3ee:	80 93 b6 01 	sts	0x01B6, r24
    cb_command[5].fxn = cb_notch2;
     3f2:	87 e9       	ldi	r24, 0x97	; 151
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	90 93 b9 01 	sts	0x01B9, r25
     3fa:	80 93 b8 01 	sts	0x01B8, r24
}
     3fe:	08 95       	ret

00000400 <search_callback>:


int16_t search_callback(COMMAND *cmd) {
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	ec 01       	movw	r28, r24
    
    for (int i=0;i<NUMBER_CMDS;i++) {

        if (cmd->command == cb_command[i].id) {
     406:	28 81       	ld	r18, Y
     408:	39 81       	ldd	r19, Y+1	; 0x01
     40a:	a2 ea       	ldi	r26, 0xA2	; 162
     40c:	b1 e0       	ldi	r27, 0x01	; 1
     40e:	e0 e0       	ldi	r30, 0x00	; 0
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	8d 91       	ld	r24, X+
     414:	9c 91       	ld	r25, X
     416:	11 97       	sbiw	r26, 0x01	; 1
     418:	28 17       	cp	r18, r24
     41a:	39 07       	cpc	r19, r25
     41c:	79 f4       	brne	.+30     	; 0x43c <search_callback+0x3c>
            //LEDs_ToggleLEDs(LEDS_LED1);
            cb_command[i].fxn(cmd->param);
     41e:	ee 0f       	add	r30, r30
     420:	ff 1f       	adc	r31, r31
     422:	ee 0f       	add	r30, r30
     424:	ff 1f       	adc	r31, r31
     426:	ec 55       	subi	r30, 0x5C	; 92
     428:	fe 4f       	sbci	r31, 0xFE	; 254
     42a:	01 90       	ld	r0, Z+
     42c:	f0 81       	ld	r31, Z
     42e:	e0 2d       	mov	r30, r0
     430:	ce 01       	movw	r24, r28
     432:	02 96       	adiw	r24, 0x02	; 2
     434:	09 95       	icall
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	07 c0       	rjmp	.+14     	; 0x44a <search_callback+0x4a>
}


int16_t search_callback(COMMAND *cmd) {
    
    for (int i=0;i<NUMBER_CMDS;i++) {
     43c:	31 96       	adiw	r30, 0x01	; 1
     43e:	14 96       	adiw	r26, 0x04	; 4
     440:	e5 30       	cpi	r30, 0x05	; 5
     442:	f1 05       	cpc	r31, r1
     444:	31 f7       	brne	.-52     	; 0x412 <search_callback+0x12>
     446:	2f ef       	ldi	r18, 0xFF	; 255
     448:	3f ef       	ldi	r19, 0xFF	; 255
            cb_command[i].fxn(cmd->param);
            return 0;
        }
    }
    return -1;
}
     44a:	c9 01       	movw	r24, r18
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <init_command>:
void init_FSM() {
    FSM_State = WAITING_CMD;
    init_command(&cmd);
}

void init_command(COMMAND *cmd) {
     452:	fc 01       	movw	r30, r24
    cmd->command = 0;
     454:	11 82       	std	Z+1, r1	; 0x01
     456:	10 82       	st	Z, r1
    cmd->param[0] = '\0';
     458:	12 82       	std	Z+2, r1	; 0x02
}
     45a:	08 95       	ret

0000045c <init_FSM>:
    }
    return -1;
}

void init_FSM() {
    FSM_State = WAITING_CMD;
     45c:	10 92 a1 01 	sts	0x01A1, r1
    init_command(&cmd);
     460:	86 eb       	ldi	r24, 0xB6	; 182
     462:	91 e0       	ldi	r25, 0x01	; 1
}
     464:	f6 cf       	rjmp	.-20     	; 0x452 <init_command>

00000466 <set_command>:
void init_command(COMMAND *cmd) {
    cmd->command = 0;
    cmd->param[0] = '\0';
}

void set_command(COMMAND *cmd, int16_t c) {
     466:	fc 01       	movw	r30, r24
    if(VALIDCMD(c)) { 
     468:	67 36       	cpi	r22, 0x67	; 103
     46a:	71 05       	cpc	r23, r1
     46c:	79 f0       	breq	.+30     	; 0x48c <set_command+0x26>
     46e:	67 34       	cpi	r22, 0x47	; 71
     470:	71 05       	cpc	r23, r1
     472:	61 f0       	breq	.+24     	; 0x48c <set_command+0x26>
     474:	66 36       	cpi	r22, 0x66	; 102
     476:	71 05       	cpc	r23, r1
     478:	49 f0       	breq	.+18     	; 0x48c <set_command+0x26>
     47a:	66 34       	cpi	r22, 0x46	; 70
     47c:	71 05       	cpc	r23, r1
     47e:	31 f0       	breq	.+12     	; 0x48c <set_command+0x26>
     480:	6e 36       	cpi	r22, 0x6E	; 110
     482:	71 05       	cpc	r23, r1
     484:	19 f0       	breq	.+6      	; 0x48c <set_command+0x26>
     486:	6e 34       	cpi	r22, 0x4E	; 78
     488:	71 05       	cpc	r23, r1
     48a:	31 f4       	brne	.+12     	; 0x498 <set_command+0x32>
        cmd->command = c;
     48c:	71 83       	std	Z+1, r23	; 0x01
     48e:	60 83       	st	Z, r22
        FSM_State = PARAM1;
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	80 93 a1 01 	sts	0x01A1, r24
     496:	08 95       	ret
    } else {
    
        init_FSM();
     498:	e1 cf       	rjmp	.-62     	; 0x45c <init_FSM>

0000049a <set_param1>:
    } else {
        init_FSM();
    }
}

void set_param1(COMMAND *cmd, int16_t p) {
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	ec 01       	movw	r28, r24
     4a2:	16 2f       	mov	r17, r22
     4a4:	97 2f       	mov	r25, r23
    if(isxdigit((int)p)) {
     4a6:	86 2f       	mov	r24, r22
     4a8:	0e 94 94 0a 	call	0x1528	; 0x1528 <isxdigit>
     4ac:	89 2b       	or	r24, r25
     4ae:	31 f0       	breq	.+12     	; 0x4bc <set_param1+0x22>
                cmd->param[1] = (char)p;
     4b0:	1b 83       	std	Y+3, r17	; 0x03
        cmd->param[2] = '\0';
     4b2:	1c 82       	std	Y+4, r1	; 0x04
        FSM_State = RUN;
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	80 93 a1 01 	sts	0x01A1, r24
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <set_param1+0x24>
    } else {
        init_FSM();
     4bc:	cf df       	rcall	.-98     	; 0x45c <init_FSM>
    }
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	08 95       	ret

000004c6 <set_param0>:
    
        init_FSM();
    }
}

void set_param0(COMMAND *cmd, int16_t p) {
     4c6:	1f 93       	push	r17
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	ec 01       	movw	r28, r24
     4ce:	16 2f       	mov	r17, r22
     4d0:	97 2f       	mov	r25, r23
    if(isxdigit(p)) {
     4d2:	86 2f       	mov	r24, r22
     4d4:	0e 94 94 0a 	call	0x1528	; 0x1528 <isxdigit>
     4d8:	89 2b       	or	r24, r25
     4da:	31 f0       	breq	.+12     	; 0x4e8 <set_param0+0x22>
        cmd->param[0] = (char)p;
     4dc:	1a 83       	std	Y+2, r17	; 0x02
        cmd->param[1] = '\0';
     4de:	1b 82       	std	Y+3, r1	; 0x03
        FSM_State = PARAM2;
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	80 93 a1 01 	sts	0x01A1, r24
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <set_param0+0x24>
    } else {
        init_FSM();
     4e8:	b9 df       	rcall	.-142    	; 0x45c <init_FSM>
    }
}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	08 95       	ret

000004f2 <process_byte>:
    } else {
        init_FSM();
    }
}

void process_byte(int16_t rxbyte) {
     4f2:	bc 01       	movw	r22, r24
    switch(FSM_State) { 
     4f4:	80 91 a1 01 	lds	r24, 0x01A1
     4f8:	81 30       	cpi	r24, 0x01	; 1
     4fa:	51 f0       	breq	.+20     	; 0x510 <process_byte+0x1e>
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	28 f0       	brcs	.+10     	; 0x50a <process_byte+0x18>
     500:	82 30       	cpi	r24, 0x02	; 2
     502:	49 f0       	breq	.+18     	; 0x516 <process_byte+0x24>
     504:	83 30       	cpi	r24, 0x03	; 3
     506:	91 f4       	brne	.+36     	; 0x52c <process_byte+0x3a>
     508:	09 c0       	rjmp	.+18     	; 0x51c <process_byte+0x2a>
        case WAITING_CMD:
            set_command(&cmd, rxbyte);
     50a:	86 eb       	ldi	r24, 0xB6	; 182
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	ab cf       	rjmp	.-170    	; 0x466 <set_command>
            break;
        case PARAM1:
            set_param0(&cmd, rxbyte);
     510:	86 eb       	ldi	r24, 0xB6	; 182
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	d8 cf       	rjmp	.-80     	; 0x4c6 <set_param0>
            break;
        case PARAM2:
            set_param1(&cmd, rxbyte);
     516:	86 eb       	ldi	r24, 0xB6	; 182
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	bf cf       	rjmp	.-130    	; 0x49a <set_param1>
            break;
        case RUN:
            if(isspace(rxbyte)) {
     51c:	cb 01       	movw	r24, r22
     51e:	0e 94 9f 0a 	call	0x153e	; 0x153e <isspace>
     522:	89 2b       	or	r24, r25
     524:	19 f0       	breq	.+6      	; 0x52c <process_byte+0x3a>
                search_callback(&cmd);
     526:	86 eb       	ldi	r24, 0xB6	; 182
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	6a df       	rcall	.-300    	; 0x400 <search_callback>
                init_FSM();
                break;
            }
        default:
            init_FSM();
     52c:	97 cf       	rjmp	.-210    	; 0x45c <init_FSM>

0000052e <cb_notch2>:
		break;
	}
}


void cb_notch2(char *param) {		//current 60hz notch filter MUX decision 
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	00 d0       	rcall	.+0      	; 0x534 <cb_notch2+0x6>
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
	char *s;
	int16_t val;
	s = param;
     538:	9a 83       	std	Y+2, r25	; 0x02
     53a:	89 83       	std	Y+1, r24	; 0x01
	val = strtol(param,&s,16);
     53c:	be 01       	movw	r22, r28
     53e:	6f 5f       	subi	r22, 0xFF	; 255
     540:	7f 4f       	sbci	r23, 0xFF	; 255
     542:	40 e1       	ldi	r20, 0x10	; 16
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	c4 d6       	rcall	.+3464   	; 0x12d0 <strtol>

	switch(val) {
     548:	61 15       	cp	r22, r1
     54a:	71 05       	cpc	r23, r1
     54c:	21 f0       	breq	.+8      	; 0x556 <cb_notch2+0x28>
     54e:	61 30       	cpi	r22, 0x01	; 1
     550:	71 05       	cpc	r23, r1
     552:	29 f4       	brne	.+10     	; 0x55e <cb_notch2+0x30>
     554:	03 c0       	rjmp	.+6      	; 0x55c <cb_notch2+0x2e>
	case 0:	
		PORTF = (1<<1);
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	81 bb       	out	0x11, r24	; 17
     55a:	01 c0       	rjmp	.+2      	; 0x55e <cb_notch2+0x30>
		break;
	case 1:
		PORTF != (1<<1);
     55c:	81 b3       	in	r24, 0x11	; 17
		break;
	}
}
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <cb_notch1>:
	}

}
	

void cb_notch1(char *param) {		//voltage 60hz notch filter MUX decision 
     568:	df 93       	push	r29
     56a:	cf 93       	push	r28
     56c:	00 d0       	rcall	.+0      	; 0x56e <cb_notch1+0x6>
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
	char *s;
	int16_t val;
	s = param;
     572:	9a 83       	std	Y+2, r25	; 0x02
     574:	89 83       	std	Y+1, r24	; 0x01
	val = strtol(param,&s,16);
     576:	be 01       	movw	r22, r28
     578:	6f 5f       	subi	r22, 0xFF	; 255
     57a:	7f 4f       	sbci	r23, 0xFF	; 255
     57c:	40 e1       	ldi	r20, 0x10	; 16
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	a7 d6       	rcall	.+3406   	; 0x12d0 <strtol>

	switch(val) {
     582:	61 15       	cp	r22, r1
     584:	71 05       	cpc	r23, r1
     586:	21 f0       	breq	.+8      	; 0x590 <cb_notch1+0x28>
     588:	61 30       	cpi	r22, 0x01	; 1
     58a:	71 05       	cpc	r23, r1
     58c:	29 f4       	brne	.+10     	; 0x598 <cb_notch1+0x30>
     58e:	03 c0       	rjmp	.+6      	; 0x596 <cb_notch1+0x2e>
	case 0:	
		PORTF = (1<<0);
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	81 bb       	out	0x11, r24	; 17
     594:	01 c0       	rjmp	.+2      	; 0x598 <cb_notch1+0x30>
		break;
	case 1:
		PORTF != (1<<0);
     596:	81 b3       	in	r24, 0x11	; 17
		break;
	}
}
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	cf 91       	pop	r28
     59e:	df 91       	pop	r29
     5a0:	08 95       	ret

000005a2 <cb_filter1>:
			break;
	}	

}

void cb_filter1(char *param) {		//voltage filter MUX decision
     5a2:	df 93       	push	r29
     5a4:	cf 93       	push	r28
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <cb_filter1+0x6>
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
	char *s;
	int16_t val;
	s = param;
     5ac:	9a 83       	std	Y+2, r25	; 0x02
     5ae:	89 83       	std	Y+1, r24	; 0x01
	val = strtol(param,&s,16);
     5b0:	be 01       	movw	r22, r28
     5b2:	6f 5f       	subi	r22, 0xFF	; 255
     5b4:	7f 4f       	sbci	r23, 0xFF	; 255
     5b6:	40 e1       	ldi	r20, 0x10	; 16
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	8a d6       	rcall	.+3348   	; 0x12d0 <strtol>
	
	switch(val) {
     5bc:	63 30       	cpi	r22, 0x03	; 3
     5be:	71 05       	cpc	r23, r1
     5c0:	09 f1       	breq	.+66     	; 0x604 <cb_filter1+0x62>
     5c2:	64 30       	cpi	r22, 0x04	; 4
     5c4:	71 05       	cpc	r23, r1
     5c6:	4c f4       	brge	.+18     	; 0x5da <cb_filter1+0x38>
     5c8:	61 30       	cpi	r22, 0x01	; 1
     5ca:	71 05       	cpc	r23, r1
     5cc:	a9 f0       	breq	.+42     	; 0x5f8 <cb_filter1+0x56>
     5ce:	62 30       	cpi	r22, 0x02	; 2
     5d0:	71 05       	cpc	r23, r1
     5d2:	ac f4       	brge	.+42     	; 0x5fe <cb_filter1+0x5c>
     5d4:	67 2b       	or	r22, r23
     5d6:	71 f0       	breq	.+28     	; 0x5f4 <cb_filter1+0x52>
     5d8:	2d c0       	rjmp	.+90     	; 0x634 <cb_filter1+0x92>
     5da:	65 30       	cpi	r22, 0x05	; 5
     5dc:	71 05       	cpc	r23, r1
     5de:	d9 f0       	breq	.+54     	; 0x616 <cb_filter1+0x74>
     5e0:	65 30       	cpi	r22, 0x05	; 5
     5e2:	71 05       	cpc	r23, r1
     5e4:	9c f0       	brlt	.+38     	; 0x60c <cb_filter1+0x6a>
     5e6:	66 30       	cpi	r22, 0x06	; 6
     5e8:	71 05       	cpc	r23, r1
     5ea:	d9 f0       	breq	.+54     	; 0x622 <cb_filter1+0x80>
     5ec:	67 30       	cpi	r22, 0x07	; 7
     5ee:	71 05       	cpc	r23, r1
     5f0:	09 f5       	brne	.+66     	; 0x634 <cb_filter1+0x92>
     5f2:	1d c0       	rjmp	.+58     	; 0x62e <cb_filter1+0x8c>
		case 0:			//1k lowpass filter (101)
			PORTF != (1<<7);
     5f4:	81 b3       	in	r24, 0x11	; 17
     5f6:	0c c0       	rjmp	.+24     	; 0x610 <cb_filter1+0x6e>
			PORTE = (1<<6);
			PORTD != (1<<7);
			break;

		case 1:			//1K-100K Bandpass (110)
			PORTF != (1<<7);
     5f8:	81 b3       	in	r24, 0x11	; 17
			PORTE != (1<<6);
     5fa:	8e b1       	in	r24, 0x0e	; 14
     5fc:	15 c0       	rjmp	.+42     	; 0x628 <cb_filter1+0x86>
			PORTD = (1<<7);
			break;

		case 2:			//100K-250K Bandpass (011)
			PORTF = (1<<7);
     5fe:	80 e8       	ldi	r24, 0x80	; 128
     600:	81 bb       	out	0x11, r24	; 17
     602:	16 c0       	rjmp	.+44     	; 0x630 <cb_filter1+0x8e>
			PORTE != (1<<6);
			PORTD != (1<<7);
			break;

		case 3:			//250K-500K Bandpass (010)
			PORTF = (1<<7);
     604:	80 e8       	ldi	r24, 0x80	; 128
     606:	81 bb       	out	0x11, r24	; 17
			PORTE != (1<<6);
     608:	9e b1       	in	r25, 0x0e	; 14
     60a:	0f c0       	rjmp	.+30     	; 0x62a <cb_filter1+0x88>
			PORTD = (1<<7);
			break;

		case 4:			//500-2M Bandpass (001)
			PORTF = (1<<7);
     60c:	80 e8       	ldi	r24, 0x80	; 128
     60e:	81 bb       	out	0x11, r24	; 17
			PORTE = (1<<6);
     610:	80 e4       	ldi	r24, 0x40	; 64
     612:	8e b9       	out	0x0e, r24	; 14
     614:	0e c0       	rjmp	.+28     	; 0x632 <cb_filter1+0x90>
			PORTD != (1<<7);
			break;

		case 5:			//1M Highpass filter (000)
			PORTF = (1<<7);
     616:	90 e8       	ldi	r25, 0x80	; 128
     618:	91 bb       	out	0x11, r25	; 17
			PORTE = (1<<6);
     61a:	80 e4       	ldi	r24, 0x40	; 64
     61c:	8e b9       	out	0x0e, r24	; 14
			PORTD = (1<<7);
     61e:	9b b9       	out	0x0b, r25	; 11
     620:	09 c0       	rjmp	.+18     	; 0x634 <cb_filter1+0x92>
			break;

		case 6:			//60Hz Notch (throughput) (100)
			PORTF != (1<<7);
     622:	81 b3       	in	r24, 0x11	; 17
			PORTE = (1<<6);
     624:	80 e4       	ldi	r24, 0x40	; 64
     626:	8e b9       	out	0x0e, r24	; 14
			PORTD = (1<<7);
     628:	80 e8       	ldi	r24, 0x80	; 128
     62a:	8b b9       	out	0x0b, r24	; 11
     62c:	03 c0       	rjmp	.+6      	; 0x634 <cb_filter1+0x92>
			break;

		case 7:			//Aux input (111)
			PORTF != (1<<7);
     62e:	81 b3       	in	r24, 0x11	; 17
			PORTE != (1<<6);
     630:	8e b1       	in	r24, 0x0e	; 14
			PORTD != (1<<7);
     632:	8b b1       	in	r24, 0x0b	; 11
			break;
	}

}
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	cf 91       	pop	r28
     63a:	df 91       	pop	r29
     63c:	08 95       	ret

0000063e <cb_filter2>:
    SPI_MaterTransmit(val);
    UNSELECT0();

}

void cb_filter2(char *param) {		//current filter MUX decision 
     63e:	df 93       	push	r29
     640:	cf 93       	push	r28
     642:	00 d0       	rcall	.+0      	; 0x644 <cb_filter2+0x6>
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
   	char *s;
	int16_t val;
	s = param;
     648:	9a 83       	std	Y+2, r25	; 0x02
     64a:	89 83       	std	Y+1, r24	; 0x01
	val = strtol(param,&s,16);
     64c:	be 01       	movw	r22, r28
     64e:	6f 5f       	subi	r22, 0xFF	; 255
     650:	7f 4f       	sbci	r23, 0xFF	; 255
     652:	40 e1       	ldi	r20, 0x10	; 16
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	3c d6       	rcall	.+3192   	; 0x12d0 <strtol>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
				PORTD = ((PORTD | LEDMask) & ~ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
     65c:	98 e0       	ldi	r25, 0x08	; 8
     65e:	05 c0       	rjmp	.+10     	; 0x66a <cb_filter2+0x2c>
     660:	8b b1       	in	r24, 0x0b	; 11
     662:	89 27       	eor	r24, r25
     664:	8b b9       	out	0x0b, r24	; 11

    	for (int i=0;i<val;i++) {
     666:	2f 5f       	subi	r18, 0xFF	; 255
     668:	3f 4f       	sbci	r19, 0xFF	; 255
     66a:	26 17       	cp	r18, r22
     66c:	37 07       	cpc	r19, r23
     66e:	c4 f3       	brlt	.-16     	; 0x660 <cb_filter2+0x22>
        LEDs_ToggleLEDs(LEDS_LED1);
	}    

	
	switch(val) {
     670:	63 30       	cpi	r22, 0x03	; 3
     672:	71 05       	cpc	r23, r1
     674:	01 f1       	breq	.+64     	; 0x6b6 <cb_filter2+0x78>
     676:	64 30       	cpi	r22, 0x04	; 4
     678:	71 05       	cpc	r23, r1
     67a:	4c f4       	brge	.+18     	; 0x68e <cb_filter2+0x50>
     67c:	61 30       	cpi	r22, 0x01	; 1
     67e:	71 05       	cpc	r23, r1
     680:	a9 f0       	breq	.+42     	; 0x6ac <cb_filter2+0x6e>
     682:	62 30       	cpi	r22, 0x02	; 2
     684:	71 05       	cpc	r23, r1
     686:	a4 f4       	brge	.+40     	; 0x6b0 <cb_filter2+0x72>
     688:	67 2b       	or	r22, r23
     68a:	71 f0       	breq	.+28     	; 0x6a8 <cb_filter2+0x6a>
     68c:	21 c0       	rjmp	.+66     	; 0x6d0 <cb_filter2+0x92>
     68e:	65 30       	cpi	r22, 0x05	; 5
     690:	71 05       	cpc	r23, r1
     692:	b9 f0       	breq	.+46     	; 0x6c2 <cb_filter2+0x84>
     694:	65 30       	cpi	r22, 0x05	; 5
     696:	71 05       	cpc	r23, r1
     698:	8c f0       	brlt	.+34     	; 0x6bc <cb_filter2+0x7e>
     69a:	66 30       	cpi	r22, 0x06	; 6
     69c:	71 05       	cpc	r23, r1
     69e:	a1 f0       	breq	.+40     	; 0x6c8 <cb_filter2+0x8a>
     6a0:	67 30       	cpi	r22, 0x07	; 7
     6a2:	71 05       	cpc	r23, r1
     6a4:	a9 f4       	brne	.+42     	; 0x6d0 <cb_filter2+0x92>
     6a6:	13 c0       	rjmp	.+38     	; 0x6ce <cb_filter2+0x90>
		case 0:			//1k lowpass filter (010)
			PORTF = (1<<4)|(1<<6);
     6a8:	80 e5       	ldi	r24, 0x50	; 80
     6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <cb_filter2+0x7a>
			PORTF != (1<<5);
			break;

		case 1:			//1K-100K Bandpass (001)
			PORTF = (1<<4)|(1<<5);
     6ac:	80 e3       	ldi	r24, 0x30	; 48
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <cb_filter2+0x7a>
			PORTF != (1<<6);
			break;

		case 2:			//100K-250K Bandpass (110)
			PORTF != (1<<4)|(1<<5);
     6b0:	81 b3       	in	r24, 0x11	; 17
			PORTF = (1<<6);
     6b2:	80 e4       	ldi	r24, 0x40	; 64
     6b4:	0a c0       	rjmp	.+20     	; 0x6ca <cb_filter2+0x8c>
			break;

		case 3:			//250K-500K Bandpass (011)
			PORTF = (1<<4);
     6b6:	80 e1       	ldi	r24, 0x10	; 16
     6b8:	81 bb       	out	0x11, r24	; 17
     6ba:	09 c0       	rjmp	.+18     	; 0x6ce <cb_filter2+0x90>
			PORTF != (1<<5)|(1<<6);
			break;

		case 4:			//500-2M Bandpass (100)
			PORTF != (1<<4);
     6bc:	81 b3       	in	r24, 0x11	; 17
			PORTF = (1<<5)|(1<<6);
     6be:	80 e6       	ldi	r24, 0x60	; 96
     6c0:	04 c0       	rjmp	.+8      	; 0x6ca <cb_filter2+0x8c>
			break;

		case 5:			//1M Highpass filter (101)
			PORTF != (1<<4)|(1<<6);
     6c2:	81 b3       	in	r24, 0x11	; 17
			PORTF = (1<<5);
     6c4:	80 e2       	ldi	r24, 0x20	; 32
     6c6:	01 c0       	rjmp	.+2      	; 0x6ca <cb_filter2+0x8c>
			break;

		case 6:			//60Hz Notch (throughput) (000)
			PORTF = (1<<4)|(1<<5)|(1<<6);
     6c8:	80 e7       	ldi	r24, 0x70	; 112
     6ca:	81 bb       	out	0x11, r24	; 17
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <cb_filter2+0x92>
			break;

		case 7:			//Aux input (111)
			PORTF != (1<<4)|(1<<5)|(1<<6);
     6ce:	81 b3       	in	r24, 0x11	; 17
			break;
	}	

}
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	08 95       	ret

000006da <cb_gain2>:
    SPI_MaterTransmit(val);
    UNSELECT1();

}

void cb_gain2(char *param) {
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <cb_gain2+0x6>
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
    char *s;
    int16_t val;
    s = param;
     6e4:	9a 83       	std	Y+2, r25	; 0x02
     6e6:	89 83       	std	Y+1, r24	; 0x01
    val = strtol(param,&s,16);
     6e8:	be 01       	movw	r22, r28
     6ea:	6f 5f       	subi	r22, 0xFF	; 255
     6ec:	7f 4f       	sbci	r23, 0xFF	; 255
     6ee:	40 e1       	ldi	r20, 0x10	; 16
     6f0:	50 e0       	ldi	r21, 0x00	; 0
     6f2:	ee d5       	rcall	.+3036   	; 0x12d0 <strtol>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	98 e0       	ldi	r25, 0x08	; 8
     6fa:	05 c0       	rjmp	.+10     	; 0x706 <cb_gain2+0x2c>
     6fc:	8b b1       	in	r24, 0x0b	; 11
     6fe:	89 27       	eor	r24, r25
     700:	8b b9       	out	0x0b, r24	; 11
    for (int i=0;i<val;i++) {
     702:	2f 5f       	subi	r18, 0xFF	; 255
     704:	3f 4f       	sbci	r19, 0xFF	; 255
     706:	26 17       	cp	r18, r22
     708:	37 07       	cpc	r19, r23
     70a:	c4 f3       	brlt	.-16     	; 0x6fc <cb_gain2+0x22>
        LEDs_ToggleLEDs(LEDS_LED1);
    }
    SELECT0();
     70c:	28 98       	cbi	0x05, 0	; 5
    SPI_MaterTransmit(val);
     70e:	86 2f       	mov	r24, r22
     710:	12 de       	rcall	.-988    	; 0x336 <SPI_MaterTransmit>
    UNSELECT0();
     712:	28 9a       	sbi	0x05, 0	; 5

}
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	cf 91       	pop	r28
     71a:	df 91       	pop	r29
     71c:	08 95       	ret

0000071e <cb_gain1>:
#include "commands.h"
#include <stdlib.h>
#include "SPI.h"


void cb_gain1(char *param) {
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	00 d0       	rcall	.+0      	; 0x724 <cb_gain1+0x6>
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
    char *s;
    int16_t val;
    s = param;
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	89 83       	std	Y+1, r24	; 0x01
    val = strtol(param,&s,16);
     72c:	be 01       	movw	r22, r28
     72e:	6f 5f       	subi	r22, 0xFF	; 255
     730:	7f 4f       	sbci	r23, 0xFF	; 255
     732:	40 e1       	ldi	r20, 0x10	; 16
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	cc d5       	rcall	.+2968   	; 0x12d0 <strtol>
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	98 e0       	ldi	r25, 0x08	; 8
     73e:	05 c0       	rjmp	.+10     	; 0x74a <cb_gain1+0x2c>
     740:	8b b1       	in	r24, 0x0b	; 11
     742:	89 27       	eor	r24, r25
     744:	8b b9       	out	0x0b, r24	; 11
    for (int i=0;i<val;i++) {
     746:	2f 5f       	subi	r18, 0xFF	; 255
     748:	3f 4f       	sbci	r19, 0xFF	; 255
     74a:	26 17       	cp	r18, r22
     74c:	37 07       	cpc	r19, r23
     74e:	c4 f3       	brlt	.-16     	; 0x740 <cb_gain1+0x22>
        LEDs_ToggleLEDs(LEDS_LED1);
    }
    SELECT1();
     750:	2c 98       	cbi	0x05, 4	; 5
    SPI_MaterTransmit(val);
     752:	86 2f       	mov	r24, r22
     754:	f0 dd       	rcall	.-1056   	; 0x336 <SPI_MaterTransmit>
    UNSELECT1();
     756:	2c 9a       	sbi	0x05, 4	; 5

}
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	cf 91       	pop	r28
     75e:	df 91       	pop	r29
     760:	08 95       	ret

00000762 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     762:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     766:	80 91 eb 00 	lds	r24, 0x00EB
     76a:	81 60       	ori	r24, 0x01	; 1
     76c:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     770:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
     774:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     778:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     77c:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     780:	88 1f       	adc	r24, r24
     782:	88 27       	eor	r24, r24
     784:	88 1f       	adc	r24, r24
     786:	08 95       	ret

00000788 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     788:	80 91 bf 01 	lds	r24, 0x01BF
     78c:	88 23       	and	r24, r24
     78e:	8c f4       	brge	.+34     	; 0x7b2 <Endpoint_ClearStatusStage+0x2a>
     790:	03 c0       	rjmp	.+6      	; 0x798 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     792:	8e b3       	in	r24, 0x1e	; 30
     794:	88 23       	and	r24, r24
     796:	b1 f0       	breq	.+44     	; 0x7c4 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     798:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     79c:	82 ff       	sbrs	r24, 2
     79e:	f9 cf       	rjmp	.-14     	; 0x792 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7a0:	80 91 e8 00 	lds	r24, 0x00E8
     7a4:	8b 77       	andi	r24, 0x7B	; 123
     7a6:	80 93 e8 00 	sts	0x00E8, r24
     7aa:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7ac:	8e b3       	in	r24, 0x1e	; 30
     7ae:	88 23       	and	r24, r24
     7b0:	49 f0       	breq	.+18     	; 0x7c4 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7b2:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     7b6:	80 ff       	sbrs	r24, 0
     7b8:	f9 cf       	rjmp	.-14     	; 0x7ac <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7ba:	80 91 e8 00 	lds	r24, 0x00E8
     7be:	8e 77       	andi	r24, 0x7E	; 126
     7c0:	80 93 e8 00 	sts	0x00E8, r24
     7c4:	08 95       	ret

000007c6 <Endpoint_WaitUntilReady>:
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     7c6:	40 91 e4 00 	lds	r20, 0x00E4
     7ca:	50 91 e5 00 	lds	r21, 0x00E5
     7ce:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     7d0:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     7d4:	80 ff       	sbrs	r24, 0
     7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7d8:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
     7dc:	80 ff       	sbrs	r24, 0
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <Endpoint_WaitUntilReady+0x24>
     7e0:	21 c0       	rjmp	.+66     	; 0x824 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7e2:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     7e6:	82 fd       	sbrc	r24, 2
     7e8:	1d c0       	rjmp	.+58     	; 0x824 <Endpoint_WaitUntilReady+0x5e>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7ea:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7ec:	88 23       	and	r24, r24
     7ee:	11 f4       	brne	.+4      	; 0x7f4 <Endpoint_WaitUntilReady+0x2e>
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7f4:	85 30       	cpi	r24, 0x05	; 5
     7f6:	11 f4       	brne	.+4      	; 0x7fc <Endpoint_WaitUntilReady+0x36>
     7f8:	83 e0       	ldi	r24, 0x03	; 3
     7fa:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     7fc:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     800:	85 ff       	sbrs	r24, 5
     802:	02 c0       	rjmp	.+4      	; 0x808 <Endpoint_WaitUntilReady+0x42>
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	08 95       	ret
     808:	80 91 e4 00 	lds	r24, 0x00E4
     80c:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     810:	84 17       	cp	r24, r20
     812:	95 07       	cpc	r25, r21
     814:	e9 f2       	breq	.-70     	; 0x7d0 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     816:	22 23       	and	r18, r18
     818:	11 f4       	brne	.+4      	; 0x81e <Endpoint_WaitUntilReady+0x58>
     81a:	84 e0       	ldi	r24, 0x04	; 4
     81c:	08 95       	ret
     81e:	21 50       	subi	r18, 0x01	; 1
     820:	ac 01       	movw	r20, r24
     822:	d6 cf       	rjmp	.-84     	; 0x7d0 <Endpoint_WaitUntilReady+0xa>
     824:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     826:	08 95       	ret

00000828 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     830:	49 d0       	rcall	.+146    	; 0x8c4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     832:	50 d0       	rcall	.+160    	; 0x8d4 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     834:	08 ed       	ldi	r16, 0xD8	; 216
     836:	10 e0       	ldi	r17, 0x00	; 0
     838:	f8 01       	movw	r30, r16
     83a:	80 81       	ld	r24, Z

				USBCON = (Temp & ~(1 << USBE));
     83c:	98 2f       	mov	r25, r24
     83e:	9f 77       	andi	r25, 0x7F	; 127
     840:	90 83       	st	Z, r25
				USBCON = (Temp |  (1 << USBE));
     842:	80 68       	ori	r24, 0x80	; 128
     844:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     846:	80 81       	ld	r24, Z
     848:	8f 7d       	andi	r24, 0xDF	; 223
     84a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     84c:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
     84e:	1e ba       	out	0x1e, r1	; 30
	USB_ConfigurationNumber  = 0;
     850:	10 92 bd 01 	sts	0x01BD, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     854:	10 92 bc 01 	sts	0x01BC, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     858:	10 92 bb 01 	sts	0x01BB, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     85c:	80 ee       	ldi	r24, 0xE0	; 224
     85e:	e8 2e       	mov	r14, r24
     860:	f1 2c       	mov	r15, r1
     862:	f7 01       	movw	r30, r14
     864:	80 81       	ld	r24, Z
     866:	8b 7f       	andi	r24, 0xFB	; 251
     868:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     86a:	f8 01       	movw	r30, r16
     86c:	80 81       	ld	r24, Z
     86e:	81 60       	ori	r24, 0x01	; 1
     870:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	42 e0       	ldi	r20, 0x02	; 2
     878:	74 df       	rcall	.-280    	; 0x762 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     87a:	e1 ee       	ldi	r30, 0xE1	; 225
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	8e 7f       	andi	r24, 0xFE	; 254
     882:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     884:	e2 ee       	ldi	r30, 0xE2	; 226
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	81 60       	ori	r24, 0x01	; 1
     88c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     88e:	80 81       	ld	r24, Z
     890:	88 60       	ori	r24, 0x08	; 8
     892:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     894:	f7 01       	movw	r30, r14
     896:	80 81       	ld	r24, Z
     898:	8e 7f       	andi	r24, 0xFE	; 254
     89a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     89c:	f8 01       	movw	r30, r16
     89e:	80 81       	ld	r24, Z
     8a0:	80 61       	ori	r24, 0x10	; 16
     8a2:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	08 95       	ret

000008ae <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     8ae:	e7 ed       	ldi	r30, 0xD7	; 215
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	81 60       	ori	r24, 0x01	; 1
     8b6:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
     8b8:	8a e4       	ldi	r24, 0x4A	; 74
     8ba:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	80 93 be 01 	sts	0x01BE, r24

	USB_ResetInterface();
}
     8c2:	b2 cf       	rjmp	.-156    	; 0x828 <USB_ResetInterface>

000008c4 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     8c4:	e8 ed       	ldi	r30, 0xD8	; 216
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	8e 7f       	andi	r24, 0xFE	; 254
     8cc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     8ce:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     8d2:	08 95       	ret

000008d4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     8d4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     8d8:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     8dc:	08 95       	ret

000008de <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     8de:	1f 92       	push	r1
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	0f 92       	push	r0
     8e6:	11 24       	eor	r1, r1
     8e8:	1f 93       	push	r17
     8ea:	2f 93       	push	r18
     8ec:	3f 93       	push	r19
     8ee:	4f 93       	push	r20
     8f0:	5f 93       	push	r21
     8f2:	6f 93       	push	r22
     8f4:	7f 93       	push	r23
     8f6:	8f 93       	push	r24
     8f8:	9f 93       	push	r25
     8fa:	af 93       	push	r26
     8fc:	bf 93       	push	r27
     8fe:	ef 93       	push	r30
     900:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     902:	e9 ee       	ldi	r30, 0xE9	; 233
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	10 81       	ld	r17, Z
     908:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     90a:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     90c:	e0 ef       	ldi	r30, 0xF0	; 240
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	87 7f       	andi	r24, 0xF7	; 247
     914:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     916:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     918:	ef d1       	rcall	.+990    	; 0xcf8 <USB_Device_ProcessControlRequest>
     91a:	a9 ee       	ldi	r26, 0xE9	; 233
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     920:	e0 ef       	ldi	r30, 0xF0	; 240
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	88 60       	ori	r24, 0x08	; 8
     928:	80 83       	st	Z, r24
     92a:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     92c:	ff 91       	pop	r31
     92e:	ef 91       	pop	r30
     930:	bf 91       	pop	r27
     932:	af 91       	pop	r26
     934:	9f 91       	pop	r25
     936:	8f 91       	pop	r24
     938:	7f 91       	pop	r23
     93a:	6f 91       	pop	r22
     93c:	5f 91       	pop	r21
     93e:	4f 91       	pop	r20
     940:	3f 91       	pop	r19
     942:	2f 91       	pop	r18
     944:	1f 91       	pop	r17
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f 90       	pop	r0
     94c:	1f 90       	pop	r1
     94e:	18 95       	reti

00000950 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     950:	1f 92       	push	r1
     952:	0f 92       	push	r0
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	0f 92       	push	r0
     958:	11 24       	eor	r1, r1
     95a:	2f 93       	push	r18
     95c:	3f 93       	push	r19
     95e:	4f 93       	push	r20
     960:	5f 93       	push	r21
     962:	6f 93       	push	r22
     964:	7f 93       	push	r23
     966:	8f 93       	push	r24
     968:	9f 93       	push	r25
     96a:	af 93       	push	r26
     96c:	bf 93       	push	r27
     96e:	ef 93       	push	r30
     970:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     972:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     976:	82 ff       	sbrs	r24, 2
     978:	0a c0       	rjmp	.+20     	; 0x98e <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     97a:	80 91 e2 00 	lds	r24, 0x00E2
     97e:	82 ff       	sbrs	r24, 2
     980:	06 c0       	rjmp	.+12     	; 0x98e <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     982:	80 91 e1 00 	lds	r24, 0x00E1
     986:	8b 7f       	andi	r24, 0xFB	; 251
     988:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     98c:	37 d3       	rcall	.+1646   	; 0xffc <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     98e:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     992:	80 ff       	sbrs	r24, 0
     994:	1c c0       	rjmp	.+56     	; 0x9ce <__vector_10+0x7e>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     996:	80 91 d8 00 	lds	r24, 0x00D8
     99a:	80 ff       	sbrs	r24, 0
     99c:	18 c0       	rjmp	.+48     	; 0x9ce <__vector_10+0x7e>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     99e:	80 91 da 00 	lds	r24, 0x00DA
     9a2:	8e 7f       	andi	r24, 0xFE	; 254
     9a4:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     9a8:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     9ac:	80 ff       	sbrs	r24, 0
     9ae:	0c c0       	rjmp	.+24     	; 0x9c8 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     9b0:	80 e1       	ldi	r24, 0x10	; 16
     9b2:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     9b4:	89 b5       	in	r24, 0x29	; 41
     9b6:	82 60       	ori	r24, 0x02	; 2
     9b8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     9ba:	09 b4       	in	r0, 0x29	; 41
     9bc:	00 fe       	sbrs	r0, 0
     9be:	fd cf       	rjmp	.-6      	; 0x9ba <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
     9c4:	df db       	rcall	.-2114   	; 0x184 <EVENT_USB_Device_Connect>
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <__vector_10+0x7e>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     9c8:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     9ca:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
     9cc:	dc db       	rcall	.-2120   	; 0x186 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     9ce:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     9d2:	80 ff       	sbrs	r24, 0
     9d4:	17 c0       	rjmp	.+46     	; 0xa04 <__vector_10+0xb4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     9d6:	80 91 e2 00 	lds	r24, 0x00E2
     9da:	80 ff       	sbrs	r24, 0
     9dc:	13 c0       	rjmp	.+38     	; 0xa04 <__vector_10+0xb4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9de:	80 91 e2 00 	lds	r24, 0x00E2
     9e2:	8e 7f       	andi	r24, 0xFE	; 254
     9e4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9e8:	80 91 e2 00 	lds	r24, 0x00E2
     9ec:	80 61       	ori	r24, 0x10	; 16
     9ee:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     9f2:	80 91 d8 00 	lds	r24, 0x00D8
     9f6:	80 62       	ori	r24, 0x20	; 32
     9f8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     9fc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     9fe:	85 e0       	ldi	r24, 0x05	; 5
     a00:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
     a02:	fc d2       	rcall	.+1528   	; 0xffc <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     a04:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     a08:	84 ff       	sbrs	r24, 4
     a0a:	2d c0       	rjmp	.+90     	; 0xa66 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     a0c:	80 91 e2 00 	lds	r24, 0x00E2
     a10:	84 ff       	sbrs	r24, 4
     a12:	29 c0       	rjmp	.+82     	; 0xa66 <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     a14:	80 e1       	ldi	r24, 0x10	; 16
     a16:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     a18:	89 b5       	in	r24, 0x29	; 41
     a1a:	82 60       	ori	r24, 0x02	; 2
     a1c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a1e:	09 b4       	in	r0, 0x29	; 41
     a20:	00 fe       	sbrs	r0, 0
     a22:	fd cf       	rjmp	.-6      	; 0xa1e <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     a24:	80 91 d8 00 	lds	r24, 0x00D8
     a28:	8f 7d       	andi	r24, 0xDF	; 223
     a2a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     a2e:	80 91 e1 00 	lds	r24, 0x00E1
     a32:	8f 7e       	andi	r24, 0xEF	; 239
     a34:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     a38:	80 91 e2 00 	lds	r24, 0x00E2
     a3c:	8f 7e       	andi	r24, 0xEF	; 239
     a3e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a42:	80 91 e2 00 	lds	r24, 0x00E2
     a46:	81 60       	ori	r24, 0x01	; 1
     a48:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_ConfigurationNumber)
     a4c:	80 91 bd 01 	lds	r24, 0x01BD
     a50:	88 23       	and	r24, r24
     a52:	31 f4       	brne	.+12     	; 0xa60 <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a54:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a58:	87 fd       	sbrc	r24, 7
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <__vector_10+0x110>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	01 c0       	rjmp	.+2      	; 0xa62 <__vector_10+0x112>
     a60:	84 e0       	ldi	r24, 0x04	; 4
     a62:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     a64:	cb d2       	rcall	.+1430   	; 0xffc <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a66:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a6a:	83 ff       	sbrs	r24, 3
     a6c:	26 c0       	rjmp	.+76     	; 0xaba <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     a6e:	80 91 e2 00 	lds	r24, 0x00E2
     a72:	83 ff       	sbrs	r24, 3
     a74:	22 c0       	rjmp	.+68     	; 0xaba <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     a76:	80 91 e1 00 	lds	r24, 0x00E1
     a7a:	87 7f       	andi	r24, 0xF7	; 247
     a7c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState         = DEVICE_STATE_Default;
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
     a84:	10 92 bd 01 	sts	0x01BD, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a88:	80 91 e1 00 	lds	r24, 0x00E1
     a8c:	8e 7f       	andi	r24, 0xFE	; 254
     a8e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a92:	80 91 e2 00 	lds	r24, 0x00E2
     a96:	8e 7f       	andi	r24, 0xFE	; 254
     a98:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a9c:	80 91 e2 00 	lds	r24, 0x00E2
     aa0:	80 61       	ori	r24, 0x10	; 16
     aa2:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	42 e0       	ldi	r20, 0x02	; 2
     aac:	5a de       	rcall	.-844    	; 0x762 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     aae:	80 91 f0 00 	lds	r24, 0x00F0
     ab2:	88 60       	ori	r24, 0x08	; 8
     ab4:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     ab8:	a1 d2       	rcall	.+1346   	; 0xffc <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	bf 91       	pop	r27
     ac0:	af 91       	pop	r26
     ac2:	9f 91       	pop	r25
     ac4:	8f 91       	pop	r24
     ac6:	7f 91       	pop	r23
     ac8:	6f 91       	pop	r22
     aca:	5f 91       	pop	r21
     acc:	4f 91       	pop	r20
     ace:	3f 91       	pop	r19
     ad0:	2f 91       	pop	r18
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	1f 90       	pop	r1
     ada:	18 95       	reti

00000adc <Endpoint_Write_Control_Stream_LE>:
     adc:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     ade:	40 91 c5 01 	lds	r20, 0x01C5
     ae2:	50 91 c6 01 	lds	r21, 0x01C6
     ae6:	46 17       	cp	r20, r22
     ae8:	57 07       	cpc	r21, r23
     aea:	18 f4       	brcc	.+6      	; 0xaf2 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     aec:	f9 01       	movw	r30, r18
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	44 c0       	rjmp	.+136    	; 0xb7a <__stack+0x7b>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     af2:	61 15       	cp	r22, r1
     af4:	71 05       	cpc	r23, r1
     af6:	11 f0       	breq	.+4      	; 0xafc <Endpoint_Write_Control_Stream_LE+0x20>
     af8:	ab 01       	movw	r20, r22
     afa:	f8 cf       	rjmp	.-16     	; 0xaec <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     afc:	80 91 e8 00 	lds	r24, 0x00E8
     b00:	8e 77       	andi	r24, 0x7E	; 126
     b02:	80 93 e8 00 	sts	0x00E8, r24
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	f0 cf       	rjmp	.-32     	; 0xaec <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b0c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b0e:	88 23       	and	r24, r24
     b10:	09 f4       	brne	.+2      	; 0xb14 <__stack+0x15>
     b12:	44 c0       	rjmp	.+136    	; 0xb9c <__stack+0x9d>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b14:	85 30       	cpi	r24, 0x05	; 5
     b16:	09 f4       	brne	.+2      	; 0xb1a <__stack+0x1b>
     b18:	43 c0       	rjmp	.+134    	; 0xba0 <__stack+0xa1>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b1a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     b1e:	83 ff       	sbrs	r24, 3
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <__stack+0x27>
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b26:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     b2a:	82 fd       	sbrc	r24, 2
     b2c:	31 c0       	rjmp	.+98     	; 0xb90 <__stack+0x91>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b2e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     b32:	80 ff       	sbrs	r24, 0
     b34:	22 c0       	rjmp	.+68     	; 0xb7a <__stack+0x7b>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     b36:	80 91 f3 00 	lds	r24, 0x00F3
     b3a:	90 91 f2 00 	lds	r25, 0x00F2
     b3e:	78 2f       	mov	r23, r24
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	29 2f       	mov	r18, r25
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	26 2b       	or	r18, r22
     b48:	37 2b       	or	r19, r23
     b4a:	07 c0       	rjmp	.+14     	; 0xb5a <__stack+0x5b>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b4c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b4e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     b52:	41 50       	subi	r20, 0x01	; 1
     b54:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     b56:	2f 5f       	subi	r18, 0xFF	; 255
     b58:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     b5a:	41 15       	cp	r20, r1
     b5c:	51 05       	cpc	r21, r1
     b5e:	19 f0       	breq	.+6      	; 0xb66 <__stack+0x67>
     b60:	28 30       	cpi	r18, 0x08	; 8
     b62:	31 05       	cpc	r19, r1
     b64:	98 f3       	brcs	.-26     	; 0xb4c <__stack+0x4d>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	28 30       	cpi	r18, 0x08	; 8
     b6a:	31 05       	cpc	r19, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <__stack+0x71>
     b6e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b70:	80 91 e8 00 	lds	r24, 0x00E8
     b74:	8e 77       	andi	r24, 0x7E	; 126
     b76:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b7a:	41 15       	cp	r20, r1
     b7c:	51 05       	cpc	r21, r1
     b7e:	31 f6       	brne	.-116    	; 0xb0c <__stack+0xd>
     b80:	99 23       	and	r25, r25
     b82:	21 f6       	brne	.-120    	; 0xb0c <__stack+0xd>
     b84:	05 c0       	rjmp	.+10     	; 0xb90 <__stack+0x91>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b86:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b88:	88 23       	and	r24, r24
     b8a:	41 f0       	breq	.+16     	; 0xb9c <__stack+0x9d>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b8c:	85 30       	cpi	r24, 0x05	; 5
     b8e:	41 f0       	breq	.+16     	; 0xba0 <__stack+0xa1>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b90:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     b94:	82 ff       	sbrs	r24, 2
     b96:	f7 cf       	rjmp	.-18     	; 0xb86 <__stack+0x87>
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	08 95       	ret
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	08 95       	ret
     ba0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     ba2:	08 95       	ret

00000ba4 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     ba4:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     ba6:	61 15       	cp	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	29 f4       	brne	.+10     	; 0xbb6 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bac:	80 91 e8 00 	lds	r24, 0x00E8
     bb0:	8b 77       	andi	r24, 0x7B	; 123
     bb2:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     bb6:	f9 01       	movw	r30, r18
     bb8:	26 c0       	rjmp	.+76     	; 0xc06 <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     bba:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     bbc:	88 23       	and	r24, r24
     bbe:	91 f1       	breq	.+100    	; 0xc24 <Endpoint_Read_Control_Stream_LE+0x80>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     bc0:	85 30       	cpi	r24, 0x05	; 5
     bc2:	91 f1       	breq	.+100    	; 0xc28 <Endpoint_Read_Control_Stream_LE+0x84>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bc4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     bc8:	83 ff       	sbrs	r24, 3
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <Endpoint_Read_Control_Stream_LE+0x2c>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bd0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     bd4:	82 ff       	sbrs	r24, 2
     bd6:	f1 cf       	rjmp	.-30     	; 0xbba <Endpoint_Read_Control_Stream_LE+0x16>
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     bda:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     bde:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     be0:	61 50       	subi	r22, 0x01	; 1
     be2:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     be4:	59 f0       	breq	.+22     	; 0xbfc <Endpoint_Read_Control_Stream_LE+0x58>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     be6:	20 91 f3 00 	lds	r18, 0x00F3
     bea:	80 91 f2 00 	lds	r24, 0x00F2
     bee:	32 2f       	mov	r19, r18
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	82 2b       	or	r24, r18
     bf6:	93 2b       	or	r25, r19
     bf8:	89 2b       	or	r24, r25
     bfa:	79 f7       	brne	.-34     	; 0xbda <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bfc:	80 91 e8 00 	lds	r24, 0x00E8
     c00:	8b 77       	andi	r24, 0x7B	; 123
     c02:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     c06:	61 15       	cp	r22, r1
     c08:	71 05       	cpc	r23, r1
     c0a:	b9 f6       	brne	.-82     	; 0xbba <Endpoint_Read_Control_Stream_LE+0x16>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <Endpoint_Read_Control_Stream_LE+0x74>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c0e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c10:	88 23       	and	r24, r24
     c12:	41 f0       	breq	.+16     	; 0xc24 <Endpoint_Read_Control_Stream_LE+0x80>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c14:	85 30       	cpi	r24, 0x05	; 5
     c16:	41 f0       	breq	.+16     	; 0xc28 <Endpoint_Read_Control_Stream_LE+0x84>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c18:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     c1c:	80 ff       	sbrs	r24, 0
     c1e:	f7 cf       	rjmp	.-18     	; 0xc0e <Endpoint_Read_Control_Stream_LE+0x6a>
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	08 95       	ret
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	08 95       	ret
     c28:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c2a:	08 95       	ret

00000c2c <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     c2c:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     c2e:	40 91 c5 01 	lds	r20, 0x01C5
     c32:	50 91 c6 01 	lds	r21, 0x01C6
     c36:	46 17       	cp	r20, r22
     c38:	57 07       	cpc	r21, r23
     c3a:	18 f4       	brcc	.+6      	; 0xc42 <Endpoint_Write_Control_PStream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c3c:	f9 01       	movw	r30, r18
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	45 c0       	rjmp	.+138    	; 0xccc <Endpoint_Write_Control_PStream_LE+0xa0>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     c42:	61 15       	cp	r22, r1
     c44:	71 05       	cpc	r23, r1
     c46:	11 f0       	breq	.+4      	; 0xc4c <Endpoint_Write_Control_PStream_LE+0x20>
     c48:	ab 01       	movw	r20, r22
     c4a:	f8 cf       	rjmp	.-16     	; 0xc3c <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c4c:	80 91 e8 00 	lds	r24, 0x00E8
     c50:	8e 77       	andi	r24, 0x7E	; 126
     c52:	80 93 e8 00 	sts	0x00E8, r24
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	f0 cf       	rjmp	.-32     	; 0xc3c <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c5c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c5e:	88 23       	and	r24, r24
     c60:	09 f4       	brne	.+2      	; 0xc64 <Endpoint_Write_Control_PStream_LE+0x38>
     c62:	46 c0       	rjmp	.+140    	; 0xcf0 <Endpoint_Write_Control_PStream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c64:	85 30       	cpi	r24, 0x05	; 5
     c66:	09 f4       	brne	.+2      	; 0xc6a <Endpoint_Write_Control_PStream_LE+0x3e>
     c68:	45 c0       	rjmp	.+138    	; 0xcf4 <Endpoint_Write_Control_PStream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c6a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c6e:	83 ff       	sbrs	r24, 3
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <Endpoint_Write_Control_PStream_LE+0x4a>
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c76:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     c7a:	82 fd       	sbrc	r24, 2
     c7c:	33 c0       	rjmp	.+102    	; 0xce4 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c7e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     c82:	80 ff       	sbrs	r24, 0
     c84:	23 c0       	rjmp	.+70     	; 0xccc <Endpoint_Write_Control_PStream_LE+0xa0>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     c86:	80 91 f3 00 	lds	r24, 0x00F3
     c8a:	90 91 f2 00 	lds	r25, 0x00F2
     c8e:	78 2f       	mov	r23, r24
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	29 2f       	mov	r18, r25
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	26 2b       	or	r18, r22
     c98:	37 2b       	or	r19, r23
     c9a:	08 c0       	rjmp	.+16     	; 0xcac <Endpoint_Write_Control_PStream_LE+0x80>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c9c:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c9e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     ca2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     ca4:	41 50       	subi	r20, 0x01	; 1
     ca6:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     ca8:	2f 5f       	subi	r18, 0xFF	; 255
     caa:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     cac:	41 15       	cp	r20, r1
     cae:	51 05       	cpc	r21, r1
     cb0:	19 f0       	breq	.+6      	; 0xcb8 <Endpoint_Write_Control_PStream_LE+0x8c>
     cb2:	28 30       	cpi	r18, 0x08	; 8
     cb4:	31 05       	cpc	r19, r1
     cb6:	90 f3       	brcs	.-28     	; 0xc9c <Endpoint_Write_Control_PStream_LE+0x70>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	28 30       	cpi	r18, 0x08	; 8
     cbc:	31 05       	cpc	r19, r1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <Endpoint_Write_Control_PStream_LE+0x96>
     cc0:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cc2:	80 91 e8 00 	lds	r24, 0x00E8
     cc6:	8e 77       	andi	r24, 0x7E	; 126
     cc8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ccc:	41 15       	cp	r20, r1
     cce:	51 05       	cpc	r21, r1
     cd0:	29 f6       	brne	.-118    	; 0xc5c <Endpoint_Write_Control_PStream_LE+0x30>
     cd2:	99 23       	and	r25, r25
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <Endpoint_Write_Control_PStream_LE+0xac>
     cd6:	c2 cf       	rjmp	.-124    	; 0xc5c <Endpoint_Write_Control_PStream_LE+0x30>
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <Endpoint_Write_Control_PStream_LE+0xb8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     cda:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     cdc:	88 23       	and	r24, r24
     cde:	41 f0       	breq	.+16     	; 0xcf0 <Endpoint_Write_Control_PStream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ce0:	85 30       	cpi	r24, 0x05	; 5
     ce2:	41 f0       	breq	.+16     	; 0xcf4 <Endpoint_Write_Control_PStream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ce4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     ce8:	82 ff       	sbrs	r24, 2
     cea:	f7 cf       	rjmp	.-18     	; 0xcda <Endpoint_Write_Control_PStream_LE+0xae>
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	08 95       	ret
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	08 95       	ret
     cf4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     cf6:	08 95       	ret

00000cf8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	ac 97       	sbiw	r28, 0x2c	; 44
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     d10:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
     d14:	80 93 bf 01 	sts	0x01BF, r24
     d18:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
     d1c:	80 93 c0 01 	sts	0x01C0, r24
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     d20:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     d24:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
     d28:	e1 ec       	ldi	r30, 0xC1	; 193
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
     d2c:	80 93 c1 01 	sts	0x01C1, r24
     d30:	90 93 c2 01 	sts	0x01C2, r25
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     d34:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     d38:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
     d3c:	80 93 c3 01 	sts	0x01C3, r24
     d40:	93 83       	std	Z+3, r25	; 0x03
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
     d42:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
     d46:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
     d4a:	80 93 c5 01 	sts	0x01C5, r24
     d4e:	95 83       	std	Z+5, r25	; 0x05

	EVENT_USB_Device_ControlRequest();
     d50:	1c da       	rcall	.-3016   	; 0x18a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d52:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     d56:	83 ff       	sbrs	r24, 3
     d58:	38 c1       	rjmp	.+624    	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     d5a:	80 91 bf 01 	lds	r24, 0x01BF

		switch (USB_ControlRequest.bRequest)
     d5e:	30 91 c0 01 	lds	r19, 0x01C0
     d62:	35 30       	cpi	r19, 0x05	; 5
     d64:	09 f4       	brne	.+2      	; 0xd68 <USB_Device_ProcessControlRequest+0x70>
     d66:	87 c0       	rjmp	.+270    	; 0xe76 <USB_Device_ProcessControlRequest+0x17e>
     d68:	36 30       	cpi	r19, 0x06	; 6
     d6a:	40 f4       	brcc	.+16     	; 0xd7c <USB_Device_ProcessControlRequest+0x84>
     d6c:	31 30       	cpi	r19, 0x01	; 1
     d6e:	c9 f1       	breq	.+114    	; 0xde2 <USB_Device_ProcessControlRequest+0xea>
     d70:	31 30       	cpi	r19, 0x01	; 1
     d72:	70 f0       	brcs	.+28     	; 0xd90 <USB_Device_ProcessControlRequest+0x98>
     d74:	33 30       	cpi	r19, 0x03	; 3
     d76:	09 f0       	breq	.+2      	; 0xd7a <USB_Device_ProcessControlRequest+0x82>
     d78:	28 c1       	rjmp	.+592    	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
     d7a:	33 c0       	rjmp	.+102    	; 0xde2 <USB_Device_ProcessControlRequest+0xea>
     d7c:	38 30       	cpi	r19, 0x08	; 8
     d7e:	09 f4       	brne	.+2      	; 0xd82 <USB_Device_ProcessControlRequest+0x8a>
     d80:	f7 c0       	rjmp	.+494    	; 0xf70 <USB_Device_ProcessControlRequest+0x278>
     d82:	39 30       	cpi	r19, 0x09	; 9
     d84:	09 f4       	brne	.+2      	; 0xd88 <USB_Device_ProcessControlRequest+0x90>
     d86:	06 c1       	rjmp	.+524    	; 0xf94 <USB_Device_ProcessControlRequest+0x29c>
     d88:	36 30       	cpi	r19, 0x06	; 6
     d8a:	09 f0       	breq	.+2      	; 0xd8e <USB_Device_ProcessControlRequest+0x96>
     d8c:	1e c1       	rjmp	.+572    	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
     d8e:	98 c0       	rjmp	.+304    	; 0xec0 <USB_Device_ProcessControlRequest+0x1c8>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d90:	80 38       	cpi	r24, 0x80	; 128
     d92:	21 f0       	breq	.+8      	; 0xd9c <USB_Device_ProcessControlRequest+0xa4>
     d94:	82 38       	cpi	r24, 0x82	; 130
     d96:	09 f0       	breq	.+2      	; 0xd9a <USB_Device_ProcessControlRequest+0xa2>
     d98:	18 c1       	rjmp	.+560    	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
     d9a:	08 c0       	rjmp	.+16     	; 0xdac <USB_Device_ProcessControlRequest+0xb4>
     d9c:	90 91 bb 01 	lds	r25, 0x01BB
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
     da0:	80 91 bc 01 	lds	r24, 0x01BC
     da4:	88 23       	and	r24, r24
     da6:	99 f0       	breq	.+38     	; 0xdce <USB_Device_ProcessControlRequest+0xd6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     da8:	92 60       	ori	r25, 0x02	; 2
     daa:	11 c0       	rjmp	.+34     	; 0xdce <USB_Device_ProcessControlRequest+0xd6>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     dac:	80 91 c3 01 	lds	r24, 0x01C3
     db0:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     db2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     db6:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	25 e0       	ldi	r18, 0x05	; 5
     dbe:	96 95       	lsr	r25
     dc0:	87 95       	ror	r24
     dc2:	2a 95       	dec	r18
     dc4:	e1 f7       	brne	.-8      	; 0xdbe <USB_Device_ProcessControlRequest+0xc6>
     dc6:	98 2f       	mov	r25, r24
     dc8:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     dca:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dce:	80 91 e8 00 	lds	r24, 0x00E8
     dd2:	87 7f       	andi	r24, 0xF7	; 247
     dd4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     dd8:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     ddc:	10 92 f1 00 	sts	0x00F1, r1
     de0:	d2 c0       	rjmp	.+420    	; 0xf86 <USB_Device_ProcessControlRequest+0x28e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     de2:	88 23       	and	r24, r24
     de4:	19 f0       	breq	.+6      	; 0xdec <USB_Device_ProcessControlRequest+0xf4>
     de6:	82 30       	cpi	r24, 0x02	; 2
     de8:	09 f0       	breq	.+2      	; 0xdec <USB_Device_ProcessControlRequest+0xf4>
     dea:	ef c0       	rjmp	.+478    	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	8f 71       	andi	r24, 0x1F	; 31
     df0:	90 70       	andi	r25, 0x00	; 0
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	21 f0       	breq	.+8      	; 0xdfe <USB_Device_ProcessControlRequest+0x106>
     df6:	02 97       	sbiw	r24, 0x02	; 2
     df8:	09 f0       	breq	.+2      	; 0xdfc <USB_Device_ProcessControlRequest+0x104>
     dfa:	e7 c0       	rjmp	.+462    	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
     dfc:	0c c0       	rjmp	.+24     	; 0xe16 <USB_Device_ProcessControlRequest+0x11e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     dfe:	80 91 c1 01 	lds	r24, 0x01C1
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	09 f0       	breq	.+2      	; 0xe08 <USB_Device_ProcessControlRequest+0x110>
     e06:	e1 c0       	rjmp	.+450    	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     e08:	10 92 bc 01 	sts	0x01BC, r1
     e0c:	33 30       	cpi	r19, 0x03	; 3
     e0e:	69 f5       	brne	.+90     	; 0xe6a <USB_Device_ProcessControlRequest+0x172>
     e10:	80 93 bc 01 	sts	0x01BC, r24
     e14:	2a c0       	rjmp	.+84     	; 0xe6a <USB_Device_ProcessControlRequest+0x172>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     e16:	80 91 c1 01 	lds	r24, 0x01C1
     e1a:	88 23       	and	r24, r24
     e1c:	31 f5       	brne	.+76     	; 0xe6a <USB_Device_ProcessControlRequest+0x172>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     e1e:	20 91 c3 01 	lds	r18, 0x01C3
     e22:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     e24:	09 f4       	brne	.+2      	; 0xe28 <USB_Device_ProcessControlRequest+0x130>
     e26:	d1 c0       	rjmp	.+418    	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e28:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e2c:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     e30:	80 ff       	sbrs	r24, 0
     e32:	1b c0       	rjmp	.+54     	; 0xe6a <USB_Device_ProcessControlRequest+0x172>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     e34:	33 30       	cpi	r19, 0x03	; 3
     e36:	21 f4       	brne	.+8      	; 0xe40 <USB_Device_ProcessControlRequest+0x148>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e38:	80 91 eb 00 	lds	r24, 0x00EB
     e3c:	80 62       	ori	r24, 0x20	; 32
     e3e:	13 c0       	rjmp	.+38     	; 0xe66 <USB_Device_ProcessControlRequest+0x16e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     e40:	80 91 eb 00 	lds	r24, 0x00EB
     e44:	80 61       	ori	r24, 0x10	; 16
     e46:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <USB_Device_ProcessControlRequest+0x15c>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	2a 95       	dec	r18
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <USB_Device_ProcessControlRequest+0x158>
     e58:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     e5c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     e60:	80 91 eb 00 	lds	r24, 0x00EB
     e64:	88 60       	ori	r24, 0x08	; 8
     e66:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e6a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e6e:	80 91 e8 00 	lds	r24, 0x00E8
     e72:	87 7f       	andi	r24, 0xF7	; 247
     e74:	8b c0       	rjmp	.+278    	; 0xf8c <USB_Device_ProcessControlRequest+0x294>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     e76:	88 23       	and	r24, r24
     e78:	09 f0       	breq	.+2      	; 0xe7c <USB_Device_ProcessControlRequest+0x184>
     e7a:	a7 c0       	rjmp	.+334    	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     e7c:	10 91 c1 01 	lds	r17, 0x01C1
     e80:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     e82:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     e84:	f8 94       	cli
     e86:	80 91 e8 00 	lds	r24, 0x00E8
     e8a:	87 7f       	andi	r24, 0xF7	; 247
     e8c:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     e90:	7b dc       	rcall	.-1802   	; 0x788 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e92:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     e96:	80 ff       	sbrs	r24, 0
     e98:	fc cf       	rjmp	.-8      	; 0xe92 <USB_Device_ProcessControlRequest+0x19a>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
     e9a:	80 91 e3 00 	lds	r24, 0x00E3
     e9e:	80 78       	andi	r24, 0x80	; 128
     ea0:	81 2b       	or	r24, r17
     ea2:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR |= (1 << ADDEN);
     ea6:	80 91 e3 00 	lds	r24, 0x00E3
     eaa:	80 68       	ori	r24, 0x80	; 128
     eac:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     eb0:	11 23       	and	r17, r17
     eb2:	11 f4       	brne	.+4      	; 0xeb8 <USB_Device_ProcessControlRequest+0x1c0>
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <USB_Device_ProcessControlRequest+0x1c2>
     eb8:	83 e0       	ldi	r24, 0x03	; 3
     eba:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     ebc:	0f bf       	out	0x3f, r16	; 63
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#endif
				
				GCC_MEMORY_BARRIER();
     ebe:	85 c0       	rjmp	.+266    	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ec0:	80 58       	subi	r24, 0x80	; 128
     ec2:	82 30       	cpi	r24, 0x02	; 2
     ec4:	08 f0       	brcs	.+2      	; 0xec8 <USB_Device_ProcessControlRequest+0x1d0>
     ec6:	81 c0       	rjmp	.+258    	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ec8:	80 91 c1 01 	lds	r24, 0x01C1
     ecc:	90 91 c2 01 	lds	r25, 0x01C2
     ed0:	23 e0       	ldi	r18, 0x03	; 3
     ed2:	8c 3d       	cpi	r24, 0xDC	; 220
     ed4:	92 07       	cpc	r25, r18
     ed6:	09 f0       	breq	.+2      	; 0xeda <USB_Device_ProcessControlRequest+0x1e2>
     ed8:	33 c0       	rjmp	.+102    	; 0xf40 <USB_Device_ProcessControlRequest+0x248>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     eda:	83 e0       	ldi	r24, 0x03	; 3
     edc:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     ede:	8a e2       	ldi	r24, 0x2A	; 42
     ee0:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ee2:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ee4:	f8 94       	cli
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#endif

				GCC_MEMORY_BARRIER();
     ee6:	de 01       	movw	r26, r28
     ee8:	15 96       	adiw	r26, 0x05	; 5
     eea:	6e e0       	ldi	r22, 0x0E	; 14
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     ef0:	11 e2       	ldi	r17, 0x21	; 33
     ef2:	e6 2f       	mov	r30, r22
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	10 93 57 00 	sts	0x0057, r17
     efa:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     efc:	40 ff       	sbrs	r20, 0
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <USB_Device_ProcessControlRequest+0x20e>
					{
						SerialByte >>= 4;
     f00:	82 95       	swap	r24
     f02:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     f04:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     f06:	8f 70       	andi	r24, 0x0F	; 15
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     f0c:	8a 30       	cpi	r24, 0x0A	; 10
     f0e:	18 f0       	brcs	.+6      	; 0xf16 <USB_Device_ProcessControlRequest+0x21e>
     f10:	c9 01       	movw	r24, r18
     f12:	c7 96       	adiw	r24, 0x37	; 55
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <USB_Device_ProcessControlRequest+0x222>
     f16:	c9 01       	movw	r24, r18
     f18:	c0 96       	adiw	r24, 0x30	; 48
     f1a:	8d 93       	st	X+, r24
     f1c:	9d 93       	st	X+, r25
     f1e:	4f 5f       	subi	r20, 0xFF	; 255
     f20:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f22:	44 31       	cpi	r20, 0x14	; 20
     f24:	51 05       	cpc	r21, r1
     f26:	29 f7       	brne	.-54     	; 0xef2 <USB_Device_ProcessControlRequest+0x1fa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     f28:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f2a:	80 91 e8 00 	lds	r24, 0x00E8
     f2e:	87 7f       	andi	r24, 0xF7	; 247
     f30:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     f34:	ce 01       	movw	r24, r28
     f36:	03 96       	adiw	r24, 0x03	; 3
     f38:	6a e2       	ldi	r22, 0x2A	; 42
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	cf dd       	rcall	.-1122   	; 0xadc <Endpoint_Write_Control_Stream_LE>
     f3e:	12 c0       	rjmp	.+36     	; 0xf64 <USB_Device_ProcessControlRequest+0x26c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     f40:	60 91 c3 01 	lds	r22, 0x01C3
     f44:	ae 01       	movw	r20, r28
     f46:	4f 5f       	subi	r20, 0xFF	; 255
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	bf d9       	rcall	.-3202   	; 0x2ca <CALLBACK_USB_GetDescriptor>
     f4c:	bc 01       	movw	r22, r24
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	09 f4       	brne	.+2      	; 0xf54 <USB_Device_ProcessControlRequest+0x25c>
     f52:	3b c0       	rjmp	.+118    	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
     f54:	80 91 e8 00 	lds	r24, 0x00E8
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	64 de       	rcall	.-824    	; 0xc2c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f64:	80 91 e8 00 	lds	r24, 0x00E8
     f68:	8b 77       	andi	r24, 0x7B	; 123
     f6a:	80 93 e8 00 	sts	0x00E8, r24
     f6e:	2d c0       	rjmp	.+90     	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     f70:	80 38       	cpi	r24, 0x80	; 128
     f72:	59 f5       	brne	.+86     	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f74:	80 91 e8 00 	lds	r24, 0x00E8
     f78:	87 7f       	andi	r24, 0xF7	; 247
     f7a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_ConfigurationNumber);
     f7e:	80 91 bd 01 	lds	r24, 0x01BD
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f82:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f86:	80 91 e8 00 	lds	r24, 0x00E8
     f8a:	8e 77       	andi	r24, 0x7E	; 126
     f8c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     f90:	fb db       	rcall	.-2058   	; 0x788 <Endpoint_ClearStatusStage>
     f92:	1b c0       	rjmp	.+54     	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     f94:	88 23       	and	r24, r24
     f96:	c9 f4       	brne	.+50     	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     f98:	90 91 c1 01 	lds	r25, 0x01C1
     f9c:	92 30       	cpi	r25, 0x02	; 2
     f9e:	a8 f4       	brcc	.+42     	; 0xfca <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fa0:	80 91 e8 00 	lds	r24, 0x00E8
     fa4:	87 7f       	andi	r24, 0xF7	; 247
     fa6:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     faa:	90 93 bd 01 	sts	0x01BD, r25

	Endpoint_ClearStatusStage();
     fae:	ec db       	rcall	.-2088   	; 0x788 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
     fb0:	80 91 bd 01 	lds	r24, 0x01BD
     fb4:	88 23       	and	r24, r24
     fb6:	31 f4       	brne	.+12     	; 0xfc4 <USB_Device_ProcessControlRequest+0x2cc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     fb8:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     fbc:	87 fd       	sbrc	r24, 7
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <USB_Device_ProcessControlRequest+0x2cc>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <USB_Device_ProcessControlRequest+0x2ce>
     fc4:	84 e0       	ldi	r24, 0x04	; 4
     fc6:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     fc8:	e4 d8       	rcall	.-3640   	; 0x192 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fca:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     fce:	83 ff       	sbrs	r24, 3
     fd0:	0a c0       	rjmp	.+20     	; 0xfe6 <USB_Device_ProcessControlRequest+0x2ee>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     fd2:	80 91 eb 00 	lds	r24, 0x00EB
     fd6:	80 62       	ori	r24, 0x20	; 32
     fd8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fdc:	80 91 e8 00 	lds	r24, 0x00E8
     fe0:	87 7f       	andi	r24, 0xF7	; 247
     fe2:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     fe6:	ac 96       	adiw	r28, 0x2c	; 44
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	08 95       	ret

00000ffc <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     ffc:	08 95       	ret

00000ffe <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     ffe:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    1000:	8e b3       	in	r24, 0x1e	; 30
    1002:	88 23       	and	r24, r24
    1004:	61 f0       	breq	.+24     	; 0x101e <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1006:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    100a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    100e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1012:	83 ff       	sbrs	r24, 3
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
    1016:	70 de       	rcall	.-800    	; 0xcf8 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1018:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    101a:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    101e:	1f 91       	pop	r17
    1020:	08 95       	ret

00001022 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1022:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1024:	8e b3       	in	r24, 0x1e	; 30
    1026:	84 30       	cpi	r24, 0x04	; 4
    1028:	91 f5       	brne	.+100    	; 0x108e <CDC_Device_ReceiveByte+0x6c>
    102a:	87 85       	ldd	r24, Z+15	; 0x0f
    102c:	90 89       	ldd	r25, Z+16	; 0x10
    102e:	a1 89       	ldd	r26, Z+17	; 0x11
    1030:	b2 89       	ldd	r27, Z+18	; 0x12
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	a1 05       	cpc	r26, r1
    1036:	b1 05       	cpc	r27, r1
    1038:	51 f1       	breq	.+84     	; 0x108e <CDC_Device_ReceiveByte+0x6c>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    103a:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    103c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1040:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
    1044:	82 ff       	sbrs	r24, 2
    1046:	23 c0       	rjmp	.+70     	; 0x108e <CDC_Device_ReceiveByte+0x6c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1048:	40 91 f3 00 	lds	r20, 0x00F3
    104c:	20 91 f2 00 	lds	r18, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    1050:	94 2f       	mov	r25, r20
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	82 2b       	or	r24, r18
    1058:	93 2b       	or	r25, r19
    105a:	89 2b       	or	r24, r25
    105c:	19 f4       	brne	.+6      	; 0x1064 <CDC_Device_ReceiveByte+0x42>
    105e:	6f ef       	ldi	r22, 0xFF	; 255
    1060:	7f ef       	ldi	r23, 0xFF	; 255
    1062:	04 c0       	rjmp	.+8      	; 0x106c <CDC_Device_ReceiveByte+0x4a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1064:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1068:	68 2f       	mov	r22, r24
    106a:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    106c:	40 91 f3 00 	lds	r20, 0x00F3
    1070:	20 91 f2 00 	lds	r18, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
    1074:	94 2f       	mov	r25, r20
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	82 2b       	or	r24, r18
    107c:	93 2b       	or	r25, r19
    107e:	89 2b       	or	r24, r25
    1080:	41 f4       	brne	.+16     	; 0x1092 <CDC_Device_ReceiveByte+0x70>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1082:	80 91 e8 00 	lds	r24, 0x00E8
    1086:	8b 77       	andi	r24, 0x7B	; 123
    1088:	80 93 e8 00 	sts	0x00E8, r24
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <CDC_Device_ReceiveByte+0x70>
    108e:	6f ef       	ldi	r22, 0xFF	; 255
    1090:	7f ef       	ldi	r23, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1092:	cb 01       	movw	r24, r22
    1094:	08 95       	ret

00001096 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1096:	08 95       	ret

00001098 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1098:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    109a:	8e b3       	in	r24, 0x1e	; 30
    109c:	84 30       	cpi	r24, 0x04	; 4
    109e:	49 f5       	brne	.+82     	; 0x10f2 <CDC_Device_Flush+0x5a>
    10a0:	87 85       	ldd	r24, Z+15	; 0x0f
    10a2:	90 89       	ldd	r25, Z+16	; 0x10
    10a4:	a1 89       	ldd	r26, Z+17	; 0x11
    10a6:	b2 89       	ldd	r27, Z+18	; 0x12
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	a1 05       	cpc	r26, r1
    10ac:	b1 05       	cpc	r27, r1
    10ae:	09 f1       	breq	.+66     	; 0x10f2 <CDC_Device_Flush+0x5a>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    10b0:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    10b2:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    10b6:	40 91 f3 00 	lds	r20, 0x00F3
    10ba:	20 91 f2 00 	lds	r18, 0x00F2

	if (!(Endpoint_BytesInEndpoint()))
    10be:	94 2f       	mov	r25, r20
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	82 2b       	or	r24, r18
    10c6:	93 2b       	or	r25, r19
    10c8:	89 2b       	or	r24, r25
    10ca:	a9 f0       	breq	.+42     	; 0x10f6 <CDC_Device_Flush+0x5e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10cc:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10d0:	80 91 e8 00 	lds	r24, 0x00E8
    10d4:	8e 77       	andi	r24, 0x7E	; 126
    10d6:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    10da:	95 fd       	sbrc	r25, 5
    10dc:	0c c0       	rjmp	.+24     	; 0x10f6 <CDC_Device_Flush+0x5e>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    10de:	73 db       	rcall	.-2330   	; 0x7c6 <Endpoint_WaitUntilReady>
    10e0:	98 2f       	mov	r25, r24
    10e2:	88 23       	and	r24, r24
    10e4:	49 f4       	brne	.+18     	; 0x10f8 <CDC_Device_Flush+0x60>
    10e6:	80 91 e8 00 	lds	r24, 0x00E8
    10ea:	8e 77       	andi	r24, 0x7E	; 126
    10ec:	80 93 e8 00 	sts	0x00E8, r24
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <CDC_Device_Flush+0x60>
    10f2:	92 e0       	ldi	r25, 0x02	; 2
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <CDC_Device_Flush+0x60>
    10f6:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    10f8:	89 2f       	mov	r24, r25
    10fa:	08 95       	ret

000010fc <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    10fc:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10fe:	8e b3       	in	r24, 0x1e	; 30
    1100:	84 30       	cpi	r24, 0x04	; 4
    1102:	51 f4       	brne	.+20     	; 0x1118 <CDC_Device_USBTask+0x1c>
    1104:	87 85       	ldd	r24, Z+15	; 0x0f
    1106:	90 89       	ldd	r25, Z+16	; 0x10
    1108:	a1 89       	ldd	r26, Z+17	; 0x11
    110a:	b2 89       	ldd	r27, Z+18	; 0x12
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	a1 05       	cpc	r26, r1
    1110:	b1 05       	cpc	r27, r1
    1112:	11 f0       	breq	.+4      	; 0x1118 <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    1114:	cf 01       	movw	r24, r30
    1116:	c0 cf       	rjmp	.-128    	; 0x1098 <CDC_Device_Flush>
    1118:	08 95       	ret

0000111a <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    111a:	1f 93       	push	r17
    111c:	fc 01       	movw	r30, r24
    111e:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1120:	8e b3       	in	r24, 0x1e	; 30
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	d9 f4       	brne	.+54     	; 0x115c <CDC_Device_SendByte+0x42>
    1126:	87 85       	ldd	r24, Z+15	; 0x0f
    1128:	90 89       	ldd	r25, Z+16	; 0x10
    112a:	a1 89       	ldd	r26, Z+17	; 0x11
    112c:	b2 89       	ldd	r27, Z+18	; 0x12
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	a1 05       	cpc	r26, r1
    1132:	b1 05       	cpc	r27, r1
    1134:	99 f0       	breq	.+38     	; 0x115c <CDC_Device_SendByte+0x42>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    1136:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1138:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    113c:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
    1140:	85 fd       	sbrc	r24, 5
    1142:	08 c0       	rjmp	.+16     	; 0x1154 <CDC_Device_SendByte+0x3a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1144:	80 91 e8 00 	lds	r24, 0x00E8
    1148:	8e 77       	andi	r24, 0x7E	; 126
    114a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    114e:	3b db       	rcall	.-2442   	; 0x7c6 <Endpoint_WaitUntilReady>
    1150:	88 23       	and	r24, r24
    1152:	29 f4       	brne	.+10     	; 0x115e <CDC_Device_SendByte+0x44>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1154:	10 93 f1 00 	sts	0x00F1, r17
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	01 c0       	rjmp	.+2      	; 0x115e <CDC_Device_SendByte+0x44>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    115c:	82 e0       	ldi	r24, 0x02	; 2
}
    115e:	1f 91       	pop	r17
    1160:	08 95       	ret

00001162 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    116a:	0d 96       	adiw	r24, 0x0d	; 13
    116c:	fc 01       	movw	r30, r24
    116e:	89 e0       	ldi	r24, 0x09	; 9
    1170:	df 01       	movw	r26, r30
    1172:	1d 92       	st	X+, r1
    1174:	8a 95       	dec	r24
    1176:	e9 f7       	brne	.-6      	; 0x1172 <CDC_Device_ConfigureEndpoints+0x10>
    1178:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	18 17       	cp	r17, r24
    117e:	29 f4       	brne	.+10     	; 0x118a <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
    1180:	ea 81       	ldd	r30, Y+2	; 0x02
    1182:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	62 e0       	ldi	r22, 0x02	; 2
    1188:	10 c0       	rjmp	.+32     	; 0x11aa <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	18 17       	cp	r17, r24
    118e:	31 f4       	brne	.+12     	; 0x119c <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
    1190:	ee 81       	ldd	r30, Y+6	; 0x06
    1192:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1194:	88 85       	ldd	r24, Y+8	; 0x08
    1196:	62 e0       	ldi	r22, 0x02	; 2
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	08 c0       	rjmp	.+16     	; 0x11ac <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	18 17       	cp	r17, r24
    11a0:	09 f5       	brne	.+66     	; 0x11e4 <CDC_Device_ConfigureEndpoints+0x82>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
    11a2:	ea 85       	ldd	r30, Y+10	; 0x0a
    11a4:	fb 85       	ldd	r31, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
    11a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    11a8:	63 e0       	ldi	r22, 0x03	; 3
    11aa:	31 e0       	ldi	r19, 0x01	; 1
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    11ac:	88 23       	and	r24, r24
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <CDC_Device_ConfigureEndpoints+0x52>
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <CDC_Device_ConfigureEndpoints+0x54>
    11b4:	44 e0       	ldi	r20, 0x04	; 4
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	88 e0       	ldi	r24, 0x08	; 8
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    11be:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    11c4:	8e 17       	cp	r24, r30
    11c6:	9f 07       	cpc	r25, r31
    11c8:	d0 f3       	brcs	.-12     	; 0x11be <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | Direction),
    11ca:	62 95       	swap	r22
    11cc:	66 0f       	add	r22, r22
    11ce:	66 0f       	add	r22, r22
    11d0:	60 7c       	andi	r22, 0xC0	; 192
    11d2:	63 2b       	or	r22, r19
    11d4:	42 60       	ori	r20, 0x02	; 2
    11d6:	22 95       	swap	r18
    11d8:	20 7f       	andi	r18, 0xF0	; 240
    11da:	42 2b       	or	r20, r18
    11dc:	81 2f       	mov	r24, r17
    11de:	c1 da       	rcall	.-2686   	; 0x762 <Endpoint_ConfigureEndpoint_Prv>
    11e0:	88 23       	and	r24, r24
    11e2:	21 f0       	breq	.+8      	; 0x11ec <CDC_Device_ConfigureEndpoints+0x8a>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    11e4:	1f 5f       	subi	r17, 0xFF	; 255
    11e6:	17 30       	cpi	r17, 0x07	; 7
    11e8:	41 f6       	brne	.-112    	; 0x117a <CDC_Device_ConfigureEndpoints+0x18>
    11ea:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	08 95       	ret

000011f4 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11fa:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    11fe:	83 ff       	sbrs	r24, 3
    1200:	64 c0       	rjmp	.+200    	; 0x12ca <CDC_Device_ProcessControlRequest+0xd6>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1202:	88 81       	ld	r24, Y
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	20 91 c3 01 	lds	r18, 0x01C3
    120a:	30 91 c4 01 	lds	r19, 0x01C4
    120e:	28 17       	cp	r18, r24
    1210:	39 07       	cpc	r19, r25
    1212:	09 f0       	breq	.+2      	; 0x1216 <CDC_Device_ProcessControlRequest+0x22>
    1214:	5a c0       	rjmp	.+180    	; 0x12ca <CDC_Device_ProcessControlRequest+0xd6>
	  return;

	switch (USB_ControlRequest.bRequest)
    1216:	80 91 c0 01 	lds	r24, 0x01C0
    121a:	81 32       	cpi	r24, 0x21	; 33
    121c:	61 f0       	breq	.+24     	; 0x1236 <CDC_Device_ProcessControlRequest+0x42>
    121e:	82 32       	cpi	r24, 0x22	; 34
    1220:	20 f4       	brcc	.+8      	; 0x122a <CDC_Device_ProcessControlRequest+0x36>
    1222:	80 32       	cpi	r24, 0x20	; 32
    1224:	09 f0       	breq	.+2      	; 0x1228 <CDC_Device_ProcessControlRequest+0x34>
    1226:	51 c0       	rjmp	.+162    	; 0x12ca <CDC_Device_ProcessControlRequest+0xd6>
    1228:	1b c0       	rjmp	.+54     	; 0x1260 <CDC_Device_ProcessControlRequest+0x6c>
    122a:	82 32       	cpi	r24, 0x22	; 34
    122c:	81 f1       	breq	.+96     	; 0x128e <CDC_Device_ProcessControlRequest+0x9a>
    122e:	83 32       	cpi	r24, 0x23	; 35
    1230:	09 f0       	breq	.+2      	; 0x1234 <CDC_Device_ProcessControlRequest+0x40>
    1232:	4b c0       	rjmp	.+150    	; 0x12ca <CDC_Device_ProcessControlRequest+0xd6>
    1234:	3c c0       	rjmp	.+120    	; 0x12ae <CDC_Device_ProcessControlRequest+0xba>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1236:	80 91 bf 01 	lds	r24, 0x01BF
    123a:	81 3a       	cpi	r24, 0xA1	; 161
    123c:	09 f0       	breq	.+2      	; 0x1240 <CDC_Device_ProcessControlRequest+0x4c>
    123e:	45 c0       	rjmp	.+138    	; 0x12ca <CDC_Device_ProcessControlRequest+0xd6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1240:	80 91 e8 00 	lds	r24, 0x00E8
    1244:	87 7f       	andi	r24, 0xF7	; 247
    1246:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    124a:	ce 01       	movw	r24, r28
    124c:	0f 96       	adiw	r24, 0x0f	; 15
    124e:	67 e0       	ldi	r22, 0x07	; 7
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	44 dc       	rcall	.-1912   	; 0xadc <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1254:	80 91 e8 00 	lds	r24, 0x00E8
    1258:	8b 77       	andi	r24, 0x7B	; 123
    125a:	80 93 e8 00 	sts	0x00E8, r24
    125e:	35 c0       	rjmp	.+106    	; 0x12ca <CDC_Device_ProcessControlRequest+0xd6>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1260:	80 91 bf 01 	lds	r24, 0x01BF
    1264:	81 32       	cpi	r24, 0x21	; 33
    1266:	89 f5       	brne	.+98     	; 0x12ca <CDC_Device_ProcessControlRequest+0xd6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1268:	80 91 e8 00 	lds	r24, 0x00E8
    126c:	87 7f       	andi	r24, 0xF7	; 247
    126e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
    1272:	ce 01       	movw	r24, r28
    1274:	0f 96       	adiw	r24, 0x0f	; 15
    1276:	67 e0       	ldi	r22, 0x07	; 7
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	94 dc       	rcall	.-1752   	; 0xba4 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    127c:	80 91 e8 00 	lds	r24, 0x00E8
    1280:	8e 77       	andi	r24, 0x7E	; 126
    1282:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1286:	ce 01       	movw	r24, r28
    1288:	0e 94 c4 00 	call	0x188	; 0x188 <EVENT_CDC_Device_LineEncodingChanged>
    128c:	1e c0       	rjmp	.+60     	; 0x12ca <CDC_Device_ProcessControlRequest+0xd6>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    128e:	80 91 bf 01 	lds	r24, 0x01BF
    1292:	81 32       	cpi	r24, 0x21	; 33
    1294:	d1 f4       	brne	.+52     	; 0x12ca <CDC_Device_ProcessControlRequest+0xd6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1296:	80 91 e8 00 	lds	r24, 0x00E8
    129a:	87 7f       	andi	r24, 0xF7	; 247
    129c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    12a0:	73 da       	rcall	.-2842   	; 0x788 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    12a2:	80 91 c1 01 	lds	r24, 0x01C1
    12a6:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    12a8:	ce 01       	movw	r24, r28
    12aa:	f5 de       	rcall	.-534    	; 0x1096 <CDC_Device_Event_Stub>
    12ac:	0e c0       	rjmp	.+28     	; 0x12ca <CDC_Device_ProcessControlRequest+0xd6>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12ae:	80 91 bf 01 	lds	r24, 0x01BF
    12b2:	81 32       	cpi	r24, 0x21	; 33
    12b4:	51 f4       	brne	.+20     	; 0x12ca <CDC_Device_ProcessControlRequest+0xd6>
    12b6:	80 91 e8 00 	lds	r24, 0x00E8
    12ba:	87 7f       	andi	r24, 0xF7	; 247
    12bc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    12c0:	63 da       	rcall	.-2874   	; 0x788 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    12c2:	ce 01       	movw	r24, r28
    12c4:	60 91 c1 01 	lds	r22, 0x01C1
    12c8:	e6 de       	rcall	.-564    	; 0x1096 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <strtol>:
    12d0:	2f 92       	push	r2
    12d2:	3f 92       	push	r3
    12d4:	5f 92       	push	r5
    12d6:	6f 92       	push	r6
    12d8:	7f 92       	push	r7
    12da:	8f 92       	push	r8
    12dc:	9f 92       	push	r9
    12de:	af 92       	push	r10
    12e0:	bf 92       	push	r11
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	8c 01       	movw	r16, r24
    12f4:	1b 01       	movw	r2, r22
    12f6:	ea 01       	movw	r28, r20
    12f8:	61 15       	cp	r22, r1
    12fa:	71 05       	cpc	r23, r1
    12fc:	19 f0       	breq	.+6      	; 0x1304 <strtol+0x34>
    12fe:	fb 01       	movw	r30, r22
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	80 83       	st	Z, r24
    1304:	20 97       	sbiw	r28, 0x00	; 0
    1306:	49 f0       	breq	.+18     	; 0x131a <strtol+0x4a>
    1308:	ce 01       	movw	r24, r28
    130a:	02 97       	sbiw	r24, 0x02	; 2
    130c:	83 97       	sbiw	r24, 0x23	; 35
    130e:	28 f0       	brcs	.+10     	; 0x131a <strtol+0x4a>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	f3 c0       	rjmp	.+486    	; 0x1500 <strtol+0x230>
    131a:	f8 01       	movw	r30, r16
    131c:	a1 90       	ld	r10, Z+
    131e:	8f 01       	movw	r16, r30
    1320:	8a 2d       	mov	r24, r10
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0c d1       	rcall	.+536    	; 0x153e <isspace>
    1326:	89 2b       	or	r24, r25
    1328:	c1 f7       	brne	.-16     	; 0x131a <strtol+0x4a>
    132a:	fd e2       	ldi	r31, 0x2D	; 45
    132c:	af 16       	cp	r10, r31
    132e:	31 f4       	brne	.+12     	; 0x133c <strtol+0x6c>
    1330:	f8 01       	movw	r30, r16
    1332:	a1 90       	ld	r10, Z+
    1334:	8f 01       	movw	r16, r30
    1336:	55 24       	eor	r5, r5
    1338:	53 94       	inc	r5
    133a:	07 c0       	rjmp	.+14     	; 0x134a <strtol+0x7a>
    133c:	fb e2       	ldi	r31, 0x2B	; 43
    133e:	af 16       	cp	r10, r31
    1340:	19 f4       	brne	.+6      	; 0x1348 <strtol+0x78>
    1342:	f8 01       	movw	r30, r16
    1344:	a1 90       	ld	r10, Z+
    1346:	8f 01       	movw	r16, r30
    1348:	55 24       	eor	r5, r5
    134a:	20 97       	sbiw	r28, 0x00	; 0
    134c:	19 f0       	breq	.+6      	; 0x1354 <strtol+0x84>
    134e:	c0 31       	cpi	r28, 0x10	; 16
    1350:	d1 05       	cpc	r29, r1
    1352:	c1 f4       	brne	.+48     	; 0x1384 <strtol+0xb4>
    1354:	f0 e3       	ldi	r31, 0x30	; 48
    1356:	af 16       	cp	r10, r31
    1358:	79 f4       	brne	.+30     	; 0x1378 <strtol+0xa8>
    135a:	f8 01       	movw	r30, r16
    135c:	80 81       	ld	r24, Z
    135e:	88 37       	cpi	r24, 0x78	; 120
    1360:	11 f0       	breq	.+4      	; 0x1366 <strtol+0x96>
    1362:	88 35       	cpi	r24, 0x58	; 88
    1364:	49 f4       	brne	.+18     	; 0x1378 <strtol+0xa8>
    1366:	f8 01       	movw	r30, r16
    1368:	a1 80       	ldd	r10, Z+1	; 0x01
    136a:	0e 5f       	subi	r16, 0xFE	; 254
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	f2 e0       	ldi	r31, 0x02	; 2
    1370:	5f 2a       	or	r5, r31
    1372:	c0 e1       	ldi	r28, 0x10	; 16
    1374:	d0 e0       	ldi	r29, 0x00	; 0
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <strtol+0xb4>
    1378:	20 97       	sbiw	r28, 0x00	; 0
    137a:	21 f4       	brne	.+8      	; 0x1384 <strtol+0xb4>
    137c:	80 e3       	ldi	r24, 0x30	; 48
    137e:	a8 16       	cp	r10, r24
    1380:	e9 f4       	brne	.+58     	; 0x13bc <strtol+0xec>
    1382:	27 c0       	rjmp	.+78     	; 0x13d2 <strtol+0x102>
    1384:	c8 30       	cpi	r28, 0x08	; 8
    1386:	d1 05       	cpc	r29, r1
    1388:	31 f1       	breq	.+76     	; 0x13d6 <strtol+0x106>
    138a:	c9 30       	cpi	r28, 0x09	; 9
    138c:	d1 05       	cpc	r29, r1
    138e:	24 f4       	brge	.+8      	; 0x1398 <strtol+0xc8>
    1390:	c2 30       	cpi	r28, 0x02	; 2
    1392:	d1 05       	cpc	r29, r1
    1394:	31 f5       	brne	.+76     	; 0x13e2 <strtol+0x112>
    1396:	0c c0       	rjmp	.+24     	; 0x13b0 <strtol+0xe0>
    1398:	ca 30       	cpi	r28, 0x0A	; 10
    139a:	d1 05       	cpc	r29, r1
    139c:	89 f0       	breq	.+34     	; 0x13c0 <strtol+0xf0>
    139e:	c0 31       	cpi	r28, 0x10	; 16
    13a0:	d1 05       	cpc	r29, r1
    13a2:	f9 f4       	brne	.+62     	; 0x13e2 <strtol+0x112>
    13a4:	c1 2c       	mov	r12, r1
    13a6:	d1 2c       	mov	r13, r1
    13a8:	e1 2c       	mov	r14, r1
    13aa:	b8 e0       	ldi	r27, 0x08	; 8
    13ac:	fb 2e       	mov	r15, r27
    13ae:	27 c0       	rjmp	.+78     	; 0x13fe <strtol+0x12e>
    13b0:	c1 2c       	mov	r12, r1
    13b2:	d1 2c       	mov	r13, r1
    13b4:	e1 2c       	mov	r14, r1
    13b6:	a0 e4       	ldi	r26, 0x40	; 64
    13b8:	fa 2e       	mov	r15, r26
    13ba:	21 c0       	rjmp	.+66     	; 0x13fe <strtol+0x12e>
    13bc:	ca e0       	ldi	r28, 0x0A	; 10
    13be:	d0 e0       	ldi	r29, 0x00	; 0
    13c0:	fc ec       	ldi	r31, 0xCC	; 204
    13c2:	cf 2e       	mov	r12, r31
    13c4:	fc ec       	ldi	r31, 0xCC	; 204
    13c6:	df 2e       	mov	r13, r31
    13c8:	fc ec       	ldi	r31, 0xCC	; 204
    13ca:	ef 2e       	mov	r14, r31
    13cc:	fc e0       	ldi	r31, 0x0C	; 12
    13ce:	ff 2e       	mov	r15, r31
    13d0:	16 c0       	rjmp	.+44     	; 0x13fe <strtol+0x12e>
    13d2:	c8 e0       	ldi	r28, 0x08	; 8
    13d4:	d0 e0       	ldi	r29, 0x00	; 0
    13d6:	c1 2c       	mov	r12, r1
    13d8:	d1 2c       	mov	r13, r1
    13da:	e1 2c       	mov	r14, r1
    13dc:	e0 e1       	ldi	r30, 0x10	; 16
    13de:	fe 2e       	mov	r15, r30
    13e0:	0e c0       	rjmp	.+28     	; 0x13fe <strtol+0x12e>
    13e2:	9e 01       	movw	r18, r28
    13e4:	44 27       	eor	r20, r20
    13e6:	37 fd       	sbrc	r19, 7
    13e8:	40 95       	com	r20
    13ea:	54 2f       	mov	r21, r20
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e8       	ldi	r25, 0x80	; 128
    13f4:	ce d0       	rcall	.+412    	; 0x1592 <__udivmodsi4>
    13f6:	c9 01       	movw	r24, r18
    13f8:	da 01       	movw	r26, r20
    13fa:	6c 01       	movw	r12, r24
    13fc:	7d 01       	movw	r14, r26
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	3e 01       	movw	r6, r28
    140a:	88 24       	eor	r8, r8
    140c:	77 fc       	sbrc	r7, 7
    140e:	80 94       	com	r8
    1410:	98 2c       	mov	r9, r8
    1412:	70 ed       	ldi	r23, 0xD0	; 208
    1414:	b7 2e       	mov	r11, r23
    1416:	ba 0c       	add	r11, r10
    1418:	e9 e0       	ldi	r30, 0x09	; 9
    141a:	eb 15       	cp	r30, r11
    141c:	70 f4       	brcc	.+28     	; 0x143a <strtol+0x16a>
    141e:	8a 2d       	mov	r24, r10
    1420:	81 54       	subi	r24, 0x41	; 65
    1422:	8a 31       	cpi	r24, 0x1A	; 26
    1424:	18 f4       	brcc	.+6      	; 0x142c <strtol+0x15c>
    1426:	99 ec       	ldi	r25, 0xC9	; 201
    1428:	b9 2e       	mov	r11, r25
    142a:	06 c0       	rjmp	.+12     	; 0x1438 <strtol+0x168>
    142c:	8a 2d       	mov	r24, r10
    142e:	81 56       	subi	r24, 0x61	; 97
    1430:	8a 31       	cpi	r24, 0x1A	; 26
    1432:	48 f5       	brcc	.+82     	; 0x1486 <strtol+0x1b6>
    1434:	89 ea       	ldi	r24, 0xA9	; 169
    1436:	b8 2e       	mov	r11, r24
    1438:	ba 0c       	add	r11, r10
    143a:	8b 2d       	mov	r24, r11
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	8c 17       	cp	r24, r28
    1440:	9d 07       	cpc	r25, r29
    1442:	0c f5       	brge	.+66     	; 0x1486 <strtol+0x1b6>
    1444:	6f 3f       	cpi	r22, 0xFF	; 255
    1446:	d9 f0       	breq	.+54     	; 0x147e <strtol+0x1ae>
    1448:	c2 16       	cp	r12, r18
    144a:	d3 06       	cpc	r13, r19
    144c:	e4 06       	cpc	r14, r20
    144e:	f5 06       	cpc	r15, r21
    1450:	a8 f0       	brcs	.+42     	; 0x147c <strtol+0x1ac>
    1452:	ca 01       	movw	r24, r20
    1454:	b9 01       	movw	r22, r18
    1456:	a4 01       	movw	r20, r8
    1458:	93 01       	movw	r18, r6
    145a:	7c d0       	rcall	.+248    	; 0x1554 <__mulsi3>
    145c:	9b 01       	movw	r18, r22
    145e:	ac 01       	movw	r20, r24
    1460:	2b 0d       	add	r18, r11
    1462:	31 1d       	adc	r19, r1
    1464:	41 1d       	adc	r20, r1
    1466:	51 1d       	adc	r21, r1
    1468:	21 30       	cpi	r18, 0x01	; 1
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	3f 07       	cpc	r19, r31
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	4f 07       	cpc	r20, r31
    1472:	f0 e8       	ldi	r31, 0x80	; 128
    1474:	5f 07       	cpc	r21, r31
    1476:	10 f4       	brcc	.+4      	; 0x147c <strtol+0x1ac>
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	01 c0       	rjmp	.+2      	; 0x147e <strtol+0x1ae>
    147c:	6f ef       	ldi	r22, 0xFF	; 255
    147e:	f8 01       	movw	r30, r16
    1480:	a1 90       	ld	r10, Z+
    1482:	8f 01       	movw	r16, r30
    1484:	c6 cf       	rjmp	.-116    	; 0x1412 <strtol+0x142>
    1486:	21 14       	cp	r2, r1
    1488:	31 04       	cpc	r3, r1
    148a:	81 f0       	breq	.+32     	; 0x14ac <strtol+0x1dc>
    148c:	66 23       	and	r22, r22
    148e:	31 f0       	breq	.+12     	; 0x149c <strtol+0x1cc>
    1490:	01 50       	subi	r16, 0x01	; 1
    1492:	10 40       	sbci	r17, 0x00	; 0
    1494:	f1 01       	movw	r30, r2
    1496:	11 83       	std	Z+1, r17	; 0x01
    1498:	00 83       	st	Z, r16
    149a:	08 c0       	rjmp	.+16     	; 0x14ac <strtol+0x1dc>
    149c:	51 fe       	sbrs	r5, 1
    149e:	1a c0       	rjmp	.+52     	; 0x14d4 <strtol+0x204>
    14a0:	02 50       	subi	r16, 0x02	; 2
    14a2:	10 40       	sbci	r17, 0x00	; 0
    14a4:	f1 01       	movw	r30, r2
    14a6:	11 83       	std	Z+1, r17	; 0x01
    14a8:	00 83       	st	Z, r16
    14aa:	14 c0       	rjmp	.+40     	; 0x14d4 <strtol+0x204>
    14ac:	67 ff       	sbrs	r22, 7
    14ae:	12 c0       	rjmp	.+36     	; 0x14d4 <strtol+0x204>
    14b0:	50 fc       	sbrc	r5, 0
    14b2:	05 c0       	rjmp	.+10     	; 0x14be <strtol+0x1ee>
    14b4:	2f ef       	ldi	r18, 0xFF	; 255
    14b6:	3f ef       	ldi	r19, 0xFF	; 255
    14b8:	4f ef       	ldi	r20, 0xFF	; 255
    14ba:	5f e7       	ldi	r21, 0x7F	; 127
    14bc:	04 c0       	rjmp	.+8      	; 0x14c6 <strtol+0x1f6>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	50 e8       	ldi	r21, 0x80	; 128
    14c6:	82 e2       	ldi	r24, 0x22	; 34
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	90 93 c8 01 	sts	0x01C8, r25
    14ce:	80 93 c7 01 	sts	0x01C7, r24
    14d2:	16 c0       	rjmp	.+44     	; 0x1500 <strtol+0x230>
    14d4:	50 fe       	sbrs	r5, 0
    14d6:	08 c0       	rjmp	.+16     	; 0x14e8 <strtol+0x218>
    14d8:	50 95       	com	r21
    14da:	40 95       	com	r20
    14dc:	30 95       	com	r19
    14de:	21 95       	neg	r18
    14e0:	3f 4f       	sbci	r19, 0xFF	; 255
    14e2:	4f 4f       	sbci	r20, 0xFF	; 255
    14e4:	5f 4f       	sbci	r21, 0xFF	; 255
    14e6:	0c c0       	rjmp	.+24     	; 0x1500 <strtol+0x230>
    14e8:	57 ff       	sbrs	r21, 7
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <strtol+0x230>
    14ec:	82 e2       	ldi	r24, 0x22	; 34
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	90 93 c8 01 	sts	0x01C8, r25
    14f4:	80 93 c7 01 	sts	0x01C7, r24
    14f8:	2f ef       	ldi	r18, 0xFF	; 255
    14fa:	3f ef       	ldi	r19, 0xFF	; 255
    14fc:	4f ef       	ldi	r20, 0xFF	; 255
    14fe:	5f e7       	ldi	r21, 0x7F	; 127
    1500:	b9 01       	movw	r22, r18
    1502:	ca 01       	movw	r24, r20
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	cf 90       	pop	r12
    1514:	bf 90       	pop	r11
    1516:	af 90       	pop	r10
    1518:	9f 90       	pop	r9
    151a:	8f 90       	pop	r8
    151c:	7f 90       	pop	r7
    151e:	6f 90       	pop	r6
    1520:	5f 90       	pop	r5
    1522:	3f 90       	pop	r3
    1524:	2f 90       	pop	r2
    1526:	08 95       	ret

00001528 <isxdigit>:
    1528:	91 11       	cpse	r25, r1
    152a:	11 c0       	rjmp	.+34     	; 0x154e <__ctype_isfalse>
    152c:	80 53       	subi	r24, 0x30	; 48
    152e:	8a 50       	subi	r24, 0x0A	; 10
    1530:	28 f0       	brcs	.+10     	; 0x153c <isxdigit+0x14>
    1532:	86 5c       	subi	r24, 0xC6	; 198
    1534:	80 62       	ori	r24, 0x20	; 32
    1536:	81 56       	subi	r24, 0x61	; 97
    1538:	86 50       	subi	r24, 0x06	; 6
    153a:	b8 f7       	brcc	.-18     	; 0x152a <isxdigit+0x2>
    153c:	08 95       	ret

0000153e <isspace>:
    153e:	91 11       	cpse	r25, r1
    1540:	06 c0       	rjmp	.+12     	; 0x154e <__ctype_isfalse>
    1542:	80 32       	cpi	r24, 0x20	; 32
    1544:	19 f0       	breq	.+6      	; 0x154c <isspace+0xe>
    1546:	89 50       	subi	r24, 0x09	; 9
    1548:	85 50       	subi	r24, 0x05	; 5
    154a:	d0 f7       	brcc	.-12     	; 0x1540 <isspace+0x2>
    154c:	08 95       	ret

0000154e <__ctype_isfalse>:
    154e:	99 27       	eor	r25, r25
    1550:	88 27       	eor	r24, r24

00001552 <__ctype_istrue>:
    1552:	08 95       	ret

00001554 <__mulsi3>:
    1554:	62 9f       	mul	r22, r18
    1556:	d0 01       	movw	r26, r0
    1558:	73 9f       	mul	r23, r19
    155a:	f0 01       	movw	r30, r0
    155c:	82 9f       	mul	r24, r18
    155e:	e0 0d       	add	r30, r0
    1560:	f1 1d       	adc	r31, r1
    1562:	64 9f       	mul	r22, r20
    1564:	e0 0d       	add	r30, r0
    1566:	f1 1d       	adc	r31, r1
    1568:	92 9f       	mul	r25, r18
    156a:	f0 0d       	add	r31, r0
    156c:	83 9f       	mul	r24, r19
    156e:	f0 0d       	add	r31, r0
    1570:	74 9f       	mul	r23, r20
    1572:	f0 0d       	add	r31, r0
    1574:	65 9f       	mul	r22, r21
    1576:	f0 0d       	add	r31, r0
    1578:	99 27       	eor	r25, r25
    157a:	72 9f       	mul	r23, r18
    157c:	b0 0d       	add	r27, r0
    157e:	e1 1d       	adc	r30, r1
    1580:	f9 1f       	adc	r31, r25
    1582:	63 9f       	mul	r22, r19
    1584:	b0 0d       	add	r27, r0
    1586:	e1 1d       	adc	r30, r1
    1588:	f9 1f       	adc	r31, r25
    158a:	bd 01       	movw	r22, r26
    158c:	cf 01       	movw	r24, r30
    158e:	11 24       	eor	r1, r1
    1590:	08 95       	ret

00001592 <__udivmodsi4>:
    1592:	a1 e2       	ldi	r26, 0x21	; 33
    1594:	1a 2e       	mov	r1, r26
    1596:	aa 1b       	sub	r26, r26
    1598:	bb 1b       	sub	r27, r27
    159a:	fd 01       	movw	r30, r26
    159c:	0d c0       	rjmp	.+26     	; 0x15b8 <__udivmodsi4_ep>

0000159e <__udivmodsi4_loop>:
    159e:	aa 1f       	adc	r26, r26
    15a0:	bb 1f       	adc	r27, r27
    15a2:	ee 1f       	adc	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	a2 17       	cp	r26, r18
    15a8:	b3 07       	cpc	r27, r19
    15aa:	e4 07       	cpc	r30, r20
    15ac:	f5 07       	cpc	r31, r21
    15ae:	20 f0       	brcs	.+8      	; 0x15b8 <__udivmodsi4_ep>
    15b0:	a2 1b       	sub	r26, r18
    15b2:	b3 0b       	sbc	r27, r19
    15b4:	e4 0b       	sbc	r30, r20
    15b6:	f5 0b       	sbc	r31, r21

000015b8 <__udivmodsi4_ep>:
    15b8:	66 1f       	adc	r22, r22
    15ba:	77 1f       	adc	r23, r23
    15bc:	88 1f       	adc	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	1a 94       	dec	r1
    15c2:	69 f7       	brne	.-38     	; 0x159e <__udivmodsi4_loop>
    15c4:	60 95       	com	r22
    15c6:	70 95       	com	r23
    15c8:	80 95       	com	r24
    15ca:	90 95       	com	r25
    15cc:	9b 01       	movw	r18, r22
    15ce:	ac 01       	movw	r20, r24
    15d0:	bd 01       	movw	r22, r26
    15d2:	cf 01       	movw	r24, r30
    15d4:	08 95       	ret

000015d6 <_exit>:
    15d6:	f8 94       	cli

000015d8 <__stop_program>:
    15d8:	ff cf       	rjmp	.-2      	; 0x15d8 <__stop_program>
